; Hey, emacs(1), this is -*- Mode: TDL; Coding: utf-8; -*- got it?

; chartmappet := verb_pret_tag &
;   [ STEM < "chartmappet" >,
;     SYNSEM [ LOCAL.CONT.RELS <! #rel !>,
; 	     LKEYS.KEYREL #rel & [ PRED "_chartmappet_v_rel" ] ],
;     TOKENS.+LIST native_token_list &
; 	   < [+POS.+TAGS < "verb_pret" > ] > ].




0-card := pl-card-word &
  [ STEM < "0" >,
    LEXREL.LIST.FIRST.CARG "0" ].

1-card := sg-card-word &
  [ STEM < "1" >,
    LEXREL.LIST.FIRST.CARG "1" ].

én-card := masc-sg-card-word &
  [ STEM < "én" >,
    LEXREL.LIST.FIRST.CARG "1" ].

en-card := masc-sg-card-word &
  [ STEM < "en" >,
    LEXREL.LIST.FIRST.CARG "en" ].

ei-card := fem-sg-card-word &
  [ STEM < "ei" >,
    LEXREL.LIST.FIRST.CARG "ei" ].

et-card := neut-sg-card-word &
  [ STEM < "et" >,
    LEXREL.LIST.FIRST.CARG "et" ].

et-par_q := pl-indef-art-det-word &
  [ STEM < "et","par" >,
    SYNSEM.LKEYS.Q.QREL.PRED _et-par_q_rel ].

ett-card := neut-sg-card-word &
  [ STEM < "ett" >,
    LEXREL.LIST.FIRST.CARG "1" ].

3b-pn := sg-comm-pn &
  [ STEM < "3b" >,
    SYNSEM.LKEYS.KEYREL.CARG "3B" ].

; hygg := open-lxm &
;   [ STEM < "hygge" >,
;     SYNSEM.LKEYS.KEYREL.PRED "hygg-rel" ].

Agder-pn := pn-word &
  [ STEM < "Agder" >,
    SYNSEM.LKEYS.KEYREL.CARG "Agder" ].

Alfhild-pn := pn-word &
  [ STEM < "Alfhild" >,
    SYNSEM.LKEYS.KEYREL.CARG "Alfhild" ].

Anne-Lene-pn := pn-word &
  [ STEM < "Anne-Lene" >,
    SYNSEM.LKEYS.KEYREL.CARG "Anne-Lene" ].

Asia-pn := pn-word &
  [ STEM < "Asia" >,
    SYNSEM.LKEYS.KEYREL.CARG "Asia" ].

Arna_pn := pn-word &
  [ STEM < "Arna" >,
    SYNSEM.LKEYS.KEYREL.CARG "Arna" ].

Blåryggen-pn := pn-word &
  [ STEM < "Blåryggen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Blåryggen" ].

EM-noun-word := mod-noun-word &
  [ STEM < "EM" >,
    SYNSEM.LKEYS.KEYREL.PRED "_europamesterskap-abbriv_rel" ].

England-pn := pn-word &
  [ STEM < "England" >,
    SYNSEM.LKEYS.KEYREL.CARG "England" ].

Hans-pn := pn-word &
  [ STEM < "Hans" >,
    SYNSEM.LKEYS.KEYREL.CARG "Hans" ].

Harald-pn := pn-word &
  [ STEM < "Harald" >,
    SYNSEM.LKEYS.KEYREL.CARG "Harald" ].

Henrik-pn := pn-word &
  [ STEM < "Henrik" >,
    SYNSEM.LKEYS.KEYREL.CARG "Henrik" ].

Ibsen-pn := pn-word &
  [ STEM < "Ibsen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Ibsen" ].

Inge-pn := pn-word &
  [ STEM < "Inge" >,
    SYNSEM.LKEYS.KEYREL.CARG "Inge" ].

Irmelin-pn := pn-word &
  [ STEM < "Irmelin" >,
    SYNSEM.LKEYS.KEYREL.CARG "Irmelin" ].

Jesus-pn := pn-word &
  [ STEM < "Jesus" >,
    SYNSEM.LKEYS.KEYREL.CARG "Jesus" ].

Jon-pn := pn-word &
  [ STEM < "Jon" >,
    SYNSEM.LKEYS.KEYREL.CARG "Jon" ].

Kari-pn := pn-word &
  [ STEM < "Kari" >,
    SYNSEM.LKEYS.KEYREL.CARG "Kari" ].

Marit-pn := pn-word &
  [ STEM < "Marit" >,
    SYNSEM.LKEYS.KEYREL.CARG "Marit" ].

NRK-pn := pn-word &
  [ STEM < "NRK" >,
    SYNSEM.LKEYS.KEYREL.CARG "NRK" ].

Norge-pn := pn-word &
  [ STEM < "Norge" >,
    SYNSEM.LKEYS.KEYREL.CARG "Norge" ].

OL-noun-word := mod-noun-word &
  [ STEM < "OL" >,
    SYNSEM.LKEYS.KEYREL.PRED "_olympiske-leker-abbriv_rel" ].

Ola-pn := pn-word &
  [ STEM < "Ola" >,
    SYNSEM.LKEYS.KEYREL.CARG "Ola" ].

Per-pn := pn-word &
  [ STEM < "Per" >,
    SYNSEM.LKEYS.KEYREL.CARG "Per" ].

Petter-pn := pn-word &
  [ STEM < "Petter" >,
    SYNSEM.LKEYS.KEYREL.CARG "Petter" ].

Telemark-pn := pn-word &
  [ STEM < "Telemark" >,
    SYNSEM.LKEYS.KEYREL.CARG "Telemark" ].

Tromsø-pn := pn-word &
  [ STEM < "Tromsø" >,
    SYNSEM.LKEYS.KEYREL.CARG "Tromsø" ].

Trøndelag-pn := pn-word &
  [ STEM < "Trøndelag" >,
    SYNSEM.LKEYS.KEYREL.CARG "Trøndelag" ].

VM-noun-word := mod-noun-word &
  [ STEM < "VM" >,
    SYNSEM.LKEYS.KEYREL.PRED "_verdensmesterskap-abbriv_rel" ].

Ålesund-pn := pn-word &
  [ STEM < "Ålesund" >,
    SYNSEM.LKEYS.KEYREL.CARG "Ålesund" ].

abrams-pn := sg-comm-pn &
  [ STEM < "Abrams" >,
    SYNSEM.LKEYS.KEYREL.CARG "Abrams" ].

absorbere_v := trans-verb-lxm &
  [ STEM < "absorbere" >,
    INFLECTION v2,
    SYNSEM.LKEYS.KEYREL.PRED "_absorbere_12_rel" ].

adskillig_func := func-word &
  [ STEM < "adskillig" >,
    SYNSEM.LKEYS.KEYREL.PRED adskillig_prd ].

akkurat_func := func-word &
  [ STEM < "akkurat" >,
    SYNSEM.LKEYS.KEYREL.PRED akkurat_prd ].

albue-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "albue" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_albue_n_rel" ].

aldri_func := func-word &
  [ STEM < "aldri" >,
    SYNSEM.LKEYS.KEYREL.PRED aldri_prd ].

all_q := comm-all-quant-word &
  [ STEM < "all" > ]. 

alle_q := pl-all-quant-word &
  [ STEM < "alle" > ].

allerede_func := func-word &
  [ STEM < "allerede" >,
    SYNSEM.LKEYS.KEYREL.PRED allerede_prd ].

alltid_func := func-word &
  [ STEM < "alltid" >,
    SYNSEM.LKEYS.KEYREL.PRED alltid_prd ].

alt_q := neut-all-quant-word &
  [ STEM < "alt" > ].

alt-i-alt_func := func-word &
  [ STEM < "alt","i","alt" >,
    SYNSEM.LKEYS.KEYREL.PRED alt*i*alt_prd ].

alt-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "alt" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_alt_n_rel" ].

alt-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "alt" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_alt_n_rel" ].

alt_func := func-word &
  [ STEM < "alt" >,
    SYNSEM.LKEYS.KEYREL.PRED alt_prd ].

andre-card := sg-def-card-word &
  [ STEM < "andre" >,
    LEXREL.LIST.FIRST.CARG "andre_rel" ].

ane-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "ane" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_ane_n_rel" ].

ane_v := main-verb-lxm &
  [ STEM < "ane" >,
    INFLECTION v2,
    SYNSEM.LKEYS.KEYREL.PRED ane_v ].

ankomme_v := main-verb-lxm &
  [ STEM < "ankomme" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED ankomme_v ].

annenhver_q := indef-count-det &
  [ STEM < "annenhver" >,
    SYNSEM.LKEYS.Q.QREL.PRED _annenhver_q_rel ].

anse_v := main-verb-lxm &
  [ STEM < "anse" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED anse_v ].

anspore_v := main-verb-lxm &
  [ INFLECTION v1-v2,
    STEM < "anspore" >,
    SYNSEM.LKEYS.KEYREL.PRED anspore_v ].

ansvarlig-a := mwe-adj-lxm &
  [ STEM < "ansvarlig" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED ansvarlig_prd ].

anta_v := main-verb-lxm &
  [ STEM < "anta" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED anta_v ].

antagelig_func := func-word &
  [ STEM < "antagelig" >,
    SYNSEM.LKEYS.KEYREL.PRED antagelig_prd ].

antagelig-a := adj-lxm &
  [ STEM < "antagelig" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_antagelig_a_rel" ].

appelsinjuice-n-masc := masc-cmp-noun-lxm &
  [ STEM < "appelsinjuice" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_appelsinjuice_n_rel" ].

apple-pn := sg-comm-pn &
  [ STEM < "apple" >,
    SYNSEM.LKEYS.KEYREL.CARG "Apple" ].

applikasjonsprogramvare-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "applikasjonsprogramvare" >,
    SYNSEM.LKEYS.KEYREL.PRED "_applikasjonsprogramvare_n_rel",
    INFLECTION n2 ].

april-n-masc := masc-mod-noun-lxm &
  [ STEM < "april" >,
    SYNSEM.LOCAL.CAT.HEAD.AGREE.DEFINITENESS def,
    SYNSEM.LKEYS.KEYREL.PRED _april_n_rel,
    INFLECTION m1 ].

arbeid-n-neut := neut-mwe-noun-lxm &
  [ INFLECTION n1-n2,
    STEM < "arbeid" >,
    SYNSEM.LKEYS.KEYREL.PRED arbeid_prd ].

arbeide-n-neut := neut-cmp-noun-lxm &
  [ STEM < "arbeide" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_arbeide_n_rel" ].

arbeide_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "arbeide" >,
    SYNSEM.LKEYS.KEYREL.PRED arbeide_v ].

aroma-n-masc := masc-cmp-noun-lxm &
  [ STEM < "aroma" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_aroma_n_rel" ].

aroma-pn := sg-comm-pn &
  [ STEM < "aroma" >,
    SYNSEM.LKEYS.KEYREL.CARG "AROMA" ].

at-comp := at-complementizer-word &
  [ STEM < "at" >,
    SYNSEM [ LOCAL.CAT.HEAD subcompl ] ].

atten-card := pl-card-word &
  [ STEM < "18" >,
    LEXREL.LIST.FIRST.CARG "18_card_rel" ].

attende-card := sg-def-card-word &
  [ STEM < "attende" >,
    LEXREL.LIST.FIRST.CARG "attende_rel" ].

august-n-masc := masc-mod-noun-lxm &
  [ STEM < "august" >,
    SYNSEM.LOCAL.CAT.HEAD.AGREE.DEFINITENESS def,
    SYNSEM.LKEYS.KEYREL.PRED _august_n_rel,
    INFLECTION m1 ].

av_func := func-word &
  [ STEM < "av" >,
    SYNSEM.LKEYS.KEYREL.PRED av_prd ].

avd-card-select-word := card-select-word &
  [ STEM < "avd" >,
    SYNSEM.LKEYS.KEYREL.PRED "_avdeling-abbriv_rel" ].

avhandling-n-comm := comm-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "avhandling" >,
    SYNSEM.LKEYS.KEYREL.PRED "_avhandling_n_rel" ].

avhenge_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "avhenge" >,
    SYNSEM.LKEYS.KEYREL.PRED avhenge_v ].

avis-n-comm := comm-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "avis" >,
    SYNSEM.LKEYS.KEYREL.PRED "_avis_n_rel" ].

avstå_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "avstå" >,
    SYNSEM.LKEYS.KEYREL.PRED avstå_v ].

avtegne_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "avtegne" >,
    SYNSEM.LKEYS.KEYREL.PRED avtegne_v ].

babbage-pn := sg-comm-pn &
  [ STEM < "babbage" >,
    SYNSEM.LKEYS.KEYREL.CARG "Babbage" ].

bak-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "bak" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_bak_n_rel" ].

bak_func := func-word &
  [ STEM < "bak" >,
    SYNSEM.LKEYS.KEYREL.PRED bak_prd ].

bakke-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "bakke" >,
    SYNSEM.LKEYS.KEYREL.PRED "_bakke_n_rel" ].

bakke_v := main-verb-lxm &
  [ STEM < "bakke" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED bakke_v ].

bakklandet-pn := sg-neut-pn &
  [ STEM < "bakklandet" >,
    SYNSEM.LKEYS.KEYREL.CARG "BAKKLANDET" ].

ball-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "ball" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_ball_n_rel" ].

ball-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "ball" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_ball_n_rel" ].

banan-n-masc := masc-cmp-noun-lxm &
  [ INFLECTION m1,
    STEM < "banan" >,
    SYNSEM.LKEYS.KEYREL.PRED "_banan_n_rel" ].

; bane-n-fem := comm-cmp-count-noun-lxm &
;   [ STEM < "bane" >,
;     INFLECTION m1,
;     SYNSEM.LKEYS.KEYREL.PRED bane ].

bar-a := adj-lxm &
  [ STEM < "bar" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_bar_a_rel" ].

bar-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "bar" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_bar_n_rel" ].

bar-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "bar" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_bar_n_rel" ].

bare-func := func-word &
  [ STEM < "bare" >,
    SYNSEM.LKEYS.KEYREL.PRED bare_prd ].

bare-blåbær-pn := sg-comm-pn &
  [ STEM < "bare", "blåbær" >,
    SYNSEM.LKEYS.KEYREL.CARG "Bare Blåbær" ].

barn-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "barn" >,
    SYNSEM.LKEYS.KEYREL.PRED "_barn_n_rel" ].

basere_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "basere" >,
    SYNSEM.LKEYS.KEYREL.PRED basere_v ].

be_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "be" >,
    SYNSEM.LKEYS.KEYREL.PRED be_v ].

begge := both-quant-word &
  [ STEM < "begge" > ].

begrave_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "begrave" >,
    SYNSEM.LKEYS.KEYREL.PRED begrave_v ].

begynne_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "begynne" >,
    SYNSEM.LKEYS.KEYREL.PRED begynne_v ].

beitostølen-pn := sg-comm-pn &
  [ STEM < "beitostølen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Beitostølen" ].

belyse_v := trans-verb-lxm &
  [ STEM < "belyse" >,
    INFLECTION v2, 
    SYNSEM.LKEYS.KEYREL.PRED "_belyse_12_rel" ].

beløpe_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "beløpe" >,
    SYNSEM.LKEYS.KEYREL.PRED beløpe_v ].

bemektige_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "bemektige" >,
    SYNSEM.LKEYS.KEYREL.PRED bemektige_v ].

bemøye_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "bemøye" >,
    SYNSEM.LKEYS.KEYREL.PRED bemøye_v ].

ben-pn := sg-comm-pn &
  [ STEM < "Ben" >,
    SYNSEM.LKEYS.KEYREL.CARG "Ben" ].

beordre_v := main-verb-lxm &
  [ STEM < "beordre" >,
    INFLECTION v1, 
    SYNSEM.LKEYS.KEYREL.PRED beordre_v ].

beregne_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "beregne" >,
    SYNSEM.LKEYS.KEYREL.PRED beregne_v ].

besseggen-pn := sg-comm-pn &
  [ STEM < "besseggen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Besseggen" ].

bessheim-pn := sg-comm-pn &
  [ STEM < "bessheim" >,
    SYNSEM.LKEYS.KEYREL.CARG "Bessheim" ].

besøke_v := trans-verb-lxm &
  [ INFLECTION v2,
    STEM < "besøke" >,
    SYNSEM.LKEYS.KEYREL.PRED "_besøke_12_rel" ].

betweendigitersatz-word := digit-word &
  [ STEM < "betweendigitsersatz" >].

bety_v := main-verb-lxm &
  [ STEM < "bety" >,
    INFLECTION v1, 
    SYNSEM.LKEYS.KEYREL.PRED bety_v ].

beundre_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "beundre" >,
    SYNSEM.LKEYS.KEYREL.PRED beundre_v ].

bevis-n-neut := neut-mwe-noun-lxm &
  [ INFLECTION n1-n2,
    STEM < "bevis" >,
    SYNSEM.LKEYS.KEYREL.PRED bevis_prd ].

bil-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "bil" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_bil_n_rel" ].

billig-a := adj-lxm &
  [ INFLECTION a2,
    STEM < "billig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_billig_a_rel" ].

bilvei-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "bilvei" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_bilvei_n_rel" ].

bjarne-pn := sg-comm-pn &
  [ STEM < "bjarne" >,
    SYNSEM.LKEYS.KEYREL.CARG "BJARNE" ].

bl-a-func := func-word &
  [ STEM < "bl.a." >,
    SYNSEM.LKEYS.KEYREL.PRED bl-a_prd ].


blant-annet-mod-np := func-word &
  [ STEM < "blant","annet" >,
    SYNSEM.LKEYS.KEYREL.PRED bl-a_prd ].

blant_func := func-word &
  [ STEM < "blant" >,
    SYNSEM.LKEYS.KEYREL.PRED blant_prd ].

blei-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "blei" >,
    SYNSEM.LKEYS.KEYREL.PRED "_blei_n_rel" ].

bli-aux := pass-aux-lxm &
  [ STEM < "bli" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED "parg_d_rel" ].

bli_v := main-verb-lxm &
  [ STEM < "bli" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED bli_v ].

blod-n-neut := neut-cmp-noun-lxm &
  [ INFLECTION n1,
    STEM < "blod" >,
    SYNSEM.LKEYS.KEYREL.PRED "_blod_n_rel" ].

blokkskriving-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "blokkskriving" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_blokkskriving_n_rel" ].

blåbær-n-neut := neut-cmp-noun-lxm &
  [ INFLECTION n1,
    STEM < "blåbær" >,
    SYNSEM.LKEYS.KEYREL.PRED "_blåbær_n_rel" ].

blåse_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "blåse" >,
    SYNSEM.LKEYS.KEYREL.PRED blåse_v ].

blått-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "blått" >,
    INFLECTION no-infl,
    SYNSEM.LKEYS.KEYREL.PRED "_blått_n_rel" ].

blæst-pn := sg-comm-pn &
  [ STEM < "blæst" >,
    SYNSEM.LKEYS.KEYREL.CARG "Blæst" ].

bo_v := main-verb-lxm &
  [ INFLECTION v4,
    STEM < "bo" >,
    SYNSEM.LKEYS.KEYREL.PRED bo_v ].

bok-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "bok" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_bok_n_rel" ].

bokstavelig-a := adj-lxm &
  [ STEM < "bokstavelig" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_bokstavelig_a_rel" ].

bokstavelig-talt_func := func-word &
  [ STEM < "bokstavelig","talt" >,
    SYNSEM.LKEYS.KEYREL.PRED bokstavelig*talt_prd ].

bord-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "bord" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_bord_n_rel" ].

bord-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "bord" >,
    SYNSEM.LKEYS.KEYREL.PRED "_bord_n_rel" ].

bort_func := func-word &
  [ STEM < "bort" >,
    SYNSEM.LKEYS.KEYREL.PRED bort_prd ].

bra-a := adj-lxm &
  [ INFLECTION a3a,
    STEM < "bra" >,
    SYNSEM.LKEYS.KEYREL.PRED "_bra_a_rel" ].

braute_v := main-verb-lxm &
  [ STEM < "braute" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED braute_v ].

bre-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "bre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_bre_n_rel" ].

bre_v := main-verb-lxm &
  [ STEM < "bre" >,
    INFLECTION v4,
    SYNSEM.LKEYS.KEYREL.PRED bre_v ].

breføring-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "breføring" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_breføring_n_rel" ].

brenne_v := main-verb-lxm &
  [ STEM < "brenne" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED brenne_v ].

brev-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "brev" >,
    SYNSEM.LKEYS.KEYREL.PRED "_brev_n_rel" ].

brevandring-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "brevandring" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_brevandring_n_rel" ].

bris-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "bris" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_bris_n_rel" ].

bro-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "bro" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_bro_n_rel" ].

browne-pn := sg-comm-pn &
  [ STEM < "Browne" >,
    SYNSEM.LKEYS.KEYREL.CARG "Browne" ].

bru-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "bru" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_bru_n_rel" ].

bruk-n-masc := mascorneut-cmp-noun-lxm &
  [ INFLECTION m1,
    STEM < "bruk" >,
    SYNSEM.LKEYS.KEYREL.PRED "_bruk_n_rel" ].

bruk-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "bruk" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_bruk_n_rel" ].

brukbar-a := adj-lxm &
  [ STEM < "brukbar" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_brukbar_a_rel" ].

brukbar-pn := sg-comm-pn &
  [ STEM < "brukbar" >,
    SYNSEM.LKEYS.KEYREL.CARG "Brukbar" ].

bruke_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "bruke" >,
    SYNSEM.LKEYS.KEYREL.PRED bruke_v ].

brukergrensesnitt-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "brukergrensesnitt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_brukergrensesnitt_n_rel",
    INFLECTION n1 ].

brukermodus-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "brukermodus" >,
    SYNSEM.LKEYS.KEYREL.PRED "_brukermodus_n_rel" ].

brunt-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "brunt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_brunt_n_rel",
    INFLECTION no-infl ].

brus-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "brus" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_brus_n_rel" ].

brus-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "brus" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_brus_n_rel" ].

buldre_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "buldre" >,
    SYNSEM.LKEYS.KEYREL.PRED buldre_v ].

burde-aux1 := inf-pres-modal-aux-lxm &
  [ STEM < "burde" >,
    INFLECTION v1,
    SYNSEM [ LOCAL [ MODAL [ BURDE -,
			     KUNNE #kunne,
			     MATTE #matte,
			     SKULLE #skulle,
			     VILLE #ville ],
		     CAT.VBL.LOCAL.MODAL [ BURDE +,
					   KUNNE #kunne,
					   MATTE #matte,
					   SKULLE #skulle,
					   VILLE #ville ] ],
	     LKEYS.KEYREL.PRED "_burde_aux_rel" ] ].

burde-aux2 := pret-perf-modal-aux-lxm &
  [ STEM < "burde" >,
    INFLECTION v1,
    SYNSEM [ LOCAL [ MODAL [ BURDE -,
			     KUNNE #kunne,
			     MATTE #matte,
			     SKULLE #skulle,
			     VILLE #ville ],
		     CAT.VBL.LOCAL.MODAL [ BURDE +,
					   KUNNE #kunne,
					   MATTE #matte,
					   SKULLE #skulle,
					   VILLE #ville ] ],
	     LKEYS.KEYREL.PRED "_burde_aux_rel" ] ].

by-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "by" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_by_n_rel" ].

by_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "by" >,
    SYNSEM.LKEYS.KEYREL.PRED by_v ].

bye-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "qqqqq" >,
    SYNSEM.LKEYS.KEYREL.PRED "_bye_n_rel",
    INFLECTION m1 ].

bygdin-pn := sg-comm-pn &
  [ STEM < "bygdin" >,
    SYNSEM.LKEYS.KEYREL.CARG "Bygdin" ].

bygge_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "bygge" >,
    SYNSEM.LKEYS.KEYREL.PRED bygge_v ].

byhaven-pn := sg-comm-pn &
  [ STEM < "byhaven" >,
    SYNSEM.LKEYS.KEYREL.CARG "Byhaven" ].

bytte-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "bytte" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_bytte_n_rel" ].

bytte_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "bytte" >,
    SYNSEM.LKEYS.KEYREL.PRED bytte_v ].

;; FIXME: både mot Galdhøpiggen og Rondane
både := func-word &
  [ STEM < "både" >,
    SYNSEM.LKEYS.KEYREL.PRED _både*og_c_rel ].

bøtte-n-comm := comm-mwe-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "bøtte" >,
    SYNSEM.LKEYS.KEYREL.PRED bøtte_prd ].

bøvertun-pn := sg-comm-pn &
  [ STEM < "bøvertun" >,
    SYNSEM.LKEYS.KEYREL.CARG "Bøvertun" ].

ca_func := func-word &
  [ STEM < "ca" >,
    SYNSEM.LKEYS.KEYREL.PRED ca_prd ].

ca-mod-punct := func-word &
  [ STEM < "ca." >,
    SYNSEM.LKEYS.KEYREL.PRED ca_prd ].

cafe-larsen-pn := sg-comm-pn &
  [ STEM < "cafe", "larsen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Cafe Larsen" ].

cappuccino-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "cappuccino" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_cappuccino_n_rel" ].

carl-johans-gate-pn := sg-comm-pn &
  [ STEM < "carl", "johans", "gate" >,
    SYNSEM.LKEYS.KEYREL.CARG "Carl Johanes Gate" ].

cd-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "cd" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_cd_n_rel" ].

chips-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "chips" >,
    SYNSEM.LKEYS.KEYREL.PRED "_chips_n_rel" ].

choco-boco-pn := sg-comm-pn &
  [ STEM < "choco", "boco" >,
    SYNSEM.LKEYS.KEYREL.CARG "Choko Boko" ].

cinemateket-pn := sg-comm-pn &
  [ STEM < "cinemateket" >,
    SYNSEM.LKEYS.KEYREL.CARG "Cinemateket" ].

city-pn := sg-comm-pn &
  [ STEM < "city" >,
    SYNSEM.LKEYS.KEYREL.CARG "City" ].

clocktimeersatz := pl-card-word &
  [ STEM < "clocktimeersatz" > ].

closebracket := close-bracket-word &
  [ STEM < ")" >,
    SYNSEM.LKEYS.KEYREL.PRED "close-bracket_rel" ].

cm-noun-word := mod-noun-word &
  [ STEM < "cm" >,
    SYNSEM.LKEYS.KEYREL.PRED "_centimeter-abbriv_rel" ].

cola-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "cola" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_cola_n_rel" ].

colon := colon-word &
  [ STEM < ":" >,
    SYNSEM.LKEYS.KEYREL.PRED "colon_rel" ].

comma := comma-word &
  [ STEM < "," >,
    SYNSEM.LKEYS.KEYREL.PRED norm_rel ].

commodore-pn := sg-comm-pn &
  [ STEM < "commodore" >,
    SYNSEM.LKEYS.KEYREL.CARG "Commodore" ].

cortado-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "cortado" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_cortado_n_rel" ].

cp-pn := sg-comm-pn &
  [ STEM < "cp" >,
    SYNSEM.LKEYS.KEYREL.CARG "CP" ].

da_func := func-word &
  [ STEM < "da" >,
    SYNSEM.LKEYS.KEYREL.PRED da_prd ].

dag-n-masc := masc-mwe-count-noun-lxm &
  [ STEM < "dag" >,
    SYNSEM.LKEYS.KEYREL.PRED dag_prd,
    INFLECTION m1 ].

dal-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "dal" >,
    SYNSEM.LKEYS.KEYREL.PRED "_dal_n_rel" ].

datamaskinserie-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "datamaskinserie" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_datamaskinserie_n_rel" ].

datasystem-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "datasystem" >,
    SYNSEM.LKEYS.KEYREL.PRED "_datasystem_n_rel",
    INFLECTION n1-n2 ].

de-d1 := pl-def-art-det-word &
  [ STEM < "de" >].

dec-pn := sg-comm-pn &
  [ STEM < "dec" >,
    SYNSEM.LKEYS.KEYREL.CARG "Dec" ].

decimalersatz := pl-card-word &
  [ STEM < "decimalersatz" > ].

deler-av-p := prep-verbmod-word &
  [ STEM < "deler","av" >,
    SYNSEM.LKEYS.KEYREL.PRED "_deler-av_prd" ].

def-annen-da := def-da-word &
  [ STEM < "andre" >,
    LEXREL.LIST.FIRST.PRED "_annen_da_rel" ].

deg-np := 2sg-pron &
  [ STEM < "deg" >,
    SYNSEM.LOCAL [ CAT.CASE non-subj-case ] ].

dekke_v := main-verb-lxm &
  [ STEM <"dekke">,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED dekke_v ].

del-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "del" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_del_n_rel" ].

dele_v := main-verb-lxm &
  [ STEM < "dele" >,
    INFLECTION v2,
    SYNSEM.LKEYS.KEYREL.PRED dele_v ].

dels_func := func-word &
  [ STEM < "dels" >,
    SYNSEM.LKEYS.KEYREL.PRED dels_prd ].

dem-np := 1pl-pron &
  [ STEM < "dem" >,
    SYNSEM.LOCAL [ CAT [ CASE non-subj-case ] ] ].

den-d1 := comm-def-art-det-word &
  [ STEM < "den" >].

den-gang_func := func-word &
  [ STEM < "den","gangen" >,
    SYNSEM.LKEYS.KEYREL.PRED den*gang_prd ].

den-gode-nabo-pn := sg-comm-pn &
  [ STEM < "den", "gode", "nabo" >,
    SYNSEM.LKEYS.KEYREL.CARG "Den Gode Nabo" ].

denne_q := comm-dem-det-word &
  [ STEM < "denne" >].

dens := 3masc-poss &
  [ STEM < "dens" > ].
;SYNSEM.LKEYS.KEYREL.ARG2.PNG.ANIM non-human ].

der_func := func-word &
  [ STEM < "der" >,
    SYNSEM.LKEYS.KEYREL.PRED der_prd ].

dere-np := 2pl-pron &
  [ STEM < "dere" > ].

deretter_func := func-word &
  [ STEM < "deretter" >,
    SYNSEM.LKEYS.KEYREL.PRED deretter_prd ].

deres := 2-3pl-poss &
  [ STEM < "deres" > ].

derfor_func := func-word &
  [ STEM < "derfor" >,
    SYNSEM.LKEYS.KEYREL.PRED derfor_prd ].

derfor-sadv-mod := mod-sadv-word &
  [ STEM < "derfor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_derfor_mod_rel" ].

dersom_func := func-word &
  [ STEM < "dersom" >,
    SYNSEM.LKEYS.KEYREL.PRED dersom_prd ].

desember-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "desember" >,
    SYNSEM.LOCAL.CAT.HEAD.AGREE.DEFINITENESS def,
    SYNSEM.LKEYS.KEYREL.PRED "_desember_n_rel",
    INFLECTION m1 ].

det*at_func := func-word &
  [ STEM < "det", "at" >,
    SYNSEM.LKEYS.KEYREL.PRED det*at_prd ].

; Took out the MOD <> constraint in order to allow for:
; Det siste er usikkert                                     (2011-11-17; ph)

det_q := neut-def-art-det-word &
  [ STEM < "det" > ].

det-expl := expletive-noun-phrase &
  [ STEM < "det" > ].

det-meste-np := noun-phrase &
  [ STEM < "det","meste" >,
    SYNSEM.LKEYS.KEYREL.PRED "_det-meste_np_rel" ].

dets := 3neut-poss &
  [ STEM < "dets" > ].
;    SYNSEM.LKEYS.KEYREL.ARG2.PNG.ANIM non-human ].

dette_q := neut-dem-det-word &
  [ STEM < "dette" >].

dette_v := main-verb-lxm &
  [ STEM < "dette" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED dette_v ].

di := fem-2sg-poss &
  [ STEM < "di" > ].

digge_v := trans-verb-lxm &
 [ INFLECTION v1,
    STEM < "digge" >,
    SYNSEM.LKEYS.KEYREL.PRED "_digge_12_rel" ].

dikt-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "dikt" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_dikt_n_rel" ].

din := masc-2sg-poss &
  [ STEM < "din" > ].

dine := pl-2sg-poss &
  [ STEM < "dine" > ].

direkte-a := adj-lxm &
  [ STEM < "direkte" >,
    INFLECTION a3,
    SYNSEM.LKEYS.KEYREL.PRED "_direkte_a_rel" ].

direktør-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "direktør" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_direktør_n_rel" ].

diskotek-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n2,
    STEM < "diskotek" >,
    SYNSEM.LKEYS.KEYREL.PRED "_diskotek_n_rel" ].

diskutere_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "diskutere" >,
    SYNSEM.LKEYS.KEYREL.PRED diskutere_v ].

dispensere_v := trans-verb-lxm &
  [ STEM < "dispensere" >,
    INFLECTION v2, 
    SYNSEM.LKEYS.KEYREL.PRED "_dispensere_12_rel" ].

disse_q := pl-dem-det-word &
  [ STEM < "disse" >].

disse_v := main-verb-lxm &
  [ STEM < "disse" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED disse_v ].

dit_func := func-word &
  [ STEM < "dit" >,
    SYNSEM.LKEYS.KEYREL.PRED dit_prd ].

ditt := neut-2sg-poss &
  [ STEM < "ditt" > ].

dm-noun-word := mod-noun-word &
  [ STEM < "dm" >,
    SYNSEM.LKEYS.KEYREL.PRED "_desiimeter-abbriv_rel" ].

dnt-pn := sg-comm-pn &
  [ STEM < "dnt" >,
    SYNSEM.LKEYS.KEYREL.CARG "DNT" ].

downtown-pn := sg-comm-pn &
  [ STEM < "downtown" >,
    SYNSEM.LKEYS.KEYREL.CARG "DOWNTOWN" ].

dr-livingstone-pn := sg-comm-pn &
  [ STEM < "dr", "livingstone" >,
    SYNSEM.LKEYS.KEYREL.CARG "DR LIVINGSTONE" ].

drepe_v := main-verb-lxm &
  [ STEM < "drepe" >,
    INFLECTION v2,
    SYNSEM.LKEYS.KEYREL.PRED drepe_v ].

dresse_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "dresse" >,
    SYNSEM.LKEYS.KEYREL.PRED dresse_v ].

drikke-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "drikke" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_drikke_n_rel" ].

drikke_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "drikke" >,
    SYNSEM.LKEYS.KEYREL.PRED drikke_v ].

drive-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "drive" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_drive_n_rel" ].

drive_v := main-verb-lxm &
  [ STEM < "drive" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED drive_v ].

dromedar-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "dromedar" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_dromedar_n_rel" ].

dromedar-pn := sg-comm-pn &
  [ STEM < "dromedar" >,
    SYNSEM.LKEYS.KEYREL.CARG "DROMEDAR" ].

dronningens-gate-pn := sg-comm-pn &
  [ STEM < "dronningens", "gate" >,
    SYNSEM.LKEYS.KEYREL.CARG "Dronningens Gate" ].

dryppe_v := main-verb-lxm &
  [ STEM < "dryppe" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED dryppe_v ].

dråpe-n-comm := comm-mwe-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "dråpe" >,
    SYNSEM.LKEYS.KEYREL.PRED dråpe_prd ].

du-np := 2sg-pron &
  [ STEM < "du" >,
    SYNSEM.LOCAL [ CAT.CASE subj-case ] ].

dukke-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "dukke" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_dukke_n_rel" ].

dukke_v := main-verb-lxm &
  [ STEM < "dukke" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED dukke_v ].

dust-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "dust" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_dust_n_rel" ].

dvs := conj-word &
  [ STEM < "dvs" >,
    SYNSEM.LKEYS.KEYREL.PRED "_dvs_c_rel" ].

dyr-a := adj-lxm &
  [ INFLECTION a1,
    STEM < "dyr" >,
    SYNSEM.LKEYS.KEYREL.PRED "_dyr_a_rel" ].

dyr-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "dyr" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_dyr_n_rel" ].

dyreprogram-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "dyreprogram" >,
    SYNSEM.LKEYS.KEYREL.PRED "_dyreprogram_n_rel" ].

dyrke_v := main-verb-lxm &
  [ STEM < "dyrke" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED dyrke_v ].

dårlig-a := mwe-adj-lxm &
  [ INFLECTION a2,
    STEM < "dårlig" >,
    SYNSEM.LKEYS.KEYREL.PRED dårlig_prd ].

dør-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "dør" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_dør_n_rel" ].

egen-a := adj-lxm &
  [ STEM < "egen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_egen_a_rel",
    INFLECTION a1 ].

egentlig-a := adj-lxm &
  [ STEM < "egentlig" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_egentlig_a_rel" ].

egentlig_func := func-word &
  [ STEM < "egentlig" >,
    SYNSEM.LKEYS.KEYREL.PRED egentlig_prd ].

egnet-a := mwe-adj-lxm &
  [ STEM < "egnet" >,
    SYNSEM.LKEYS.KEYREL.PRED egnet_prd, 
    INFLECTION a2 ].

; ei_q := fem-indef-art-det-word &
;   [ STEM < "ei" > ].

eidsbugarden-pn := sg-comm-pn &
  [ STEM < "eidsbugarden" >,
    SYNSEM.LKEYS.KEYREL.CARG "Eidsbugarden" ].

eksistere_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "eksistere" >,
    SYNSEM.LKEYS.KEYREL.PRED eksistere_v ].

eller-conj := conj-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL.PRED eller_prd ].

eller-cont := continuative-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL.PRED "_eller_disc_rel" ].

eller-slash :=  conj-word &
  [ STEM < "/" >,
    SYNSEM.LKEYS.KEYREL.PRED eller_prd ].

ellers_func := func-word &
  [ STEM < "ellers" >,
    SYNSEM.LKEYS.KEYREL.PRED ellers_prd ].

elleve-card := pl-card-word &
  [ STEM < "elleve" >,
    LEXREL.LIST.FIRST.CARG "11_card_rel" ].

ellevte-card := sg-def-card-word &
  [ STEM < "ellevte" >,
    LEXREL.LIST.FIRST.CARG "ellevte_rel" ].

; generic_proper_ne := proper-noun-phrase &
;   [ STEM < "_generic_proper_ne_" >,
;     SYNSEM.LKEYS.KEYREL.PRED named_rel ].

; generic_plur_ne := proper-noun-phrase &
;   [ STEM < "_generic_plur_ne_" >,
;     SYNSEM.LKEYS.KEYREL.PRED named_rel ].

; en_q := masc-indef-art-det-word &
;   [ STEM < "en" > ].

en-del_q := pl-indef-art-det-word &
  [ STEM < "en","del" >,
    SYNSEM.LKEYS.Q.QREL.PRED _en-del_q_rel ].

en-rekke_q := pl-indef-art-det-word &
  [ STEM < "en","rekke" >,
    SYNSEM.LKEYS.Q.QREL.PRED _en-rekke_q_rel ].

ene_v := trans-verb-lxm &
  [ STEM < "ENEDOESNOTPARSE" >,
    INFLECTION v2, 
    SYNSEM.LKEYS.KEYREL.PRED "_ene_12_rel" ].

enhver := comm-hver-quant-word &
  [ STEM < "enhver" >,
    SYNSEM.LKEYS.Q.QREL.PRED _enhver_q_rel ].

enn_func := enn-word &
  [ STEM < "enn" >,
    SYNSEM.LKEYS.KEYREL.PRED enn_prd ].

eple-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "eple" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_eple_n_rel" ].

erichsen-pn := sg-comm-pn &
  [ STEM < "erichsen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Erichsen" ].

espresso-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "espresso" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_espresso_n_rel" ].

; et_q := neut-indef-art-det-word &
;   [ STEM < "et" > ].

etc_func := func-word &
  [ STEM < "etc" >,
    SYNSEM.LKEYS.KEYREL.PRED etc_prd ].

ethvert := neut-hver-quant-word &
  [ STEM < "ethvert" >,
    SYNSEM.LKEYS.Q.QREL.PRED _enhver_q_rel ].

etter_func := func-word &
  [ STEM < "etter" >,
    SYNSEM.LKEYS.KEYREL.PRED etter_prd ].

etterhvert_func := func-word &
  [ STEM < "etterhvert" >,
    SYNSEM.LKEYS.KEYREL.PRED etterhvert_prd ].

ettermiddag-n-masc := masc-mod-cmp-noun-lxm &
  [ INFLECTION m1,
    STEM < "ettermiddag" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ettermiddag_n_rel" ].

etterpå-p := func-word &
  [ STEM < "etterpå" >,
    SYNSEM.LKEYS.KEYREL.PRED etterpå_prd ].

ettersom_func := func-word &
  [ STEM < "ettersom" >,
    SYNSEM.LKEYS.KEYREL.PRED ettersom_prd ].

eu-pn := sg-comm-pn &
  [ STEM < "EU" >,
    SYNSEM.LKEYS.KEYREL.CARG "EU" ].

evaluere_v := trans-verb-lxm &
  [ STEM < "evaluere" >,
    INFLECTION v2, 
    SYNSEM.LKEYS.KEYREL.PRED "_evaluere_12_rel" ].

evaluering-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "evaluering" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_evaluering_n_rel" ].

eventuell-a := adj-lxm &
  [ INFLECTION a1,
    STEM < "eventuell" >,
    SYNSEM.LKEYS.KEYREL.PRED "_eventuell_a_rel" ].

evne-n-fem := comm-mwe-count-noun-lxm &
  [ STEM < "evne" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED evne_prd ].

evne_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "evne" >,
    SYNSEM.LKEYS.KEYREL.PRED evne_v ].

faktisk_func := func-word &
  [ STEM < "faktisk" >,
    SYNSEM.LKEYS.KEYREL.PRED faktisk_prd ].

fange-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "fange" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fange_n_rel" ].

fange_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "fange" >,
    SYNSEM.LKEYS.KEYREL.PRED fange_v ].

fannaråken-pn := sg-comm-pn &
  [ STEM < "fannaråken" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fannaråken" ].

fannaråkhytta-pn := sg-comm-pn &
  [ STEM < "fannaråkhytta" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fannaråkhytta" ].

fantasere_v := main-verb-lxm &
  [ STEM < "fantasere" >,
    INFLECTION v2,
    SYNSEM.LKEYS.KEYREL.PRED fantasere_v ].

fast_func := func-word &
  [ STEM < "fast" >,
    SYNSEM.LKEYS.KEYREL.PRED fast_prd ].

fat-n-neut := neut-mwe-count-noun-lxm &
  [ STEM < "fat" >,
    INFLECTION n1-n2,
    SYNSEM.LKEYS.KEYREL.PRED fat_prd ].

februar-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "februar" >,
    SYNSEM.LOCAL.CAT.HEAD.AGREE.DEFINITENESS def,
    SYNSEM.LKEYS.KEYREL.PRED "_februar_n_rel",
    INFLECTION m1 ].

feks_func := func-word &
  [ STEM < "f.eks." >,
    SYNSEM.LKEYS.KEYREL.PRED feks_prd ].

felles-adv := adv-comp-word &
  [ STEM < "felles" >,
    SYNSEM.LKEYS.KEYREL.PRED felles_prd ].

fem-card := pl-card-word &
  [ STEM < "fem" >,
    LEXREL.LIST.FIRST.CARG "5_card_rel" ].

femte-card := sg-def-card-word &
  [ STEM < "femte" >,
    LEXREL.LIST.FIRST.CARG "femte_rel" ].

femten-card := pl-card-word &
  [ STEM < "femten" >,
    LEXREL.LIST.FIRST.CARG "15_card_rel" ].

femtende-card := sg-def-card-word &
  [ STEM < "femtende" >,
    LEXREL.LIST.FIRST.CARG "femtende_rel" ].

femti-card := pl-card-word &
  [ STEM < "femti" >,
    LEXREL.LIST.FIRST.CARG "50_rel" ].

femtiandre-card := sg-def-card-word &
  [ STEM < "femtiandre" >,
    LEXREL.LIST.FIRST.CARG "52-def_rel" ].

femtien-card := pl-card-word &
  [ STEM < "femtien" >,
    LEXREL.LIST.FIRST.CARG "51_rel" ].

femtiende-card := sg-def-card-word &
  [ STEM < "femtiende" >,
    LEXREL.LIST.FIRST.CARG "50-def_rel" ].

femtifem-card := pl-card-word &
  [ STEM < "femtifem" >,
    LEXREL.LIST.FIRST.CARG "55_rel" ].

femtifemte-card := sg-def-card-word &
  [ STEM < "femtifemte" >,
    LEXREL.LIST.FIRST.CARG "55-def_rel" ].

femtifire-card := pl-card-word &
  [ STEM < "femtifire" >,
    LEXREL.LIST.FIRST.CARG "54_rel" ].

femtifjerde-card := sg-def-card-word &
  [ STEM < "femtifjerde" >,
    LEXREL.LIST.FIRST.CARG "54-def_rel" ].

femtiførste-card := sg-def-card-word &
  [ STEM < "femtiførste" >,
    LEXREL.LIST.FIRST.CARG "51-def_rel" ].

femtini-card := pl-card-word &
  [ STEM < "femtini" >,
    LEXREL.LIST.FIRST.CARG "59_rel" ].

femtiniende-card := sg-def-card-word &
  [ STEM < "femtiniende" >,
    LEXREL.LIST.FIRST.CARG "59-def_rel" ].

femtiseks-card := pl-card-word &
  [ STEM < "femtiseks" >,
    LEXREL.LIST.FIRST.CARG "56_rel" ].

femtisjette-card := sg-def-card-word &
  [ STEM < "femtisjette" >,
    LEXREL.LIST.FIRST.CARG "56-def_rel" ].

femtisju-card := pl-card-word &
  [ STEM < "femtisju" >,
    LEXREL.LIST.FIRST.CARG "57_rel" ].

femtisjuende-card := sg-def-card-word &
  [ STEM < "femtisjuende" >,
    LEXREL.LIST.FIRST.CARG "57-def_rel" ].

femtito-card := pl-card-word &
  [ STEM < "femtito" >,
    LEXREL.LIST.FIRST.CARG "52_rel" ].

femtitre-card := pl-card-word &
  [ STEM < "femtitre" >,
    LEXREL.LIST.FIRST.CARG "53_rel" ].

femtitredje-card := sg-def-card-word &
  [ STEM < "femtitredje" >,
    LEXREL.LIST.FIRST.CARG "53-def_rel" ].

femtiåtte-card := pl-card-word &
  [ STEM < "femtiåtte" >,
    LEXREL.LIST.FIRST.CARG "58_rel" ].

femtiåttende-card := sg-def-card-word &
  [ STEM < "femtiåttende" >,
    LEXREL.LIST.FIRST.CARG "58-def_rel" ].

ferdig-a := mwe-adj-lxm &
  [ STEM < "ferdig" >,
    SYNSEM.LKEYS.KEYREL.PRED ferdig_prd, 
    INFLECTION a2 ].

ferdig_func := func-word &
  [ STEM < "ferdig" >,
    SYNSEM.LKEYS.KEYREL.PRED ferdig_prt ].

film-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "film" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_film_n_rel" ].

filmklubb-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "filmklubb" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_filmklubb_n_rel" ].

fin-a := adj-lxm &
  [ INFLECTION a1,
    STEM < "fin" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fin_a_rel" ].

finne-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "finne" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_finne_n_rel" ].

; finne-sted_v := main-verb-lxm &
;   [ INFLECTION v1,
;     STEM < "finne" >,
;     SYNSEM.LKEYS.KEYREL.ARG0.FRAME sted_v & finne_v,
;     SYNSEM.LKEYS.KEYREL.PRED "_finne*sted_v_rel" ].

finne_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "finne" >,
    SYNSEM.LKEYS.KEYREL.PRED finne_v ].

finnes_v := intrans-verb-lxm &
  [ STEM < "finnes" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED "_finnes_1_rel" ].

finnmark-pn := sg-comm-pn &
  [ STEM < "finnmark" >,
    LEXREL.LIST.FIRST.CARG "Finnmark" ].

fire-card := pl-card-word &
  [ STEM < "fire" >,
    LEXREL.LIST.FIRST.CARG "4_card_rel" ].

fisk-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "fisk" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fisk_n_rel" ].

fjerde-card := sg-def-card-word &
  [ STEM < "fjerde" >,
    LEXREL.LIST.FIRST.CARG "fjerde_rel" ].

fjernsynsprogram-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "fjernsynsprogram" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fjernsynsprogram_n_rel" ].

fjomp-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "fjomp" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fjomp_n_rel" ].

fjordane-pn := sg-comm-pn &
  [ STEM < "fjordane" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fjordane" ].

fjordgaten-pn := sg-comm-pn &
  [ STEM < "fjordgaten" >,
    SYNSEM.LKEYS.KEYREL.CARG "FJORDGATEN" ].

fjorten-card := pl-card-word &
  [ STEM < "fjorten" >,
    LEXREL.LIST.FIRST.CARG "14_card_rel" ].

fjortende-card := sg-def-card-word &
  [ STEM < "fjortende" >,
    LEXREL.LIST.FIRST.CARG "fjortende_rel" ].

flat-a := adj-lxm &
  [ INFLECTION a1,
    STEM < "flat" >,
    SYNSEM.LKEYS.KEYREL.PRED "_flat_a_rel" ].

flere_q := pl-indef-art-det-word &
  [ STEM < "flere" >,
    SYNSEM.LKEYS.Q.QREL.PRED _flere_q_rel ].

flest-func := func-word &
  [ STEM < "flest" >,
    SYNSEM [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD nominal ] >,
	     LKEYS.KEYREL.PRED flest_prd ] ].

flink-a := mwe-adj-lxm &
  [ INFLECTION a1,
    STEM < "flink" >,
    SYNSEM.LKEYS.KEYREL.PRED flink_prd ].

flokete-a := adj-lxm &
  [ INFLECTION a3a,
    STEM < "flokete" >,
    SYNSEM.LKEYS.KEYREL.PRED "_flokete_a_rel" ].

flott-a := adj-lxm &
  [ STEM < "flott" >,
    SYNSEM.LKEYS.KEYREL.PRED "_flott_a_rel",
    INFLECTION a2 ].

flytte_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "flytte" >,
    SYNSEM.LKEYS.KEYREL.PRED flytte_v ].

fms-pn := sg-comm-pn &
  [ STEM < "fms" >,
    SYNSEM.LKEYS.KEYREL.CARG "FMS" ].

fn-noun-word := mod-noun-word &
  [ STEM < "fn" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fn_rel" ].

fokusere_v := main-verb-lxm &
  [ STEM < "fokusere" >,
    INFLECTION v2,
    SYNSEM.LKEYS.KEYREL.PRED fokusere_v ].

folk-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "folk" >,
    SYNSEM.LKEYS.KEYREL.PRED "_folk_n_rel" ].

fondsbu-pn := sg-comm-pn &
  [ STEM < "fondsbu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fondsbu" ].

for-cont := continuative-word &
  [ STEM < "for" >,
    SYNSEM.LKEYS.KEYREL.PRED "_for_disc_rel" ].

for_func := func-word &
  [ STEM < "for" >,
    SYNSEM.LKEYS.KEYREL.PRED for_prd ].

for_deg := mod-adj-adv-word &
  [ STEM < "for" >,
    SYNSEM.LKEYS.KEYREL.PRED for_prd ].

for-øvrig_func := func-word &
  [ STEM < "for","øvrig" >,
    SYNSEM.LKEYS.KEYREL.PRED for*øvrig_prd ].

foran_func := func-word &
  [ STEM < "foran" >,
    SYNSEM.LKEYS.KEYREL.PRED foran_prd ].

forberede_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "forberede" >,
    SYNSEM.LKEYS.KEYREL.PRED forberede_v ].

fordi_func := func-word &
  [ STEM < "fordi" >,
    SYNSEM.LKEYS.KEYREL.PRED fordi_prd ].

foreslå_v := main-verb-lxm &
  [ STEM < "foreslå" >,
    INFLECTION v1, 
    SYNSEM.LKEYS.KEYREL.PRED foreslå_v ].

foretrekke_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "foretrekke" >,
    SYNSEM.LKEYS.KEYREL.PRED foretrekke_v ].

forlove_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "forlove" >,
    SYNSEM.LKEYS.KEYREL.PRED forlove_v ].

formiddag-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "formiddag" >,
    SYNSEM.LKEYS.KEYREL.PRED "_formiddag_n_rel",
    INFLECTION m1 ].

forrige-card-adv := sg-def-card-word &
  [ STEM < "forrige" >,
    SYNSEM.LKEYS.KEYREL.CARG "forrige_a_rel" ].

forsamling-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "forsamling" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_forsamling_n_rel" ].

forskjellig-a := mwe-adj-lxm &
  [ STEM < "forskjellig" >,
    SYNSEM.LKEYS.KEYREL.PRED forskjellig_prd, 
    INFLECTION a2 ].

forsvinne_v := main-verb-lxm &
  [ STEM < "forsvinne" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED forsvinne_v ].

forsyne_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "forsyne" >,
    SYNSEM.LKEYS.KEYREL.PRED forsyne_v ].

forsøke_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "forsøke" >,
    SYNSEM.LKEYS.KEYREL.PRED forsøke_v ].

fortelle_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "fortelle" >,
    SYNSEM.LKEYS.KEYREL.PRED fortelle_v ].

fortran-pn := sg-comm-pn &
  [ STEM < "fortran" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fortran" ].

fortreffelig-a := adj-lxm &
  [ INFLECTION a2,
    STEM < "fortreffelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fortreffelig_a_rel" ].

fortsatt_func := func-word &
  [ STEM < "fortsatt" >,
    SYNSEM.LKEYS.KEYREL.PRED fortsatt_prd ].

fortsette_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "fortsette" >,
    SYNSEM.LKEYS.KEYREL.PRED fortsette_v ].

fortundalen-pn := sg-comm-pn &
  [ STEM < "fortundalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fortundalen" ].

forøvrig_func := func-word &
  [ STEM < "forøvrig" >,
    SYNSEM.LKEYS.KEYREL.PRED forøvrig_prd ].

fot-n-masc := masc-mwe-count-noun-lxm &
  [ STEM < "fot" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED fot_prd ].

fotturrute-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "fotturrute" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fotturrute_n_rel" ].

fra_func := func-word &
  [ STEM < "fra" >,
    SYNSEM.LKEYS.KEYREL.PRED fra_prd ].

frakk-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "frakk" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_frakk_n_rel" ].

frakken-pn := sg-comm-pn &
  [ STEM < "frakken" >,
    SYNSEM.LKEYS.KEYREL.CARG "FRAKKEN" ].

fram_func := func-word &
  [ STEM < "fram" >,
    SYNSEM.LKEYS.KEYREL.PRED fram_prd ].

framheve_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "framheve" >,
    SYNSEM.LKEYS.KEYREL.PRED framheve_v ].

framre_adj_komp_word := adj_komp_word &
  [ STEM < "framre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_framre_adj_rel" ].

framstå_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "framstå" >,
    SYNSEM.LKEYS.KEYREL.PRED framstå_v ].

frastå_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "frastå" >,
    SYNSEM.LKEYS.KEYREL.PRED frastå_v ].

fredag_func := func-word &
  [ STEM < "fredag" >,
    SYNSEM.LKEYS.KEYREL.PRED fredag_prd ].

fredag-n-masc := masc-mod-noun-lxm &
  [ STEM < "fredag" >,
    SYNSEM.LKEYS.KEYREL.PRED _fredag_n_rel,
    INFLECTION m1 ].

freebsd-pn := sg-comm-pn &
  [ STEM < "freebsd" >,
    SYNSEM.LKEYS.KEYREL.CARG "Freebsd" ].

fremre_adj_komp_word := adj_komp_word &
  [ STEM < "fremre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fremre_adj_rel" ].

fremst_adj_sup_word := adj_sup_word &
  [ STEM < "fremst" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_fremst_adj_rel",
	     SAT + ] ].

fremste_adj_sup_word := adj_sup_word &
  [ STEM < "fremste" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_fremste_adj_rel",
	     SAT - ] ].

fru-lundgreen-pn := sg-comm-pn &
  [ STEM < "fru", "lundgreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "FRU LUNDGREN" ].

frukt-n-comm := comm-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "frukt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_frukt_n_rel" ].

fryse_v := main-verb-lxm &
  [ STEM < "fryse" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED fryse_v ].

funksjonalitet-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "funksjonalitet" >,
    SYNSEM.LKEYS.KEYREL.PRED "_funksjonalitet_n_rel" ].

fyre_v := main-verb-lxm &
  [ STEM < "fyre" >,
    INFLECTION v2,
    SYNSEM.LKEYS.KEYREL.PRED fyre_v ].

få-a := adj-lxm &
  [ INFLECTION a3,
    STEM < "få" >,
    SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PN pl,
	     LKEYS.KEYREL.PRED "_få_a_rel" ] ].

få-aux := non-modal-aux-lxm &
  [ STEM < "få" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED "_få_v_rel" ].

få-aux-modal-pret-perf := pret-perf-modal-aux-lxm &
  [ STEM < "få" >,
    INFLECTION v1,
    SYNSEM [ LOCAL.CAT.VBL.LOCAL.CONT.HOOK.INDEX.E.TENSE infin,
             LKEYS.KEYREL.PRED "_få_v_rel" ] ].

få-aux1-modal-ip1-pret := inf-pres-modal-aux-lxm &
  [ STEM < "få" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED "_få_v_rel" ].

få_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "få" >,
    SYNSEM.LKEYS.KEYREL.PRED få_v ].

føde-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "føde" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_føde_n_rel" ].

føde_v := main-verb-lxm &
  [ INFLECTION v1-v2,
    STEM < "føde" >,
    SYNSEM.LKEYS.KEYREL.PRED føde_v ].

føle_v := main-verb-lxm &
  [ STEM < "føle" >,
    INFLECTION v2, 
    SYNSEM.LKEYS.KEYREL.PRED føle_v ].

før_func := func-word &
  [ STEM < "før" >,
    SYNSEM.LKEYS.KEYREL.PRED før_prd ].

tidt-og-ofte_func := func-word &
  [ STEM < "tidt","og","ofte" >,
    SYNSEM.LKEYS.KEYREL.PRED tidt*og*ofte_prd ].
    
først-og-fremst_func := func-word &
  [ STEM < "først","og","fremst" >,
    SYNSEM.LKEYS.KEYREL.PRED først*og*fremst_prd ].

først_func := func-word &
  [ STEM < "først" >,
    SYNSEM.LKEYS.KEYREL.PRED først_prd ].

først-p := mod-prep-word &
  [ STEM < "først" >,
    SYNSEM.LKEYS.KEYREL.PRED "_først_mod_rel" ].

første-def-card := def-card-word &
  [ STEM < "første" >,
    LEXREL.LIST.FIRST.CARG "første_rel" ].

førti-card := pl-card-word &
  [ STEM < "førti" >,
    LEXREL.LIST.FIRST.CARG "40_rel" ].

førtiandre-card := sg-def-card-word &
  [ STEM < "førtiandre" >,
    LEXREL.LIST.FIRST.CARG "42-def_rel" ].

førtien-card := pl-card-word &
  [ STEM < "førtien" >,
    LEXREL.LIST.FIRST.CARG "41_rel" ].

førtiende-card := sg-def-card-word &
  [ STEM < "førtiende" >,
    LEXREL.LIST.FIRST.CARG "40-def_rel" ].

førtifem-card := pl-card-word &
  [ STEM < "førtifem" >,
    LEXREL.LIST.FIRST.CARG "45_rel" ].

førtifemte-card := sg-def-card-word &
  [ STEM < "førtifemte" >,
    LEXREL.LIST.FIRST.CARG "45-def_rel" ].

førtifire-card := pl-card-word &
  [ STEM < "førtifire" >,
    LEXREL.LIST.FIRST.CARG "44_rel" ].

førtifjerde-card := sg-def-card-word &
  [ STEM < "førtifjerde" >,
    LEXREL.LIST.FIRST.CARG "44-def_rel" ].

førtiførste-card := sg-def-card-word &
  [ STEM < "førtiførste" >,
    LEXREL.LIST.FIRST.CARG "41-def_rel" ].

førtini-card := pl-card-word &
  [ STEM < "førtini" >,
    LEXREL.LIST.FIRST.CARG "49_rel" ].

førtiniende-card := sg-def-card-word &
  [ STEM < "førtiniende" >,
    LEXREL.LIST.FIRST.CARG "49-def_rel" ].

førtiseks-card := pl-card-word &
  [ STEM < "førtiseks" >,
    LEXREL.LIST.FIRST.CARG "46_rel" ].

førtisjette-card := sg-def-card-word &
  [ STEM < "førtisjette" >,
    LEXREL.LIST.FIRST.CARG "46-def_rel" ].

førtisju-card := pl-card-word &
  [ STEM < "førtisju" >,
    LEXREL.LIST.FIRST.CARG "47_rel" ].

førtisjuende-card := sg-def-card-word &
  [ STEM < "førtisjuende" >,
    LEXREL.LIST.FIRST.CARG "47-def_rel" ].

førtito-card := pl-card-word &
  [ STEM < "førtito" >,
    LEXREL.LIST.FIRST.CARG "42_rel" ].

førtitre-card := pl-card-word &
  [ STEM < "førtitre" >,
    LEXREL.LIST.FIRST.CARG "43_rel" ].

førtitredje-card := sg-def-card-word &
  [ STEM < "førtitredje" >,
    LEXREL.LIST.FIRST.CARG "43-def_rel" ].

førtiåtte-card := pl-card-word &
  [ STEM < "førtiåtte" >,
    LEXREL.LIST.FIRST.CARG "48_rel" ].

førtiåttende-card := sg-def-card-word &
  [ STEM < "førtiåttende" >,
    LEXREL.LIST.FIRST.CARG "48-def_rel" ].

g-noun-word := mod-noun-word &
  [ STEM < "g" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gram-abbriv_rel" ].

galdhøpiggen-pn := sg-comm-pn &
  [ STEM < "galdhøpiggen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Galdhøpiggen" ].

gammel-a := adj-lxm &
  [ STEM < "gammel" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_gammel_a_rel" ].

gang-n-masc := masc-mod-noun-lxm &
  [ INFLECTION m1,
    STEM < "gang" >,
    SYNSEM.LKEYS.KEYREL.PRED _gang_n_rel ].

ganske-adv := mod-adj-pos-word &
  [ STEM < "ganske" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ganske_mod_rel" ].

garasje-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "garasje" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_garasje_n_rel" ].

gasjere_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "gasjere" >,
    SYNSEM.LKEYS.KEYREL.PRED gasjere_v ].

gate-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "gate" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_gate_n_rel" ].

genser-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m2,
    STEM < "genser" >,
    SYNSEM.LKEYS.KEYREL.PRED "_genser_n_rel" ].

gi_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "gi" >,
    SYNSEM.LKEYS.KEYREL.PRED gi_v ].

gilroy-pn := sg-comm-pn &
  [ STEM < "gilroy" >,
    SYNSEM.LKEYS.KEYREL.CARG "GILROY" ].

gjelde_v := trans-verb-lxm &
  [ INFLECTION v2,
    STEM < "gjelde" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gjelde_12_rel" ].

gjende-pn := sg-comm-pn &
  [ STEM < "gjende" >,
    SYNSEM.LKEYS.KEYREL.CARG "Gjende" ].

gjendebu-pn := sg-comm-pn &
  [ STEM < "gjendebu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Gjendebu" ].

gjendesheim-pn := sg-comm-pn &
  [ STEM < "gjendesheim" >,
    SYNSEM.LKEYS.KEYREL.CARG "Gjendesheim" ].

gjennom_func := func-word &
  [ STEM < "gjennom" >,
    SYNSEM.LKEYS.KEYREL.PRED gjennom_prd ].

gjennomføring-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "gjennomføring" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_gjennomføring_n_rel" ].

gjerde-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n2,
    STEM < "gjerde" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gjerde_n_rel" ].

gjerde_v := main-verb-lxm &
  [ STEM < "gjerde" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED gjerde_v ].

gjøre_v := main-verb-lxm &
  [ STEM < "gjøre" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED gjøre_v ].

glad-a := mwe-adj-lxm &
  [ STEM < "glad" >,
    SYNSEM.LKEYS.KEYREL.PRED glad_prd, 
    INFLECTION a2 ].

glede-n-comm := comm-mwe-count-noun-lxm &
  [ STEM < "glede" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED glede_prd ].

glede_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "glede" >,
    SYNSEM.LKEYS.KEYREL.PRED glede_v ].

glemme_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "glemme" >,
    SYNSEM.LKEYS.KEYREL.PRED glemme_v ].

glitterheim-pn := sg-comm-pn &
  [ STEM < "glitterheim" >,
    SYNSEM.LKEYS.KEYREL.CARG "Glitterheim" ].

gnr-card-select-word := card-select-word &
  [ STEM < "gnr" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gårdsnummer-abbriv_rel" ].

god-a := mwe-adj-lxm &
  [ INFLECTION a1,
    STEM < "god" >,
    SYNSEM.LKEYS.KEYREL.PRED god_prd ].

godt_deg := func-word &
  [ STEM < "godt" >,
    SYNSEM.LKEYS.KEYREL.PRED godt_prd ].

godt-brød-pn := sg-neut-pn &
  [ STEM < "godt", "brød" >,
    SYNSEM.LKEYS.KEYREL.CARG "Godt Brød" ].

gress-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "gress" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gress_n_rel" ].

grått-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "grått" >,
    SYNSEM.LKEYS.KEYREL.PRED "_grått_n_rel",
    INFLECTION no-infl ].

grønn-a := adj-lxm &
  [ STEM < "grønn" >,
    SYNSEM.LKEYS.KEYREL.PRED "_grønn_a_rel", 
    INFLECTION a1 ].

grønt-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "grønt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_grønt_n_rel",
    INFLECTION no-infl ].

gud-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "gud" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gud_n_rel" ].

gul-a := adj-lxm &
  [ STEM < "gul" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_gul_a_rel" ].

gult-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "gult" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gult_n_rel",
    INFLECTION no-infl ].

gutt-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "gutt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gutt_n_rel" ].

gyrd-pn := sg-comm-pn &
  [ STEM < "Gyrd" >,
    SYNSEM.LKEYS.KEYREL.CARG "Gyrd" ].

gå_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "gå" >,
    SYNSEM.LKEYS.KEYREL.PRED gå_v ].

går-kveld-n-word := mod-noun-word &
  [ STEM < "går","kveld" >,
    SYNSEM.LKEYS.KEYREL.PRED "_går-kveld_n_rel" ].

går-n-word := mod-noun-word &
  [ STEM < "går" >,
    SYNSEM.LKEYS.KEYREL.PRED "_går_n_rel" ].

gøy-a := adj-lxm &
  [ INFLECTION a2,
    STEM < "gøy" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gøy_a_rel" ].

gøyal-a := adj-lxm &
  [ INFLECTION a1,
    STEM < "gøyal" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gøyal_a_rel" ].

ha-aux := non-modal-aux-lxm &
  [ STEM < "ha" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED "_ha_aux_rel" ].

ha_v := main-verb-lxm &
  [ STEM < "ha" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED ha_v ].

halv-mod := func-word &
  [ STEM < "halv" >,
    SYNSEM.LKEYS.KEYREL.PRED halv_prd ].

halvannen_q := indef-count-det &
  [ STEM < "halvannen" >,
    SYNSEM.LKEYS.Q.QREL [ PRED _halvannen_q_rel,
			  ARG0.PNG.GEN masc ] ].

halvannet_q := indef-count-det &
  [ STEM < "halvannet" >,
    SYNSEM.LKEYS.Q.QREL [ PRED _halvannen_q_rel,
			  ARG0.PNG.GEN neut ] ].

halve := sg-quant-word &
  [ STEM < "halve" >,
    SYNSEM.LKEYS.Q.QREL.PRED _halve_q_rel ].

halve_v := trans-verb-lxm &
  [ STEM < "halve" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED "_halve_12_rel" ].

halvt_func := func-word &
  [ STEM < "halvt" >,
    SYNSEM.LKEYS.KEYREL.PRED halvt_prd ].

ham-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "ham" >,
    INFLECTION m3,
    SYNSEM.LKEYS.KEYREL.PRED "_ham_n_rel" ].

ham-np := masc-pron &
  [ STEM < "ham" >,
    SYNSEM.LOCAL [ CAT.CASE non-subj-case ] ].

han-np := masc-pron &
  [ STEM < "han" > ].

hans := 3masc-poss &
  [ STEM < "hans" > ].
;    SYNSEM.LKEYS.KEYREL.ARG2.PNG.ANIM human ].

harry-a := adj-lxm &
  [ INFLECTION a3a,
    STEM < "harry" >,
    SYNSEM.LKEYS.KEYREL.PRED "_harry_a_rel" ].

harveys-pn := sg-comm-pn &
  [ STEM < "harveys" >,
    SYNSEM.LKEYS.KEYREL.CARG "HARVEYS" ].

hate_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "hate" >,
    SYNSEM.LKEYS.KEYREL.PRED hate_v ].

have-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "have" >,
    SYNSEM.LKEYS.KEYREL.PRED "_have_n_rel",
    INFLECTION m1 ].

hei-cont := continuative-word &
  [ STEM < "hei" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hei-rel" ].

heldigvis_func := func-word &
  [ STEM < "heldigvis" >,
    SYNSEM.LKEYS.KEYREL.PRED heldigvis_prd ].

hele := sg-quant-word &
  [ STEM < "hele" >,
    SYNSEM.LKEYS.Q.QREL.PRED _hele_q_rel ].

hele_v := main-verb-lxm &
  [ STEM < "hele" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED hele_v ].

heller_func := func-word &
  [ STEM < "heller" >,
    SYNSEM.LKEYS.KEYREL.PRED heller_prd ].

helt_func := func-word &
  [ STEM < "helt" >,
    SYNSEM.LKEYS.KEYREL.PRED helt_prd ].

henge_v := main-verb-lxm &
  [ STEM < "henge" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED henge_v ].

henne-np := fem-pron &
  [ STEM < "henne" >,
    SYNSEM.LOCAL [ CAT.CASE non-subj-case ] ].

hennes := 3fem-poss &
  [ STEM < "hennes" > ].
;    SYNSEM.LKEYS.KEYREL.ARG2.PNG.ANIM human ].

hente_v := main-verb-lxm &
  [ STEM < "hente" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED hente_v ].

henvendelse-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "henvendelse" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_henvendelse_n_rel" ].

her_func := func-word &
  [ STEM < "her" >,
    SYNSEM.LKEYS.KEYREL.PRED her_prd ].

hest-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "hest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hest_n_rel" ].

hete-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "hete" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_hete_n_rel" ].

hete_v := main-verb-lxm &
  [ STEM < "hete" >,
    INFLECTION v1, 
    SYNSEM.LKEYS.KEYREL.PRED hete_v ].

hevde_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "hevde" >,
    SYNSEM.LKEYS.KEYREL.PRED hevde_v ].

hg-noun-word := mod-noun-word &
  [ STEM < "hg" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hekto-abbriv_rel" ].

hit_func := func-word &
  [ STEM < "hit" >,
    SYNSEM.LKEYS.KEYREL.PRED hit_prd ].

hit-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "hit" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_hit_n_rel" ].

hjelm-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "hjelm" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hjelm_n_rel" ].

hjemmeside-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "hjemmeside" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_hjemmeside_n_rel" ].

hogge_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "hogge" >,
    SYNSEM.LKEYS.KEYREL.PRED hogge_v ].

holde_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "holde" >,
    SYNSEM.LKEYS.KEYREL.PRED holde_v ].

hoppe-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "hoppe" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_hoppe_n_rel" ].

hoppe_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "hoppe" >,
    SYNSEM.LKEYS.KEYREL.PRED hoppe_v ].

hos_func := func-word &
  [ STEM < "hos" >,
    SYNSEM.LKEYS.KEYREL.PRED hos_prd ].

hun-np := fem-pron &
  [ STEM < "hun" >,
    SYNSEM.LOCAL [ CAT.CASE subj-case ] ].

hund-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "hund" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_hund_n_rel" ].

hus-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "hus" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_hus_n_rel" ].

hva-word := wh-thing-or-pers-word &
  [ STEM < "hva" >,
    SYNSEM.LKEYS [ KEYREL.PRED "thing_rel",
		   Q.QREL.PRED _hvilken_q_rel ] ].

; hvem-si := wh-fem-poss-word &
;   [ STEM < "hvem","si" > ].

; hvem-sin := wh-masc-poss-word &
;   [ STEM < "hvem","sin" > ].

; hvem-sine := wh-pl-poss-word &
;   [ STEM < "hvem","sine" > ].

; hvem-sitt := wh-neut-poss-word &
;   [ STEM < "hvem","sitt" > ].

hvem-word := wh-thing-or-pers-word &
  [ STEM < "hvem" >,
    SYNSEM.LKEYS [ KEYREL.PRED "person_rel",
		   Q.QREL.PRED _hvilken_q_rel ] ].

hver := comm-hver-quant-word &
  [ STEM < "hver" >,
    SYNSEM.LKEYS.Q.QREL.PRED _hver_q_rel ]. 

hverandre-refl-light := empty-noun-word &
  [ STEM < "hverandre" >,
    SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PN pl,
             LKEYS.KEYREL.PRED refl ] ].

hvert := neut-hver-quant-word &
  [ STEM < "hvert" >,
    SYNSEM.LKEYS.Q.QREL.PRED _hver_q_rel ].

hvile-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "hvile" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_hvile_n_rel" ].

hvile_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "hvile" >,
    SYNSEM.LKEYS.KEYREL.PRED hvile_v ].

hvilke_q := pl-wh-det-word &
  [ STEM < "hvilke" >,
    SYNSEM.LOCAL.CAT.HEAD.MESS wh-question_m_rel ].

hvilken_q := comm-wh-det-word &
  [ STEM < "hvilken" >,
    SYNSEM.LOCAL.CAT.HEAD.MESS wh-question_m_rel ].

hvilket_q := neut-wh-det-word &
  [ STEM < "hvilket" >,
    SYNSEM.LOCAL.CAT.HEAD.MESS wh-question_m_rel ].

hvis_func := func-word &
  [ STEM < "hvis" >,
    SYNSEM.LKEYS.KEYREL.PRED hvis_prd ].

hvitt-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "hvitt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvitt_n_rel",
    INFLECTION no-infl ].

hva_func := func-wh-word &
  [ STEM < "hva" >,
    SYNSEM.LOCAL.CAT.CASE non-subj-case,
    SYNSEM.LKEYS.KEYREL.PRED hva_prd ].

hva*som_func := func-wh-word &
  [ STEM < "hva", "som" >,
    SYNSEM.LKEYS.KEYREL.PRED hva_prd ].

hvem_func := func-wh-word &
  [ STEM < "hvem" >,
    SYNSEM.LOCAL.CAT.CASE non-subj-case,
    SYNSEM.LKEYS.KEYREL.PRED hvem_prd ].

hvem*som_func := func-wh-word &
  [ STEM < "hvem", "som" >,
    SYNSEM.LKEYS.KEYREL.PRED hvem_prd ].

hvor_func := func-wh-word &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED hvor_prd ].

hvorfor_func := func-wh-word &
  [ STEM < "hvorfor" >,
    SYNSEM.LKEYS.KEYREL.PRED hvorfor_prd ].

; hvor-adv := where-word &
;   [ STEM < "hvor" >,
;     SYNSEM.LKEYS.KEYREL.PRED "_hvor_wh_rel" ].

hvor-adv-mod := wh-mod-adj-adv-prep-word &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED _hvor_deg_rel ].

; hvor-compl := wh-complementizer-word &
;   [ STEM < "hvor" >,
;     SYNSEM.LKEYS.KEYREL.PRED "_hvor_wh_rel" ].

hvor-mange_q := pl-indef-art-det-word &
  [ STEM < "hvor","mange" >,
    SYNSEM.LKEYS.Q.QREL.PRED _hvor-mange_q_rel ].

hvor-mye-a := mod-adj-adv-nominal-prep-word &
  [ STEM < "hvor","mye" >,
    SYNSEM.LKEYS.Q.QREL.PRED _hvor-mye_q_rel ].

åssen_func := adv-wh-word &
  [ STEM < "åssen" >,
    SYNSEM.LKEYS.KEYREL.PRED åssen_prd ].

hvordan_func := func-word &
  [ STEM < "hvordan" >,
    SYNSEM.LKEYS.KEYREL.PRED hvordan_prd ].

hvorledes_func := func-word &
  [ STEM < "hvorledes" >,
    SYNSEM.LKEYS.KEYREL.PRED hvorledes_prd ].

hvorvidt_func := func-word &
  [ STEM < "hvorvidt" >,
    SYNSEM.LKEYS.KEYREL.PRED hvorvidt_prd ].

hygge-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "hygge" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_hygge_n_rel" ].

hygge_v := main-verb-lxm &
  [ STEM < "hygge" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED hygge_v ].

hyphen := comma-word &
  [ STEM < "-" >,
    SYNSEM.LKEYS.KEYREL.PRED "hyphen_rel" ].

håpe_v := main-verb-lxm &
  [ STEM < "håpe" >,
    INFLECTION v1, 
    SYNSEM.LKEYS.KEYREL.PRED håpe_v ].

høre_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "høre" >,
    SYNSEM.LKEYS.KEYREL.PRED høre_v ].

høst-n-masc := masc-mod-noun-lxm &
  [ STEM < "høst" >,
    SYNSEM.LKEYS.KEYREL.PRED _høst_n_rel,
    INFLECTION m1 ].

høy-a := adj-lxm &
  [ INFLECTION a1,
    STEM < "høy" >,
    SYNSEM.LKEYS.KEYREL.PRED "_høy_a_rel" ].

høy-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "høy" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_høy_n_rel" ].

i-alle-fall_func := func-word &
  [ STEM < "i","alle","fall" >,
    SYNSEM.LKEYS.KEYREL.PRED i*alle*fall_prd ].

i-det-hele-tatt_func := func-word &
  [ STEM < "i","det","hele","tatt" >,
    SYNSEM.LKEYS.KEYREL.PRED i*det*hele*tatt_prd ].

i*egenskap*av_func := func-word &
  [ STEM < "i", "egenskap", "av" >,
    SYNSEM.LKEYS.KEYREL.PRED i*egenskap*av_prd ].

i*ferd*med_func := func-word &
  [ STEM < "i", "ferd", "med" >,
    SYNSEM.LKEYS.KEYREL.PRED i*ferd*med_prd ].

i-fjor_func := func-word &
  [ STEM < "i","fjor" >,
    SYNSEM.LKEYS.KEYREL.PRED i*fjor_prd ].

i-går_func := func-word &
  [ STEM < "i","går" >,
    SYNSEM.LKEYS.KEYREL.PRED i*går_prd ].

i-hvert-fall_func := func-word &
  [ STEM < "i","hvert","fall" >,
    SYNSEM.LKEYS.KEYREL.PRED i*hvert*fall_prd ].

i-løpet-av_func := func-word &
  [ STEM < "i","løpet","av" >,
    SYNSEM.LKEYS.KEYREL.PRED i*løpet*av_prd ].

; i_func := func-word &
;   [ STEM < "i" >,
;     SYNSEM.LKEYS.KEYREL.PRED i_prd ].

i-så-måte_func := func-word &
  [ STEM < "i","så","måte" >,
    SYNSEM.LKEYS.KEYREL.PRED i*så*måte_prd ].

i-tide_func := func-word &
  [ STEM < "i","tide" >,
    SYNSEM.LKEYS.KEYREL.PRED i*tide_prd ].

i-tide-og-utide_func := func-word &
  [ STEM < "i","tide","og","utide" >,
    SYNSEM.LKEYS.KEYREL.PRED i*tide*og*utide_prd ].

iallfall_func := func-word &
  [ STEM < "iallfall" >,
    SYNSEM.LKEYS.KEYREL.PRED iallfall_prd ].

iberegne_v := main-verb-lxm &
  [ STEM < "iberegne" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED iberegne_v ].

ibm-pn := sg-comm-pn &
  [ STEM < "ibm" >,
    SYNSEM.LKEYS.KEYREL.CARG "IBM" ].

idag_func := func-word &
  [ STEM < "idag" >,
    SYNSEM.LKEYS.KEYREL.PRED idag_prd ].

idiot-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "idiot" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_idiot_n_rel" ].

ifølge-adv := adv-comp-word &
  [ STEM < "ifølge" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ifølge_a_rel" ].

igjen_func := func-word &
  [ STEM < "igjen" >,
    SYNSEM.LKEYS.KEYREL.PRED igjen_prd ].

ikke_func := down-func-word &
  [ STEM < "ikke" >,
    SYNSEM.LKEYS.KEYREL.PRED ikke_prd ].

ikt-noun-word := mod-noun-word &
  [ STEM < "ikt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ikt_rel" ].

imidlertid_func := func-word &
  [ STEM < "imidlertid" >,
    SYNSEM.LKEYS.KEYREL.PRED imidlertid_prd ].

imot_func := func-word &
  [ STEM < "imot" >,
    SYNSEM.LKEYS.KEYREL.PRED imot_prd ].

indef-pl-annen := indef-pl-da-word &
  [ STEM < "andre" >,
    LEXREL.LIST.FIRST.PRED "_annen_da_rel" ].

indef-sg-fem-annen := indef-sg-fem-da-word &
  [ STEM < "anna" >,
    LEXREL.LIST.FIRST.PRED "_annen_da_rel" ].

indef-sg-masc-annen := indef-sg-masc-da-word &
  [ STEM < "annen" >,
    LEXREL.LIST.FIRST.PRED "_annen_da_rel" ].

indef-sg-neut-annen := indef-sg-neut-da-word &
  [ STEM < "annet" >,
    LEXREL.LIST.FIRST.PRED "_annen_da_rel" ].

indef-pl-egen := indef-pl-da-word &
  [ STEM < "egne" >,
    LEXREL.LIST.FIRST.PRED "_egen_da_rel" ].

def-egen-da := def-da-word &
  [ STEM < "egne" >,
    LEXREL.LIST.FIRST.PRED "_egen_da_rel" ].

indef-sg-fem-egen := indef-sg-fem-da-word &
  [ STEM < "ega" >,
    LEXREL.LIST.FIRST.PRED "_egen_da_rel" ].

indef-sg-masc-egen := indef-sg-masc-da-word &
  [ STEM < "egen" >,
    LEXREL.LIST.FIRST.PRED "_egen_da_rel" ].

indef-sg-neut-egen := indef-sg-neut-da-word &
  [ STEM < "eget" >,
    LEXREL.LIST.FIRST.PRED "_egen_da_rel" ].

indef-sg-enkelt := indef-sg-da-word &
  [ STEM < "enkelt" >,
    LEXREL.LIST.FIRST.PRED "_enkelt_da_rel" ].

indef-pl-enkelt := indef-pl-da-word &
  [ STEM < "enkelte" >,
    LEXREL.LIST.FIRST.PRED "_enkelt_da_rel" ].

def-enkelt-da := def-da-word &
  [ STEM < "enkelte" >,
    LEXREL.LIST.FIRST.PRED "_enkelt_da_rel" ].

indef-pl-neste := indef-pl-da-word &
  [ STEM < "neste" >,
    LEXREL.LIST.FIRST.PRED "_neste_da_rel" ].

def-neste-da := def-da-word &
  [ STEM < "neste" >,
    LEXREL.LIST.FIRST.PRED "_neste_da_rel" ].

indef-sg-neste := indef-sg-da-word &
  [ STEM < "neste" >,
    LEXREL.LIST.FIRST.PRED "_neste_da_rel" ].

indef-pl-samme := indef-pl-da-word &
  [ STEM < "samme" >,
    LEXREL.LIST.FIRST.PRED "_samme_da_rel" ].

def-samme-da := def-da-word &
  [ STEM < "samme" >,
    LEXREL.LIST.FIRST.PRED "_samme_da_rel" ].

indef-sg-samme := indef-sg-da-word &
  [ STEM < "samme" >,
    LEXREL.LIST.FIRST.PRED "_samme_da_rel" ].

def-selve-da := def-da-word &
  [ STEM < "selve" >,
    LEXREL.LIST.FIRST.PRED "_selve_da_rel" ].

indef-pl-hvilken-som-helst := indef-pl-da-word &
  [ STEM < "hvilke","som","helst" >,
    LEXREL.LIST.FIRST.PRED "_hvilken-som-helst_da_rel" ].

indef-sg-comm-hvilken-som-helst :=indef-sg-comm-da-word &
  [ STEM < "hvilken","som","helst" >,
    LEXREL.LIST.FIRST.PRED "_hvilken-som-helst_da_rel" ].

indef-sg-neut-hvilken-som-helst :=indef-sg-neut-da-word &
  [ STEM < "hvilket","som","helst" >,
    LEXREL.LIST.FIRST.PRED "_hvilken-som-helst_da_rel" ].


individ-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1-n2,
    STEM < "individ" >,
    SYNSEM.LKEYS.KEYREL.PRED "_individ_n_rel" ].

individuell-a := adj-lxm &
  [ STEM < "individuell" >,
    SYNSEM.LKEYS.KEYREL.PRED "_individuell_a_rel" ].

indre-a := adj-lxm &
  [ INFLECTION a2,
    STEM < "indre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_indre_a_rel" ].

indre-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "indre" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_indre_n_rel" ].

inf-comp := inf-word &
  [ STEM < "å" > ].

;inf-comp2 := inf-word2 &
;  [ STEM < "det","å" > ].

; inf-pres := pres-inf &
;   [ STEM < "å" > ].

informasjon-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "informasjon" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_informasjon_n_rel" ].

ingen := down-entailing-quant &
  [ STEM < "ingen" >,
    SYNSEM.LKEYS.Q.QREL.PRED _ingen_q_rel ].

ingjerdbu-pn := sg-comm-pn &
  [ STEM < "ingjerdbu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Ingjerdbu" ].

inkl-p := prep-nounmod-word &
  [ STEM < "inkl" >,
    SYNSEM.LKEYS.KEYREL.PRED inkludert_prd ].

inkludert-p := prep-nounmod-word &
  [ STEM < "inkludert" >,
    SYNSEM.LKEYS.KEYREL.PRED inkludert_prd ].

inn_func := func-word &
  [ STEM < "inn" >,
    SYNSEM.LKEYS.KEYREL.PRED inn_prd ].

inne_func := func-word &
  [ STEM < "inne" >,
    SYNSEM.LKEYS.KEYREL.PRED inne_prd ].

innenfor_func := func-word &
  [ STEM < "innenfor" >,
    SYNSEM.LKEYS.KEYREL.PRED innenfor_prd ].

innenlands_func := func-word &
  [ STEM < "innenlands" >,
    SYNSEM.LKEYS.KEYREL.PRED innenlands_prd ].

innom_func := func-word &
  [ STEM < "innom" >,
    SYNSEM.LKEYS.KEYREL.PRED innom_prd ].

innover_func := func-word &
  [ STEM < "innover" >,
    SYNSEM.LKEYS.KEYREL.PRED innover_prd ].

inntil_func := func-word &
  [ STEM < "inntil" >,
    SYNSEM.LKEYS.KEYREL.PRED inntil_prd ].

internett-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "internett" >,
    SYNSEM.LKEYS.KEYREL.PRED "_internett_n_rel" ].

irritere_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "irritere" >,
    SYNSEM.LKEYS.KEYREL.PRED irritere_v ].

is-n-masc := masc-cmp-noun-lxm &
  [ STEM < "is" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_is_n_rel" ].

iskaffe-n-masc := masc-cmp-noun-lxm &
  [ STEM < "iskaffe" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_iskaffe_n_rel" ].

iste-n-masc := masc-cmp-noun-lxm &
  [ STEM < "iste" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_iste_n_rel" ].

ja-cont := interj-word &
  [ STEM < "ja" >,
    SYNSEM.LKEYS.KEYREL.PRED ja_prd ].

januar-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "januar" >,
    SYNSEM.LOCAL.CAT.HEAD.AGREE.DEFINITENESS def,
    SYNSEM.LKEYS.KEYREL.PRED "_januar_n_rel",
    INFLECTION m1 ].

jeg-np := 1sg-pron &
  [ STEM < "jeg" >,
    SYNSEM.LOCAL.CAT.CASE subj-case ].

jente-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "jente" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_jente_n_rel" ].

jesper-nattmann-pn := sg-comm-pn &
  [ STEM < "jesper", "nattmann" >,
    SYNSEM.LKEYS.KEYREL.CARG "JESPER NATTMANN" ]. ;

jf-word := verb_imp_word &
  [ STEM < "jf" >,
    CMP2.LOCAL [ CAT.HEAD subcompl-noun,
		 CONT.RELS.LIST.FIRST.PRED "_jamfør-abbr_v_rel" ] ].

jo_func := func-word &
  [ STEM < "jo" >,
    SYNSEM.LKEYS.KEYREL.PRED jo_prd ].

jo-cont := continuative-word &
  [ STEM < "jo" >,
    SYNSEM.LKEYS.KEYREL.PRED "_jo-rel" ].

jobb-n-masc := masc-mwe-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "jobb" >,
    SYNSEM.LKEYS.KEYREL.PRED jobb_prd ].

jobbe_v := main-verb-lxm &
  [ STEM < "jobbe" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED jobbe_v ].

jordbærpikene-pn := sg-comm-pn &
  [ STEM < "jordbærpikene" >,
    SYNSEM.LKEYS.KEYREL.CARG "Jordbærpikene" ].

jotunheimen-pn := sg-comm-pn &
  [ STEM < "jotunheimen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Jotunheimen" ].

juli-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "juli" >,
    SYNSEM.LOCAL.CAT.HEAD.AGREE.DEFINITENESS def,
    SYNSEM.LKEYS.KEYREL.PRED "_juli_n_rel",
    INFLECTION m1 ].

juni-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "juni" >,
    SYNSEM.LOCAL.CAT.HEAD.AGREE.DEFINITENESS def,
    SYNSEM.LKEYS.KEYREL.PRED "_juni_n_rel",
    INFLECTION m1 ].

juvasshytta-pn := sg-comm-pn &
  [ STEM < "juvasshytta" >,
    SYNSEM.LKEYS.KEYREL.CARG "Juvasshytta" ].

kaffe-latte-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "kaffe", "latte" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_kaffe-latte_n_rel" ].

kaffe-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "kaffe" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_kaffe_n_rel" ].

kakao-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "kakao" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_kakao_n_rel" ].

kake-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "kake" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_kake_n_rel" ].

kake_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "kake" >,
    SYNSEM.LKEYS.KEYREL.PRED kake_v ].

kakke_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "kakke" >,
    SYNSEM.LKEYS.KEYREL.PRED kakke_v ].

kalle_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "kalle" >,
    SYNSEM.LKEYS.KEYREL.PRED kalle_v ].

kanalisere_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "kanalisere" >,
    SYNSEM.LKEYS.KEYREL.PRED kanalisere_v ].

kanskje_func := func-word &
  [ STEM < "kanskje" >,
    SYNSEM.LKEYS.KEYREL.PRED kanskje_prd ].

kassere_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "kassere" >,
    SYNSEM.LKEYS.KEYREL.PRED kassere_v ].

kaste-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "kaste" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_kaste_n_rel" ].

kaste_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "kaste" >,
    SYNSEM.LKEYS.KEYREL.PRED kaste_v ].

kg-noun-word := mod-noun-word &
  [ STEM < "kg" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kilo-abbriv_rel" ].

kilo-n-masc := mascorneut-mwe-noun-lxm &
  [ STEM < "kilo" >,
    SYNSEM.LKEYS.KEYREL.PRED kilo_prd,
    INFLECTION n1-n2 ].

kim-pn := sg-comm-pn &
  [ STEM < "Kim" >,
    SYNSEM.LKEYS.KEYREL.CARG "Kim" ].

kings-cross-pn := sg-comm-pn &
  [ STEM < "kings", "cross" >,
    SYNSEM.LKEYS.KEYREL.CARG "KINGS CROSS" ].

kino-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "kino" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_kino_n_rel" ].

kirke-n-comm := comm-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "kirke" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kirke_n_rel" ].

kjedelig-a := adj-lxm &
  [ INFLECTION a2,
    STEM < "kjedelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kjedelig_a_rel" ].

kjenne_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "kjenne" >,
    SYNSEM.LKEYS.KEYREL.PRED kjenne_v ].

kjent-a := mwe-adj-lxm &
  [ STEM < "kjent" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED kjent_prd ].

kjip-a := adj-lxm &
  [ INFLECTION a1,
    STEM < "kjip" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kjip_a_rel" ].

kjøpe_v := main-verb-lxm &
 [ INFLECTION v2,
    STEM < "kjøpe" >,
    SYNSEM.LKEYS.KEYREL.PRED kjøpe_v ].

kjøpmannsgata-pn := sg-comm-pn &
  [ STEM < "kjøpmannsgata" >,
    SYNSEM.LKEYS.KEYREL.CARG "KJøPMANNSGATA" ].

kjøre_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "kjøre" >,
    SYNSEM.LKEYS.KEYREL.PRED kjøre_v ].

klamre_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "klamre" >,
    SYNSEM.LKEYS.KEYREL.PRED klamre_v ].

klar-a := mwe-adj-lxm &
  [  INFLECTION a1,
    STEM < "klar" >,
    SYNSEM.LKEYS.KEYREL.PRED klar_prd ].

klar_func := func-word &
  [ STEM < "klar" >,
    SYNSEM.LKEYS.KEYREL.PRED klar_prt ].

klare_v := main-verb-lxm &
  [ STEM < "klare" >,
    INFLECTION v2,
    SYNSEM.LKEYS.KEYREL.PRED klare_v ].

kle_v := main-verb-lxm &
  [ INFLECTION v4,
    STEM < "kle" >,
    SYNSEM.LKEYS.KEYREL.PRED kle_v ].

klient-tjener-modell-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "klient-tjener-modell" >,
    SYNSEM.LKEYS.KEYREL.PRED "_klient-tjener-modell_n_rel",
    INFLECTION m1 ].

klippe-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "klippe" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_klippe_n_rel" ].

klippe_v := main-verb-lxm &
  [ INFLECTION v1-v2,
    STEM < "klippe" >,
    SYNSEM.LKEYS.KEYREL.PRED klippe_v ].

klokka-abbr_func := func-word &
  [ STEM < "kl" >,
    SYNSEM [ LOCAL.CAT.VAL.CMP2.LOCAL.CAT.HEAD card,
	     LKEYS.KEYREL.PRED _klokka_p_rel ] ].

klokka_func := func-word &
  [ STEM < "klokka" >,
    SYNSEM [ LOCAL.CAT.VAL.CMP2.LOCAL.CAT.HEAD card,
	     LKEYS.KEYREL.PRED _klokka_p_rel ] ].

klokken_func := func-word &
  [ STEM < "klokken" >,
    SYNSEM [ LOCAL.CAT.VAL.CMP2.LOCAL.CAT.HEAD card,
	     LKEYS.KEYREL.PRED _klokka_p_rel ] ].

klær-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "klær" >,
    SYNSEM.LKEYS.KEYREL.PRED "_klær_n_rel" ].

km-noun-word := mod-noun-word &
  [ STEM < "km" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kilometer-abbriv_rel" ].

kneppe_v := main-verb-lxm &
  [ STEM < "kneppe" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED kneppe_v ].

kombinere_v := trans-verb-lxm &
  [ INFLECTION v2,
    STEM < "kombinere" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kombinere_12_rel" ].

komme_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "komme" >,
    SYNSEM.LKEYS.KEYREL.PRED komme_v ].

komplisert-a := adj-lxm &
  [ STEM < "komplisert" >,
    SYNSEM.LKEYS.KEYREL.PRED "_komplisert_a_rel", 
    INFLECTION a2 ].

konge-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "konge" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_konge_n_rel" ].

kongens-gate-pn := sg-comm-pn &
  [ STEM < "kongens", "gate" >,
    SYNSEM.LKEYS.KEYREL.CARG "KONGENS GATE" ].

konsert-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "konsert" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_konsert_n_rel" ].

konstruere_v := trans-verb-lxm &
  [ INFLECTION v2,
    STEM < "konstruere" >,
    SYNSEM.LKEYS.KEYREL.PRED "_konstruere_12_rel" ].

kontoret-pn := sg-neut-pn &
  [ STEM < "kontoret" >,
    SYNSEM.LKEYS.KEYREL.CARG "KONTORET" ].

kopp-n-masc := masc-mwe-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "kopp" >,
    SYNSEM.LKEYS.KEYREL.PRED kopp_prd ].

koselig-a := adj-lxm &
  [ INFLECTION a2,
    STEM < "koselig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_koselig_a_rel" ].

kr-noun-word := non-infl-noun-word &
  [ STEM < "kr" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kroner-abbriv_rel" ].

krangle_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "krangle" >,
    SYNSEM.LKEYS.KEYREL.PRED krangle_v ].

kreke_v := main-verb-lxm &
  [ INFLECTION v1-v2,
    STEM < "kreke" >,
    SYNSEM.LKEYS.KEYREL.PRED kreke_v ].

krone-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "krone" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_krone_n_rel" ].

krone_v := main-verb-lxm &
  [ STEM < "krone" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED krone_v ].

krossbu-pn := sg-comm-pn &
  [ STEM < "krossbu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Krossbu" ].

ku-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "ku" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_ku_n_rel" ].

kul-a := adj-lxm &
  [ INFLECTION a1,
    STEM < "kul" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kul_a_rel" ].

kul-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "kul" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_kul_n_rel" ].

kun-adv := mod-adj-adv-nominal-prep-word &
  [ STEM < "kun" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kun_mod_rel" ].

kunne-aux1 := inf-pres-modal-aux-lxm &
  [ STEM < "kunne" >,
    INFLECTION v1,
    SYNSEM [ LOCAL [ MODAL [ BURDE #burde,
			     KUNNE -,
			     MATTE #matte,
			     SKULLE #skulle,
			     VILLE #ville ],
		     CAT.VBL.LOCAL.MODAL [ BURDE #burde,
					   KUNNE +,
					   MATTE #matte,
					   SKULLE #skulle,
					   VILLE #ville ] ],
	     LKEYS.KEYREL.PRED "_kunne_aux_rel" ] ].

kunne-aux2 := pret-perf-modal-aux-lxm &
  [ STEM < "kunne" >,
    INFLECTION v1,
    SYNSEM [ LOCAL [ MODAL [ BURDE #burde,
			     KUNNE -,
			     MATTE #matte,
			     SKULLE #skulle,
			     VILLE #ville ],
		     CAT.VBL.LOCAL.MODAL [ BURDE #burde,
					   KUNNE +,
					   MATTE #matte,
					   SKULLE #skulle,
					   VILLE #ville ] ],
	     LKEYS.KEYREL.PRED "_kunne_aux_rel" ] ].

kunne_v := main-verb-lxm &
  [ STEM < "kunne" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED kunne_v ].

kvekke_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "kvekke" >,
    SYNSEM.LKEYS.KEYREL.PRED kvekke_v ].

kveld-n-masc := masc-mod-noun-lxm &
  [ STEM < "kveld" >,
    SYNSEM.LKEYS.KEYREL.PRED _kveld_n_rel,
    INFLECTION m1 ].

kyle_v := trans-verb-lxm &
  [ INFLECTION v2,
    STEM < "kyle" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kyle_12_rel" ].

la_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "la" >,
    SYNSEM.LKEYS.KEYREL.PRED la_v ].

; := main-verb-lxm &
;   [ INFLECTION v1,
;     STEM < "la" >,
;     SYNSEM.LKEYS.KEYREL.PRED la_v ].

labbe_v := main-verb-lxm &
  [ STEM < "labbe" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED labbe_v ].

lage_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "lage" >,
    SYNSEM.LKEYS.KEYREL.PRED lage_v ].

land-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "land" >,
    SYNSEM.LKEYS.KEYREL.PRED "_land_n_rel" ].

landås-pn := sg-comm-pn &
  [ STEM < "landås" >,
    SYNSEM.LKEYS.KEYREL.CARG "Landås" ].

langt-func := func-word &
  [ STEM < "langt" >,
    SYNSEM.LKEYS.KEYREL.PRED langt_prd ].

; langt-mellom_func := func-word &
;   [ STEM < "langt","mellom" >,
;     SYNSEM.LKEYS.KEYREL.PRED "_langt-mellom_prd" ].

late_v := main-verb-lxm &
  [ INFLECTION v1-v2,
    STEM < "late" >,
    SYNSEM.LKEYS.KEYREL.PRED late_v ].

lauritz-pn := sg-comm-pn &
  [ STEM < "lauritz" >,
    SYNSEM.LKEYS.KEYREL.CARG "LAURITZ" ].

le_v := main-verb-lxm &
  [ INFLECTION v4,
    STEM < "le" >,
    SYNSEM.LKEYS.KEYREL.PRED le_v ].

legge_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "legge" >,
    SYNSEM.LKEYS.KEYREL.PRED legge_v ].

lei_a := adj-lxm &
  [ STEM <"lei">,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED lei_prd ].

lei-n-masc := masc-cmp-count-noun-lxm &
  [ STEM <"lei">,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_lei_n_rel" ].

lei-n-fem := comm-cmp-count-noun-lxm &
  [ STEM <"lei">,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_lei_n_rel" ].

lei_func := func-word &
  [ STEM < "lei" >,
    SYNSEM.LKEYS.KEYREL.PRED lei_prt ].

leirvassbu-pn := sg-comm-pn &
  [ STEM < "leirvassbu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Leirvassbu" ].

leke-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "leke" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_leke_n_rel" ].

leke_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "leke" >,
    SYNSEM.LKEYS.KEYREL.PRED leke_v ].

lem-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "lem" >,
    INFLECTION m3,
    SYNSEM.LKEYS.KEYREL.PRED "_lem_n_rel" ].

lem-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "lem" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_lem_n_rel" ].

lengte_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "lengte" >,
    SYNSEM.LKEYS.KEYREL.PRED lengte_v ].

lese_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "lese" >,
    SYNSEM.LKEYS.KEYREL.PRED lese_v ].

lesehode-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "lesehode" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lesehode_n_rel",
    INFLECTION n2 ].

lett-a := adj-lxm &
  [ INFLECTION a2,
    STEM < "lett" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lett_a_rel" ].

ligge_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "ligge" >,
    SYNSEM.LKEYS.KEYREL.PRED ligge_v ].

like-func := func-word &
  [ STEM < "like" >,
    SYNSEM.LKEYS.KEYREL.PRED like_prd ].

like_v := main-verb-lxm &
  [ STEM < "like" >,
    INFLECTION v2,
    SYNSEM.LKEYS.KEYREL.PRED like_v ].

lilla-a := adj-lxm &
  [ STEM < "lilla" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_lilla_a_rel" ].

lilla-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "lilla" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lilla_n_rel",
    INFLECTION no-infl ].

linux-pn := sg-comm-pn &
  [ STEM < "linux" >,
    SYNSEM.LKEYS.KEYREL.CARG "LINUX" ].

lite_q := indef-mass-det &
  [ STEM < "lite" >,
    SYNSEM.LKEYS.Q.QREL.PRED _lite_q_rel ].

liten-a := adj-lxm &
  [ STEM < "liten" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_liten_a_rel" ].

litt_func := func-word &
  [ STEM < "litt" >,
    SYNSEM.LKEYS.KEYREL.PRED litt_prd ].

liter-n-masc := masc-mwe-count-noun-lxm &
  [ STEM < "liter" >,
    SYNSEM.LKEYS.KEYREL.PRED liter_prd,
    INFLECTION m1 ].

litt-a := mod-adj-adv-nominal-prep-word &
  [ STEM < "litt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_litt_a_rel" ].

livingstone-pn := sg-comm-pn &
  [ STEM < "livingstone" >,
    SYNSEM.LKEYS.KEYREL.CARG "LIVINGSTONE" ].

livne_v := main-verb-lxm &
  [ STEM < "livne" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED livne_v ].

love_v := main-verb-lxm &
  [ INFLECTION v1-v2,
    STEM < "love" >,
    SYNSEM.LKEYS.KEYREL.PRED love_v ].

lucas-pn := sg-comm-pn &
  [ STEM < "lucas" >,
    SYNSEM.LKEYS.KEYREL.CARG "LUCAS" ].

lukte_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "lukte" >,
    SYNSEM.LKEYS.KEYREL.PRED lukte_v ].

lun-a := adj-lxm &
  [ INFLECTION a1,
    STEM < "lun" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lun_a_rel" ].

luna-lounge-pn := sg-comm-pn &
  [ STEM < "luna", "lounge" >,
    SYNSEM.LKEYS.KEYREL.CARG "LUNA LOUNGE" ].

lure_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "lure" >,
    SYNSEM.LKEYS.KEYREL.PRED lure_v ].

lyd-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "lyd" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lyd_n_rel" ].

lykkes_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "lykkes" >,
    SYNSEM.LKEYS.KEYREL.PRED lykkes_v ].

låte_v := main-verb-lxm &
  [ STEM < "låte" >,
    INFLECTION v1, 
    SYNSEM.LKEYS.KEYREL.PRED låte_v ].

lærer-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "lærer" >,
    INFLECTION m2,
    SYNSEM.LKEYS.KEYREL.PRED "_lærer_n_rel" ].

løp-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "løp" >,
    SYNSEM.LKEYS.KEYREL.PRED "_løp_n_rel",
    INFLECTION n1 ].

løpe_v := main-verb-lxm &
  [ STEM < "løpe" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED løpe_v ].

lørdag_func := func-word &
  [ STEM < "lørdag" >,
    SYNSEM.LKEYS.KEYREL.PRED lørdag_prd ].

lørdag-n-masc := masc-mod-noun-lxm &
  [ STEM < "lørdag" >,
    SYNSEM.LKEYS.KEYREL.PRED _lørdag_n_rel,
    INFLECTION m1 ].

løse_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "løse" >,
    SYNSEM.LKEYS.KEYREL.PRED løse_v ].

m-noun-word := mod-noun-word &
  [ STEM < "m" >,
    SYNSEM.LKEYS.KEYREL.PRED "_meter-abbriv_rel" ].

m-over-havet-adv := mod-noun-word &
  [ STEM < "m", "o.h." >,
    SYNSEM.LKEYS.KEYREL.PRED "_over-havet_pp_rel" ].

mac-pn := sg-comm-pn &
  [ STEM < "mac" >,
    SYNSEM.LKEYS.KEYREL.CARG "Mac" ].

macchiato-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "macchiato" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_macchiato_n_rel" ].

mach-n-word := non-infl-noun-word &
  [ STEM < "mach" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mach_n_rel" ].

mach-pn := sg-comm-pn &
  [ STEM < "mach" >,
    SYNSEM.LKEYS.KEYREL.CARG "Mach" ].

macintosh-pn := sg-comm-pn &
  [ STEM < "macintosh" >,
    SYNSEM.LKEYS.KEYREL.CARG "Macintosh" ].

mage-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "mage" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_mage_n_rel" ].

mai-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "mai" >,
    SYNSEM.LOCAL.CAT.HEAD.AGREE.DEFINITENESS def,
    SYNSEM.LKEYS.KEYREL.PRED "_mai_n_rel",
    INFLECTION m1 ].

mail-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "mail" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_mail_n_rel" ].

maksimum-mod := mod-card-word &
  [ STEM < "maksimum" >,
    SYNSEM.LKEYS.KEYREL.PRED "_maksimum_mod_rel" ].

maksimum-func := func-word &
  [ STEM < "maksimum" >,
    SYNSEM.LKEYS.KEYREL.PRED maksimum_prd ].

maksimum-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "maksimum" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_maksimum_n_rel" ].

male_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "male" >,
    SYNSEM.LKEYS.KEYREL.PRED male_v ].

man-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "man" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_man_n_rel" ].

man-pn := general-pron &
  [ STEM < "man" >,
    SYNSEM.LKEYS.KEYREL.PRED  _man_pron_rel ].

mandag_func := func-word &
  [ STEM < "mandag" >,
    SYNSEM.LKEYS.KEYREL.PRED mandag_prd ].

mandag-n-masc := masc-mod-noun-lxm &
  [ STEM < "mandag" >,
    SYNSEM.LKEYS.KEYREL.PRED _mandag_n_rel,
    INFLECTION m1 ].

mange-a := lex-adj-word &
  [ INFLECTION a2,
    STEM < "mange" >,
    SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PN pl,
	     LKEYS.KEYREL.PRED "_mange_a_rel" ] ].

mange_q := pl-indef-art-det-word &
  [ STEM < "mange" >,
    SYNSEM.LKEYS.Q.QREL.PRED _mange_q_rel ].

mangle_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "mangle" >,
    SYNSEM.LKEYS.KEYREL.PRED mangle_v ].

mann-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "mann" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_mann_n_rel" ].

maraton-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "maraton" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_maraton_n_rel" ].

mars-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "mars" >,
    SYNSEM.LOCAL.CAT.HEAD.AGREE.DEFINITENESS def,
    SYNSEM.LKEYS.KEYREL.PRED "_mars_n_rel",
    INFLECTION m1 ].

matbit-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "matbit" >,
    SYNSEM.LKEYS.KEYREL.PRED "_matbit_n_rel" ].

maurvangen-pn := sg-comm-pn &
  [ STEM < "maurvangen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Maurvangen" ].

med_func := func-word &
  [ STEM < "med" >,
    SYNSEM.LKEYS.KEYREL.PRED med_prd ].

medlem-n-neut := neut-mwe-count-noun-lxm &
  [ STEM < "medlem" >,
    SYNSEM.LKEYS.KEYREL.PRED medlem_prd,
    INFLECTION n2 ].

meg-np := 1sg-pron &
  [ STEM < "meg" >,
    SYNSEM.LOCAL [ CAT.CASE non-subj-case ] ].

meget-func := func-word &
  [ STEM < "meget" >,
    SYNSEM.LKEYS.KEYREL.PRED meget_prd ].

meget-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "meget" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_meget_n_rel" ].

melk-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "melk" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_melk_n_rel" ].

mellom_func := func-word &
  [ STEM < "mellom" >,
    SYNSEM.LKEYS.KEYREL.PRED mellom_prd ].

memurubu-pn := sg-comm-pn &
  [ STEM < "memurubu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Memurubu" ].

men :=  conj-word &
  [ STEM < ",", "men" >,
    SYNSEM.LKEYS.KEYREL.PRED men_prd ].

men-cont := continuative-word &
  [ STEM < "men" >,
    SYNSEM.LKEYS.KEYREL.PRED "_men_disc_rel" ].

mene_v := main-verb-lxm &
  [ STEM < "mene" >,
    INFLECTION v2,
    SYNSEM.LKEYS.KEYREL.PRED mene_v ].

mens_func := func-word &
  [ STEM < "mens" >,
    SYNSEM.LKEYS.KEYREL.PRED mens_prd ].

mens-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "mens" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_mens_n_rel" ].

meny-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "meny" >,
    SYNSEM.LKEYS.KEYREL.PRED "_meny_n_rel" ].

; PH 2016-09-15: Took out SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEN mass-gend,
mer_q := mer-det-word &
  [ STEM < "mer" >,
    SYNSEM.LKEYS.Q.QREL.PRED _mer_q_rel ].

mer-enn_func := func-word &
  [ STEM < "mer","enn" >,
    SYNSEM.LKEYS.KEYREL.PRED mer*enn_prd ].

mer_func := func-word &
  [ STEM < "mer" >,
    SYNSEM.LKEYS.KEYREL.PRED mer_prd ].

mercursenteret-pn := sg-neut-pn &
  [ STEM < "mercursenteret" >,
    SYNSEM.LKEYS.KEYREL.CARG "MERCURSENTERET" ].

merke-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "merke" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_merke_n_rel" ].

merke_v := main-verb-lxm &
  [ STEM < "merke" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED merke_v ].

merkelig-a := adj-lxm &
  [ STEM < "merkelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_merkelig_a_rel", 
    INFLECTION a2 ].

; PH 2016-09-15: Took out SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEN mass-gend,
mest_q := mest-det-word &
  [ STEM < "mest" >,
    SYNSEM.LKEYS.Q.QREL.PRED _mest_q_rel ].

mest_func := func-word &
  [ STEM < "mest" >,
    SYNSEM.LKEYS.KEYREL.PRED mest_prd ].

mi := fem-1sg-poss &
  [ STEM < "mi" > ].

microsoft-pn := sg-comm-pn &
  [ STEM < "microsoft" >,
    SYNSEM.LKEYS.KEYREL.CARG "Microsoft" ].

midt-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "midt" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_midt_n_rel" ].

; midt-i_func := func-word &
;   [ STEM < "midt","i" >,
;     SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD verb ] >,
;     SYNSEM.LKEYS.KEYREL.PRED midt-i_prd ].

; midt-på_func := func-word &
;   [ STEM < "midt","på" >,
;     SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD verb ] >,
;     SYNSEM.LKEYS.KEYREL.PRED midt-på_prd ].

; midt-blant_func := func-word &
;   [ STEM < "midt","blant" >,
;     SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD verb ] >,
;     SYNSEM.LKEYS.KEYREL.PRED midt-blant_prd ].

; midt-iblant_func := func-word &
;   [ STEM < "midt","iblant" >,
;     SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD verb ] >,
;     SYNSEM.LKEYS.KEYREL.PRED midt-iblant_prd ].

; midt-imot_func := func-word &
;   [ STEM < "midt","imot" >,
;     SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD verb ] >,
;     SYNSEM.LKEYS.KEYREL.PRED midt-imot_prd ].

; midt-foran_func := func-word &
;   [ STEM < "midt","foran" >,
;     SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD verb ] >,
;     SYNSEM.LKEYS.KEYREL.PRED midt-foran_prd ].

; midt-imellom_func := func-word &
;   [ STEM < "midt","imellom" >,
;     SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD verb ] >,
;     SYNSEM.LKEYS.KEYREL.PRED midt-imellom_prd ].

; midt-mellom_func := func-word &
;   [ STEM < "midt","mellom" >,
;     SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD verb ] >,
;     SYNSEM.LKEYS.KEYREL.PRED midt-mellom_prd ].

; midt-under_func := func-word &
;   [ STEM < "midt","under" >,
;     SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD verb ] >,
;     SYNSEM.LKEYS.KEYREL.PRED midt-under_prd ].

midtbyen-pn := sg-comm-pn &
  [ STEM < "midtbyen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Midtbyen" ].

mikrokjerne-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "mikrokjerne" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_mikrokjerne_n_rel" ].

mikroprogram-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "mikroprogram" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mikroprogram_n_rel" ].

min := masc-1sg-poss &
  [ STEM < "min" > ].

; PH 2016-09-15: Took out SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEN mass-gend,
mindre_q := mer-det-word &
  [ STEM < "mindre" >,
    SYNSEM.LKEYS.Q.QREL.PRED _mindre_q_rel ].

mindre_func := func-word &
  [ STEM < "mindre" >,
    SYNSEM.LKEYS.KEYREL.PRED mindre_prd ].

mine := pl-1sg-poss &
  [ STEM < "mine" > ].

mine-n-fem := comm-mwe-count-noun-lxm &
  [ STEM < "mine" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED mine_prd ].

minimaskin-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "minimaskin" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_minimaskin_n_rel" ].

minimum_func := func-word &
  [ STEM < "minimum" >,
    SYNSEM.LKEYS.KEYREL.PRED minimum_prd ].

minimum-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "minimum" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_minimum_n_rel" ].

; PH 2016-09-15: Took out SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEN mass-gend,
minst_q := mest-det-word &
  [ STEM < "minst" >,
    SYNSEM.LKEYS.Q.QREL.PRED _minst_q_rel ].

minst_func := func-word &
  [ STEM < "minst" >,
    SYNSEM.LKEYS.KEYREL.PRED minst_prd ].

minutt-n-neut := neut-mod-noun-lxm &
  [ STEM < "minutt" >,
    SYNSEM.LKEYS.KEYREL.PRED _minutt_n_rel,
    INFLECTION n2 ].

mislike_v := main-verb-lxm &
  [ STEM < "mislike" >,
    INFLECTION v2,
    SYNSEM.LKEYS.KEYREL.PRED mislike_v ].

mitt := neut-1sg-poss &
  [ STEM < "mitt" > ].

mjølkedalstind-pn := sg-comm-pn &
  [ STEM < "mjølkedalstind" >,
    SYNSEM.LKEYS.KEYREL.CARG "Mjølkedalstind" ].

mm-noun-word := mod-noun-word &
  [ STEM < "mm" >,
    SYNSEM.LKEYS.KEYREL.PRED "_millimeter-abbriv_rel" ].

mod-verb-adv := mod-verb-word &
  [ STEM < "bare" >,
    SYNSEM.LKEYS.KEYREL.PRED bare_prd ].

moden-a := adj-lxm &
  [ INFLECTION a5,
    STEM < "moden" >,
    SYNSEM.LKEYS.KEYREL.PRED "_moden_a_rel" ].

modulere_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "modulere" >,
    SYNSEM.LKEYS.KEYREL.PRED modulere_v ].

moms-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "moms" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_moms_n_rel" ].

morgen-kveld-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "morgen","kveld" >,
    SYNSEM.LKEYS.KEYREL.PRED "_morgen-kveld_n_rel",
    INFLECTION m1 ].

morgen-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "morgen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_morgen_n_rel",
    INFLECTION m1 ].

morgen-tidlig-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "morgen","tidlig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_morgen-tidlig_n_rel",
    INFLECTION m1 ].

morgenbåt-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "morgenbåt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_morgenbåt_n_rel" ].

morkabu-pn := sg-comm-pn &
  [ STEM < "morkabu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Morkabu" ].

mormors-stue-pn := sg-comm-pn &
  [ STEM < "mormors", "stue" >,
    SYNSEM.LKEYS.KEYREL.CARG "MORMORS STUE" ].

morsom-a := adj-lxm &
  [ INFLECTION a1,
    STEM < "morsom" >,
    SYNSEM.LKEYS.KEYREL.PRED "_morsom_a_rel" ].

mot-n-neut := neut-mwe-count-noun-lxm &
  [ STEM < "mot" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED mot_prd ].

mot_func := func-word &
  [ STEM < "mot" >,
    SYNSEM.LKEYS.KEYREL.PRED mot_prd ].

ms-dos-pn := sg-comm-pn &
  [ STEM < "ms-dos" >,
    SYNSEM.LKEYS.KEYREL.CARG "MS-dos" ].

multics-pn := sg-comm-pn &
  [ STEM < "multics" >,
    SYNSEM.LKEYS.KEYREL.CARG "Multics" ].

munkegaten-pn := sg-comm-pn &
  [ STEM < "munkegaten" >,
    SYNSEM.LKEYS.KEYREL.CARG "MUNKEGATEN" ].

mva-noun-word := mod-noun-word &
  [ STEM < "mva" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mva_rel" ].

mvs-pn := sg-comm-pn &
  [ STEM < "mvs" >,
    SYNSEM.LKEYS.KEYREL.CARG "Mvs" ].

; PH 2016-09-15: Took out SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEN mass-gend,
mye_q := sg-indef-art-det-word &
  [ STEM < "mye" >,
    SYNSEM.LKEYS.Q.QREL.PRED _mye_q_rel ].

mye_func := func-word &
  [ STEM < "mye" >,
    SYNSEM.LKEYS.KEYREL.PRED mye_prd ].

mynt-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "mynt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mynt_n_rel" ].

Møre-og-Romsdal-pn := pn-word &
  [ STEM < "Møre","og","Romsdal" >,
    SYNSEM.LKEYS.KEYREL.CARG "Møre-og-Romsdal" ].

mål-n-neut := neut-mwe-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "mål" >,
    SYNSEM.LKEYS.KEYREL.PRED mål_prd ].

måtte-aux1 := inf-pres-modal-aux-lxm &
  [ STEM < "måtte" >,
    INFLECTION v1,
    SYNSEM [ LOCAL [ MODAL [ BURDE #burde,
			     KUNNE #kunne,
			     MATTE -,
			     SKULLE #skulle,
			     VILLE #ville ],
		     CAT.VBL.LOCAL.MODAL [ BURDE #burde,
					   KUNNE #kunne,
					   MATTE +,
					   SKULLE #skulle,
					   VILLE #ville ] ],
	     LKEYS.KEYREL.PRED "_måtte_aux_rel" ] ].

måtte-aux2 := pret-perf-modal-aux-lxm &
  [ STEM < "måtte" >,
    INFLECTION v1,
    SYNSEM [ LOCAL [ MODAL [ BURDE #burde,
			     KUNNE #kunne,
			     MATTE -,
			     SKULLE #skulle,
			     VILLE #ville ],
		     CAT.VBL.LOCAL.MODAL [ BURDE #burde,
					   KUNNE #kunne,
					   MATTE +,
					   SKULLE #skulle,
					   VILLE #ville ] ],
	     LKEYS.KEYREL.PRED "_måtte_aux_rel" ] ].

nabo-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "nabo" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_nabo_n_rel" ].

nakke-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "nakke" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nakke_n_rel" ].

natt-n-fem := comm-mod-cmp-noun-lxm &
  [ STEM < "natt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_natt_n_rel",
    INFLECTION m1 ].

navn-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "navn" >,
    SYNSEM.LKEYS.KEYREL.PRED "_navn_n_rel" ].

ned_func := func-word &
  [ STEM < "ned" >,
    SYNSEM.LKEYS.KEYREL.PRED ned_prd ].

nedenfor_func := func-word &
  [ STEM < "nedenfor" >,
    SYNSEM.LKEYS.KEYREL.PRED nedenfor_prd ].

nedlate_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "nedlate" >,
    SYNSEM.LKEYS.KEYREL.PRED nedlate_v ].

nedover_func := func-word &
  [ STEM < "nedover" >,
    SYNSEM.LKEYS.KEYREL.PRED nedover_prd ].

nedre-a := adj-lxm &
  [ INFLECTION a2,
    STEM < "nedre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nedre_a_rel" ].

nei-cont := continuative-word &
  [ STEM < "nei" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nei-rel" ].

nei-cont2 := continuative-word &
  [ STEM < "nei", "," >,
    SYNSEM.LKEYS.KEYREL.PRED "_nei-rel" ].

nei-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "nei" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_nei_n_rel" ].

nekte_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "nekte" >,
    SYNSEM.LKEYS.KEYREL.PRED nekte_v ].

nemlig_func := func-word &
  [ STEM < "nemlig" >,
    SYNSEM.LKEYS.KEYREL.PRED nemlig_prd ].

neste-card-a := sg-def-card-word &
  [ STEM < "neste" >,
    SYNSEM.LKEYS.KEYREL.CARG "neste_rel" ].

nesten_func := func-word &
  [ STEM < "nesten" >,
    SYNSEM.LKEYS.KEYREL.PRED nesten_prd ].

ni-card := pl-card-word &
  [ STEM < "ni" >,
    LEXREL.LIST.FIRST.CARG "9_card_rel" ].

ni-muser-pn := sg-comm-pn &
  [ STEM < "ni", "muser" >,
    SYNSEM.LKEYS.KEYREL.CARG "NI MUSER" ].

niende-card := sg-def-card-word &
  [ STEM < "niende" >,
    LEXREL.LIST.FIRST.CARG "niende_rel" ].

nitten-card := pl-card-word &
  [ STEM < "nitten" >,
    LEXREL.LIST.FIRST.CARG "19_card_rel" ].

nittende-card := sg-def-card-word &
  [ STEM < "nittende" >,
    LEXREL.LIST.FIRST.CARG "nittende_rel" ].

nitti-card := pl-card-word &
  [ STEM < "nitti" >,
    LEXREL.LIST.FIRST.CARG "90_rel" ].

nittiandre-card := sg-def-card-word &
  [ STEM < "nittiandre" >,
    LEXREL.LIST.FIRST.CARG "92-def_rel" ].

nittien-card := pl-card-word &
  [ STEM < "nittien" >,
    LEXREL.LIST.FIRST.CARG "91_rel" ].

nittiende-card := sg-def-card-word &
  [ STEM < "nittiende" >,
    LEXREL.LIST.FIRST.CARG "90-def_rel" ].

nittifem-card := pl-card-word &
  [ STEM < "nittifem" >,
    LEXREL.LIST.FIRST.CARG "95_rel" ].

nittifemte-card := sg-def-card-word &
  [ STEM < "nittifemte" >,
    LEXREL.LIST.FIRST.CARG "95-def_rel" ].

nittifire-card := pl-card-word &
  [ STEM < "nittifire" >,
    LEXREL.LIST.FIRST.CARG "94_rel" ].

nittifjerde-card := sg-def-card-word &
  [ STEM < "nittifjerde" >,
    LEXREL.LIST.FIRST.CARG "94-def_rel" ].

nittiførste-card := sg-def-card-word &
  [ STEM < "nittiførste" >,
    LEXREL.LIST.FIRST.CARG "91-def_rel" ].

nittini-card := pl-card-word &
  [ STEM < "nittini" >,
    LEXREL.LIST.FIRST.CARG "99_rel" ].

nittiniende-card := sg-def-card-word &
  [ STEM < "nittiniende" >,
    LEXREL.LIST.FIRST.CARG "99-def_rel" ].

nittiseks-card := pl-card-word &
  [ STEM < "nittiseks" >,
    LEXREL.LIST.FIRST.CARG "96_rel" ].

nittisjette-card := sg-def-card-word &
  [ STEM < "nittisjette" >,
    LEXREL.LIST.FIRST.CARG "96-def_rel" ].

nittisju-card := pl-card-word &
  [ STEM < "nittisju" >,
    LEXREL.LIST.FIRST.CARG "97_rel" ].

nittisjuende-card := sg-def-card-word &
  [ STEM < "nittisjuende" >,
    LEXREL.LIST.FIRST.CARG "97-def_rel" ].

nittito-card := pl-card-word &
  [ STEM < "nittito" >,
    LEXREL.LIST.FIRST.CARG "92_rel" ].

nittitre-card := pl-card-word &
  [ STEM < "nittitre" >,
    LEXREL.LIST.FIRST.CARG "93_rel" ].

nittitredje-card := sg-def-card-word &
  [ STEM < "nittitredje" >,
    LEXREL.LIST.FIRST.CARG "93-def_rel" ].

nittiåtte-card := pl-card-word &
  [ STEM < "nittiåtte" >,
    LEXREL.LIST.FIRST.CARG "98_rel" ].

nittiåttende-card := sg-def-card-word &
  [ STEM < "nittiåttende" >,
    LEXREL.LIST.FIRST.CARG "98-def_rel" ].

nm-noun-word := mod-noun-word &
  [ STEM < "NM" >,
    SYNSEM.LKEYS.KEYREL.PRED "_Norgesmesterskap-abbriv_rel" ].

; nnn-pn := unknown-word &
;   [ STEM < "nnn" >,
;     SYNSEM.LKEYS.KEYREL.CARG "nnn" ].

noe-a := mod-adj-adv-nominal-prep-word &
  [ STEM < "noe" >,
    SYNSEM.LKEYS.KEYREL.PRED "_noe_a_rel" ].

noe_q := indef-mass-det &
  [ STEM < "noe" >,
    SYNSEM.LKEYS.Q.QREL.PRED _noe_q_rel ].

; noe-np := noe-pron &
;   [ STEM < "noe" >,
;     SYNSEM.LKEYS.KEYREL.PRED "NOE_pron_rel" ].

noe-som-helst := general-pron & keyrel-lex-item &
  [ STEM < "noe", "som", "helst" >,
    SYNSEM [ LOCAL [ CAT.CASE non-subj-case ],
	     LOCAL.NEG-OUT neg-or-yn_m_rel,
	     LKEYS.KEYREL.PRED _noe-som-helst_pron_rel ] ].


helst_func := func-word &
  [ STEM <"helst">,
    SYNSEM.LKEYS.KEYREL.PRED helst_prd ].

noen_q := indef-art-det-word &
  [ STEM < "noen" >,
    SYNSEM [ LOCAL.CAT.VAL.SISTER.LOCAL.CONT.HOOK.INDEX.PNG.PN pl,
	     LKEYS.Q.QREL.PRED _noen_q_rel ] ].

noensteds_adv := neg-pol-item-adv-word &
  [ STEM < "noensteds" >,
    SYNSEM [ LOCAL.NEG-OUT neg-or-yn_m_rel,
	     LKEYS.KEYREL.PRED _noensteds_adv_rel ] ].

noenting-np := general-pron &
  [ STEM < "noenting" >,
    SYNSEM [ LOCAL.CAT.CASE non-subj-case,
	     LOCAL.NEG-IN neg-or-yn_m_rel ] ].

nok-s-part := spart-word &
  [ STEM < "nok" >,
    SYNSEM.LKEYS.KEYREL.PRED _nok_part_rel ].

nok_q := quant-word &
  [ STEM < "nok" >,
    SYNSEM [ LOCAL.CAT.VAL.SISTER.LOCAL.CAT.HEAD adj-noun,
	     LKEYS.Q.QREL [ ARG0.PNG [ GEN gender,
				       PN pn ],
			    PRED _nok_q_rel ] ] ].

nord-pn := sg-neut-pn &
  [ STEM < "nord" >,
    SYNSEM.LKEYS.KEYREL.CARG "Nord" ].

nordre-a := adj-lxm &
  [ STEM < "nordre" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_nordre_a_rel" ].

nordre-pn := sg-comm-pn &
  [ STEM < "nordre" >,
    SYNSEM.LKEYS.KEYREL.CARG "NORDRE" ].

norsk-a := adj-lxm &
  [ INFLECTION a2,
    STEM < "norsk" >,
    SYNSEM.LKEYS.KEYREL.PRED "_norsk_a_rel" ].

norsk-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "norsk" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_norsk_n_rel" ].

nova-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "nova" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_nova_n_rel" ].

nova-pn := sg-comm-pn &
  [ STEM < "nova" >,
    SYNSEM.LKEYS.KEYREL.CARG "NOVA" ].

november-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "november" >,
    SYNSEM.LOCAL.CAT.HEAD.AGREE.DEFINITENESS def,
    SYNSEM.LKEYS.KEYREL.PRED "_november_n_rel",
    INFLECTION m1 ].

nr_func := number-mod-word &
  [ STEM < "nr." >,
    SYNSEM.LKEYS.KEYREL.PRED nummer_prd ].

hashtag_func := number-mod-word &
  [ STEM < "#" >,
    SYNSEM.LKEYS.KEYREL.PRED nummer_prd ].

nummer_func := number-mod-word &
  [ STEM < "nummer" >,
    SYNSEM.LKEYS.KEYREL.PRED nummer_prd ].

ny-a := adj-lxm &
  [ STEM < "ny" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_ny_a_rel" ].

nå_func := func-word &
  [ STEM < "nå" >,
    SYNSEM.LKEYS.KEYREL.PRED nå_prd ].

nå_v := main-verb-lxm &
  [ STEM < "nå" >,
    INFLECTION v4,
    SYNSEM.LKEYS.KEYREL.PRED nå_v ].

når_func := func-word &
  [ STEM < "når" >,
    SYNSEM.LKEYS.KEYREL.PRED når_prd ].

nødvendigvis-sadv := norm-sadv-word &
  [ STEM < "nødvendigvis" >,
    SYNSEM.LKEYS.KEYREL.PRED nødvendigvis_prd ].

nørdstedalseter-pn := sg-comm-pn &
  [ STEM < "nørdstedalseter" >,
    SYNSEM.LKEYS.KEYREL.CARG "Nørdstedalseter" ].

nøytral-a := adj-lxm &
  [ INFLECTION a1,
    STEM < "nøytral" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nøytral_a_rel" ].

observere_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "observere" >,
    SYNSEM.LKEYS.KEYREL.PRED observere_v ].

ofte_func := func-word &
  [ STEM < "ofte" >,
    SYNSEM.LKEYS.KEYREL.PRED ofte_prd ].

oftere_func := func-word &
  [ STEM < "oftere" >,
    SYNSEM.LKEYS.KEYREL.PRED oftere_prd ].

oftest_func := func-word &
  [ STEM < "oftest" >,
    SYNSEM.LKEYS.KEYREL.PRED oftest_prd ].

og-conj := conj-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL.PRED og_prd ].

comma-og-conj := conj-word &
  [ STEM < ",", "og" >,
    SYNSEM.LKEYS.KEYREL [ PRED og_prd,
			  L-INDEX event,
			  R-INDEX event ] ].

og-cont := continuative-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL.PRED "_og_disc_rel" ].

og-så-videre_func := func-word &
  [ STEM < "og","så","videre" >,
    SYNSEM.LKEYS.KEYREL.PRED og*så*videre_prd ].

også_func := func-word &
  [ STEM < "også" >,
    SYNSEM.LKEYS.KEYREL.PRED også_prd ].

oktober-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "oktober" >,
    SYNSEM.LOCAL.CAT.HEAD.AGREE.DEFINITENESS def,
    SYNSEM.LKEYS.KEYREL.PRED "_oktober_n_rel",
    INFLECTION m1 ].

olavsbu-pn := sg-comm-pn &
  [ STEM < "olavsbu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Olavsbu" ].

olavskvartalet-pn := sg-neut-pn &
  [ STEM < "olavskvartalet" >,
    SYNSEM.LKEYS.KEYREL.CARG "OLAVSKVARTALET" ].

om_func := func-word &
  [ STEM < "om" >,
    SYNSEM.LKEYS.KEYREL.PRED om_prd ].

ombestemme_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "ombestemme" >,
    SYNSEM.LKEYS.KEYREL.PRED ombestemme_v ].

omkring_func := func-word &
  [ STEM < "omkring" >,
    SYNSEM.LKEYS.KEYREL.PRED omkring_prd ].

omtrent-func := func-word &
  [ STEM < "omtrent" >,
    SYNSEM.LKEYS.KEYREL.PRED omtrent_prd ].

generic_card_ne := pl-card-word &
  [ STEM [ FIRST "_generic_card_ne_",
	   FORM #form ],
    LEXREL.LIST.FIRST.CARG #form ].

generic_ord_ne := sg-def-card-word &
  [ STEM [ FIRST "_generic_ord_ne_",
	   FORM #form ],
    LEXREL.LIST.FIRST.CARG #form ].

onsdag_func := func-word &
  [ STEM < "onsdag" >,
    SYNSEM.LKEYS.KEYREL.PRED onsdag_prd ].

onsdag-n-masc := masc-mod-noun-lxm &
  [ STEM < "onsdag" >,
    SYNSEM.LKEYS.KEYREL.PRED _onsdag_n_rel,
    INFLECTION m1 ].

openbracket := open-bracket-word &
  [ STEM < "(" >,
    SYNSEM.LKEYS.KEYREL.PRED "open-bracket_rel" ].

opera-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "opera" >,
    SYNSEM.LKEYS.KEYREL.PRED "_opera_n_rel" ].

operativsystem-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "operativsystem" >,
    SYNSEM.LKEYS.KEYREL.PRED "_operativsystem_n_rel",
    INFLECTION n1-n2 ].

opp_func := func-word &
  [ STEM < "opp" >,
    SYNSEM.LKEYS.KEYREL.PRED opp_prd ].

oppgave-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "oppgave" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_oppgave_n_rel" ].

opphøye_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "opphøye" >,
    SYNSEM.LKEYS.KEYREL.PRED opphøye_v ].

oppkjørsel-n-comm := comm-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "oppkjørsel" >,
    SYNSEM.LKEYS.KEYREL.PRED "_oppkjørsel_n_rel" ].

oppleve_v := main-verb-lxm &
  [ STEM < "oppleve" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED oppleve_v ].

oppover_func := func-word &
  [ STEM < "oppover" >,
    SYNSEM.LKEYS.KEYREL.PRED oppover_prd ].

oppskrift-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "oppskrift" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_oppskrift_n_rel" ].

oransje-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "oransje" >,
    SYNSEM.LKEYS.KEYREL.PRED "_oransje_n_rel",
    INFLECTION no-infl ].

organisering-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "organisering" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_organisering_n_rel" ].

oslo-pn := sg-comm-pn &
  [ STEM < "oslo" >,
    SYNSEM.LKEYS.KEYREL.CARG "OSLO" ].

oss-np := 1pl-pron &
  [ STEM < "oss" >,
    SYNSEM.LOCAL [ CAT.CASE non-subj-case ] ].

osv_func := func-word &
  [ STEM < "osv" >,
    SYNSEM.LKEYS.KEYREL.PRED osv_prd ].

ovenfor_func := func-word &
  [ STEM < "ovenfor" >,
    SYNSEM.LKEYS.KEYREL.PRED ovenfor_prd ].

over_func := func-word &
  [ STEM < "over" >,
    SYNSEM.LKEYS.KEYREL.PRED over_prd ].

overfor_func := func-word &
  [ STEM < "overfor" >,
    SYNSEM.LKEYS.KEYREL.PRED overfor_prd ].

overlate_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "overlate" >,
    SYNSEM.LKEYS.KEYREL.PRED overlate_v ].

overraskelse-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "overraskelse" >,
    SYNSEM.LKEYS.KEYREL.PRED "_overraskelse_n_rel" ].

overrekke_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "overrekke" >,
    SYNSEM.LKEYS.KEYREL.PRED overrekke_v ].

pakke-n-fem := comm-mwe-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "pakke" >,
    SYNSEM.LKEYS.KEYREL.PRED pakke_prd ].

pakke_v := main-verb-lxm &
  [ STEM < "pakke" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED pakke_v ].

par-a := adj-lxm &
  [ STEM < "par" >,
    SYNSEM.LKEYS.KEYREL.PRED "_par_a_rel", 
    INFLECTION a3a ].

par-n-neut := neut-mwe-count-noun-lxm &
  [ STEM < "par" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED par_prd ].

pause-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "pause" >,
    SYNSEM.LKEYS.KEYREL.PRED "_pause_n_rel",
    INFLECTION m1 ].

pc-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "pc" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_pc_n_rel" ].

pdf-noun-word := mod-noun-word &
  [ STEM < "pdf" >,
    SYNSEM.LKEYS.KEYREL.PRED "_pdf_rel" ].

pen-a := adj-lxm &
  [ STEM < "pen" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_pen_a_rel" ].

penge-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "penge" >,
    SYNSEM.LKEYS.KEYREL.PRED "_penge_n_rel" ].

per-p := per-word &
  [ STEM < "per" >,
    SYNSEM.LKEYS.KEYREL.PRED "_per_prd" ].

pr_period-p := per-word &
  [ STEM < "pr." >,
    SYNSEM.LKEYS.KEYREL.PRED "_per_prd" ].

; pga_func := func-word &
;   [ STEM < "pga" >,
;     SYNSEM.LKEYS.KEYREL.PRED pga_prd ].

pils-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "pils" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_pils_n_rel" ].

pizza-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "pizza" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_pizza_n_rel" ].

pkt-card-select-word := card-select-word &
  [ STEM < "pkt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_punkt-abbriv_rel" ].

plage-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "plage" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_plage_n_rel" ].

plage_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "plage" >,
    SYNSEM.LKEYS.KEYREL.PRED plage_v ].

plan-a := adj-lxm &
  [ STEM < "plan" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_plan_a_rel" ].

plan-n-masc := masc-mwe-count-noun-lxm &
  [ STEM < "plan" >,
    SYNSEM.LKEYS.KEYREL.PRED plan_prd,
    INFLECTION m1 ].

plan-n-neut := neut-mwe-count-noun-lxm &
  [ STEM < "plan" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED plan_prd ].

plass-n-masc := masc-mwe-count-noun-lxm &
  [ STEM < "plass" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED plass_prd ].

plassere_v := trans-verb-lxm &
  [ STEM < "plassere" >,
    INFLECTION v2, 
    SYNSEM.LKEYS.KEYREL.PRED "_plassere_12_rel" ].

plen-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "plen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_plen_n_rel" ].

posepilten-pn := sg-comm-pn &
  [ STEM < "posepilten" >,
    SYNSEM.LKEYS.KEYREL.CARG "POSEPILTEN" ].

postkontor-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "postkontor" >,
    INFLECTION n1-n2,
    SYNSEM.LKEYS.KEYREL.PRED "_postkontor_n_rel" ].

pr-p := per-word &
  [ STEM < "pr" >,
    SYNSEM.LKEYS.KEYREL.PRED per_prd ].

prat-n-mascorneut := mascorneut-mwe-noun-lxm &
  [ STEM < "prat" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED prat_prd ].

prinsen-pn := sg-comm-pn &
  [ STEM < "prinsen" >,
    SYNSEM.LKEYS.KEYREL.CARG "PRINSEN" ].

prinsens-gate-pn := sg-comm-pn &
  [ STEM < "prinsens", "gate" >,
    SYNSEM.LKEYS.KEYREL.CARG "NORDRE" ].

privat-a := adj-lxm &
  [ INFLECTION a2a,
    STEM < "privat" >,
    SYNSEM.LKEYS.KEYREL.PRED "_privat_a_rel" ].

programmering-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "programmering" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_programmering_n_rel" ].

prosent-noun-word := mod-noun-word &
  [ STEM < "%" >,
    SYNSEM.LKEYS.KEYREL.PRED "_prosent-abbriv_rel" ].

prosent-noun-word2 := mod-noun-word &
  [ STEM < "prosent" >,
    SYNSEM.LKEYS.KEYREL.PRED "_prosent_rel" ].

prosjekt-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "prosjekt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_prosjekt_n_rel",
    INFLECTION n1-n2 ].

prøve-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "prøve" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_prøve_n_rel" ].

prøve_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "prøve" >,
    SYNSEM.LKEYS.KEYREL.PRED prøve_v ].

pub-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "pub" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_pub_n_rel" ].

pålegge_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "pålegge" >,
    SYNSEM.LKEYS.KEYREL.PRED pålegge_v ].

rable_v := main-verb-lxm &
  [ STEM < "rable" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED rable_v ].

ramme-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "ramme" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_ramme_n_rel" ].

ramme_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "ramme" >,
    SYNSEM.LKEYS.KEYREL.PRED ramme_v ].

rasfare-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "rasfare" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_rasfare_n_rel" ].

registrering-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "registrering" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_registrering_n_rel" ].

regn-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "regn" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_regn_n_rel" ].

regne_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "regne" >,
    SYNSEM.LKEYS.KEYREL.PRED regne_v ].

rekke-n-comm := comm-mwe-count-noun-lxm &
  [ STEM < "rekke" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED rekke_prd ].

rekke-n-fem := comm-mwe-count-noun-lxm &
  [ STEM < "rekke" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED rekke_prd ].

rekke_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "rekke" >,
    SYNSEM.LKEYS.KEYREL.PRED rekke_v ].

rekruttere_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "rekruttere" >,
    SYNSEM.LKEYS.KEYREL.PRED rekruttere_v ].

ren-a := adj-lxm &
  [ STEM < "ren" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_ren_a_rel" ].

resultat-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1-n2,
    STEM < "resultat" >,
    SYNSEM.LKEYS.KEYREL.PRED "_resultat_n_rel" ].

ri_v := main-verb-lxm &
  [ STEM < "ri" >,
    INFLECTION no-infl,
    SYNSEM.LKEYS.KEYREL.PRED ri_v ].

ride_v := main-verb-lxm &
  [ STEM < "ride" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED ride_v ].

rike-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n2,
    STEM < "rike" >,
    SYNSEM.LKEYS.KEYREL.PRED "_rike_n_rel" ].

rio-pn := sg-comm-pn &
  [ STEM < "rio" >,
    SYNSEM.LKEYS.KEYREL.CARG "RIO" ].

rolig-a := mwe-adj-lxm &
  [ INFLECTION a2,
    STEM < "rolig" >,
    SYNSEM.LKEYS.KEYREL.PRED rolig_prd ].

rosa-a := adj-lxm &
  [ STEM < "rosa" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_rosa_a_rel" ].

rosendal-pub-pn := sg-comm-pn &
  [ STEM < "rosendal", "pub" >,
    SYNSEM.LKEYS.KEYREL.CARG "ROSENDAL PUB" ].

rule_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "rule" >,
    SYNSEM.LKEYS.KEYREL.PRED rule_v ].

rulle-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "rulle" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_rulle_n_rel" ].

rulle_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "rulle" >,
    SYNSEM.LKEYS.KEYREL.PRED rulle_v ].

rundt_func := func-word &
  [ STEM < "rundt" >,
    SYNSEM.LKEYS.KEYREL.PRED rundt_prd ].

rute-n-comm := comm-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "rute" >,
    SYNSEM.LKEYS.KEYREL.PRED "_rute_n_rel" ].

ry_v := main-verb-lxm &
  [ INFLECTION v4,
    STEM < "ry" >,
    SYNSEM.LKEYS.KEYREL.PRED ry_v ].

rydde_v := main-verb-lxm &
  [ STEM <"rydde">,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED rydde_v ].

rygg-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "rygg" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_rygg_n_rel" ].

rød-a := adj-lxm &
  [ INFLECTION a1,
    STEM < "rød" >,
    SYNSEM.LKEYS.KEYREL.PRED "_rød_a_rel" ].

rødt-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "rødt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_rødt_n_rel",
    INFLECTION no-infl ].

røisheim-pn := sg-comm-pn &
  [ STEM < "røisheim" >,
    SYNSEM.LKEYS.KEYREL.CARG "Røisheim" ].

s-pss := refl-3-poss-affix &
  [ STEM < "s" > ].

sak-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "sak" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_sak_n_rel" ].

samfundet-pn := sg-neut-pn &
  [ STEM < "samfundet" >,
    SYNSEM.LKEYS.KEYREL.CARG "SAMFUNDET" ].

samle_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "samle" >,
    SYNSEM.LKEYS.KEYREL.PRED samle_v ].

samme-a := lex-adj-word &
  [ STEM < "samme" >,
    SYNSEM.LKEYS.KEYREL.PRED "_samme_a_rel" ].

sammen_func := func-word &
  [ STEM < "sammen" >,
    SYNSEM.LKEYS.KEYREL.PRED sammen_prd ].

sammenligne_v := main-verb-lxm &
  [ STEM < "sammenligne" >,
    INFLECTION v1, 
    SYNSEM.LKEYS.KEYREL.PRED sammenligne_v ].

samrå_v := main-verb-lxm &
  [ INFLECTION v4,
    STEM < "samrå" >,
    SYNSEM.LKEYS.KEYREL.PRED samrå_v ].

samt :=  conj-word &
  [ STEM < "samt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_samt_c_rel" ].

samtlige_q := pl-indef-art-det-word &
  [ STEM < "samtlige" >,
    SYNSEM.LKEYS.Q.QREL.PRED _samtlige_q_rel ].

sandy-pn := sg-comm-pn &
  [ STEM < "Sandy" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sandy" ].

se_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "se" >,
    SYNSEM.LKEYS.KEYREL.PRED se_v ].

seg-refl-heavy := heavy-refl-phrase &
  [ STEM < "seg", "selv" >,
    SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PN 3p,
             LKEYS.KEYREL [ PRED "refl-pron_rel",
			    ARG0.PRONTYPE refl_pron ] ] ].

; seg-refl-light := light-refl-phrase &
;   [ STEM < "seg" >,
;     SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PN 3p,
;              LKEYS.KEYREL.PRED "_refl-light_pron_rel" ] ].

seks-card := pl-card-word &
  [ STEM < "seks" >,
    LEXREL.LIST.FIRST.CARG "6_card_rel" ].

seksten-card := pl-card-word &
  [ STEM < "seksten" >,
    LEXREL.LIST.FIRST.CARG "16_card_rel" ].

sekstende-card := sg-def-card-word &
  [ STEM < "sekstende" >,
    LEXREL.LIST.FIRST.CARG "sekstende_rel" ].

seksti-card := pl-card-word &
  [ STEM < "seksti" >,
    LEXREL.LIST.FIRST.CARG "60_rel" ].

sekstiandre-card := sg-def-card-word &
  [ STEM < "sekstiandre" >,
    LEXREL.LIST.FIRST.CARG "62-def_rel" ].

sekstien-card := pl-card-word &
  [ STEM < "sekstien" >,
    LEXREL.LIST.FIRST.CARG "61_rel" ].

sekstiende-card := sg-def-card-word &
  [ STEM < "sekstiende" >,
    LEXREL.LIST.FIRST.CARG "60-def_rel" ].

sekstifem-card := pl-card-word &
  [ STEM < "sekstifem" >,
    LEXREL.LIST.FIRST.CARG "65_rel" ].

sekstifemte-card := sg-def-card-word &
  [ STEM < "sekstifemte" >,
    LEXREL.LIST.FIRST.CARG "65-def_rel" ].

sekstifire-card := pl-card-word &
  [ STEM < "sekstifire" >,
    LEXREL.LIST.FIRST.CARG "64_rel" ].

sekstifjerde-card := sg-def-card-word &
  [ STEM < "sekstifjerde" >,
    LEXREL.LIST.FIRST.CARG "64-def_rel" ].

sekstiførste-card := sg-def-card-word &
  [ STEM < "sekstiførste" >,
    LEXREL.LIST.FIRST.CARG "61-def_rel" ].

sekstini-card := pl-card-word &
  [ STEM < "sekstini" >,
    LEXREL.LIST.FIRST.CARG "69_rel" ].

sekstiniende-card := sg-def-card-word &
  [ STEM < "sekstiniende" >,
    LEXREL.LIST.FIRST.CARG "69-def_rel" ].

sekstiseks-card := pl-card-word &
  [ STEM < "sekstiseks" >,
    LEXREL.LIST.FIRST.CARG "66_rel" ].

sekstisjette-card := sg-def-card-word &
  [ STEM < "sekstisjette" >,
    LEXREL.LIST.FIRST.CARG "66-def_rel" ].

sekstisju-card := pl-card-word &
  [ STEM < "sekstisju" >,
    LEXREL.LIST.FIRST.CARG "67_rel" ].

sekstisjuende-card := sg-def-card-word &
  [ STEM < "sekstisjuende" >,
    LEXREL.LIST.FIRST.CARG "67-def_rel" ].

sekstito-card := pl-card-word &
  [ STEM < "sekstito" >,
    LEXREL.LIST.FIRST.CARG "62_rel" ].

sekstitre-card := pl-card-word &
  [ STEM < "sekstitre" >,
    LEXREL.LIST.FIRST.CARG "63_rel" ].

sekstitredje-card := sg-def-card-word &
  [ STEM < "sekstitredje" >,
    LEXREL.LIST.FIRST.CARG "63-def_rel" ].

sekstiåtte-card := pl-card-word &
  [ STEM < "sekstiåtte" >,
    LEXREL.LIST.FIRST.CARG "68_rel" ].

sekstiåttende-card := sg-def-card-word &
  [ STEM < "sekstiåttende" >,
    LEXREL.LIST.FIRST.CARG "68-def_rel" ].

selge_v := main-verb-lxm &
 [ INFLECTION v2,
    STEM < "selge" >,
    SYNSEM.LKEYS.KEYREL.PRED selge_v ].

selv_func := func-word &
  [ STEM < "selv" >,
    SYNSEM.LKEYS.KEYREL.PRED selv_prd ].

selv*om_func := func-word &
  [ STEM < "selv", "om" >,
    SYNSEM.LKEYS.KEYREL.PRED selv*om_prd ].

selvbetjeningslosji-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "selvbetjeningslosji" >,
    SYNSEM.LKEYS.KEYREL.PRED "_selvbetjeningslosji_n_rel",
    INFLECTION n1-n2 ].

selve_q := selve-det-word &
  [ STEM < "selve" >,
    SYNSEM.LKEYS.Q.QREL.PRED _selve_q_rel ].

selvfølgelig_func := func-word &
  [ STEM < "selvfølgelig" >,
    SYNSEM.LKEYS.KEYREL.PRED selvfølgelig_prd ].

sen-a := adj-lxm &
  [  INFLECTION a1,
    STEM < "sen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sen_a_rel" ].

sen-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "sen" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_sen_n_rel" ].

sende_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "sende" >,
    SYNSEM.LKEYS.KEYREL.PRED sende_v ].

senere_func := func-word &
  [ STEM < "senere" >,
    SYNSEM.LKEYS.KEYREL.PRED senere_prd ].

senest-func := func-word &
  [ STEM < "senest" >,
    SYNSEM.LKEYS.KEYREL.PRED senest_prd ].

sentrum-n-neut := neut-mod-pn-cmp-noun-lxm &
  [ STEM < "sentrum" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sentrum_n_rel",
    INFLECTION n1 ].

september-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "september" >,
    SYNSEM.LOCAL.CAT.HEAD.AGREE.DEFINITENESS def,
    SYNSEM.LKEYS.KEYREL.PRED "_september_n_rel",
    INFLECTION m1 ].

servere_v := main-verb-lxm &
 [ INFLECTION v2,
    STEM < "servere" >,
    SYNSEM.LKEYS.KEYREL.PRED servere_v ].

sesong-n-masc := masc-mod-noun-lxm &
  [ STEM < "sesong" >,
    SYNSEM.LKEYS.KEYREL.PRED _sesong_n_rel,
    INFLECTION m1 ].

sette_v := main-verb-lxm &
  [ STEM < "sette" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED sette_v ].

si-poss := refl-3sg-fem-poss &
  [ STEM < "si" > ].

si-garpe := garpe-word &
  [ LEXREL <! [ ARG1.PNG [ PN 3sg,
			   GEN fem ] ] !>,
    STEM < "si" > ].

si_v := main-verb-lxm &
  [ STEM < "si" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED si_v ].

siden_func := func-word &
  [ STEM < "siden" >,
    SYNSEM.LKEYS.KEYREL.PRED siden_prd ].

sikkert_func := func-word &
  [ STEM < "sikkert" >,
    SYNSEM.LKEYS.KEYREL.PRED sikkert_prd ].

sikkilsdalsseter-pn := sg-comm-pn &
  [ STEM < "sikkilsdalsseter" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sikkilsdalsseter" ].

sikringsutstyr-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "sikringsutstyr" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sikringsutstyr_n_rel" ].

sin-poss := refl-3sg-masc-poss &
  [ STEM < "sin" > ].

sin-garpe := garpe-word &
  [ LEXREL <! [ ARG1.PNG [ PN 3sg,
					   GEN masc ] ] !>,
    STEM < "sin" > ].

sine-poss := refl-3pl-poss &
  [ STEM < "sine" > ].

sine-garpe := garpe-word &
  [ LEXREL <! [ ARG1.PNG.PN 3pl ] !>,
    STEM < "sine" > ].

sine_anno_func := func-word &
  [ STEM < "sine","anno" >,
    SYNSEM.LKEYS.KEYREL.PRED sine*anno_prd ].

sint_a := adj-lxm &
  [ STEM <"sint">,
    INFLECTION a2,
    SYNSEM.LKEYS.KEYREL.PRED sint_prd ].

sist_a := adj-lxm &
  [ STEM < "sist" >,
    INFLECTION a2a,
    SYNSEM.LKEYS.KEYREL.PRED "_sist_a_rel" ].

sitt-poss := refl-3sg-neut-poss &
  [ STEM < "sitt" > ].

sitt-garpe := garpe-word &
  [ LEXREL <! [ ARG1.PNG [ PN 3sg,
					   GEN neut ] ] !>,
    STEM < "sitt" > ].

sitte_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "sitte" >,
    SYNSEM.LKEYS.KEYREL.PRED sitte_v ].

sjette-card := sg-def-card-word &
  [ STEM < "sjette" >,
    LEXREL.LIST.FIRST.CARG "sjette_rel" ].

sjokolade-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "sjokolade" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_sjokolade_n_rel" ].

sju-card := pl-card-word &
  [ STEM < "sju" >,
    LEXREL.LIST.FIRST.CARG "7_card_rel" ].

sjuende-card := sg-def-card-word &
  [ STEM < "sjuende" >,
    LEXREL.LIST.FIRST.CARG "sjuende_rel" ].

skagastølsbu-pn := sg-comm-pn &
  [ STEM < "skagastølsbu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skagastølsbu" ].

skamme_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "skamme" >,
    SYNSEM.LKEYS.KEYREL.PRED skamme_v ].

skardalstind-pn := sg-comm-pn &
  [ STEM < "skardalstind" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skardalstind" ].

skatt-n-masc := masc-cmp-noun-lxm &
  [ STEM <"skatt">,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_skatt_n_rel" ].

skautflya-pn := sg-comm-pn &
  [ STEM < "skautflya" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skautflya" ].

ski-n-comm := comm-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "ski" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ski_n_rel" ].

skille-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "skille" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_skille_n_rel" ].

skille_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "skille" >,
    SYNSEM.LKEYS.KEYREL.PRED skille_v ].

skje_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "skje" >,
    SYNSEM.LKEYS.KEYREL.PRED skje_v ].

skjorte-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "skjorte" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_skjorte_n_rel" ].

skodadalsbøen-pn := sg-comm-pn &
  [ STEM < "skodadalsbøen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skodadalsbøen" ].

skog-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "skog" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_skog_n_rel" ].

skogadalbøen-pn := sg-comm-pn &
  [ STEM < "skogadalbøen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skogadalbøen" ].

skogadalsbøen-pn := sg-comm-pn &
  [ STEM < "skogadalsbøen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skogadalsbøen" ].

skramle_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "skramle" >,
    SYNSEM.LKEYS.KEYREL.PRED skramle_v ].

skrive_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "skrive" >,
    SYNSEM.LKEYS.KEYREL.PRED skrive_v ].

skrubbe_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "skrubbe" >,
    SYNSEM.LKEYS.KEYREL.PRED skrubbe_v ].

skulle_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "skulle" >,
    SYNSEM.LKEYS.KEYREL.PRED skulle_v ].

skulle-aux1 := inf-pres-modal-aux-lxm &
  [ STEM < "skulle" >,
    INFLECTION v1,
    SYNSEM [ LOCAL [ MODAL [ BURDE #burde,
			     KUNNE #kunne,
			     MATTE #matte,
			     SKULLE -,
			     VILLE #ville ],
		     CAT.VBL.LOCAL.MODAL [ BURDE #burde,
					   KUNNE #kunne,
					   MATTE #matte,
					   SKULLE +,
					   VILLE #ville ] ],
	     LKEYS.KEYREL.PRED "_skulle_aux_rel" ] ].

skulle-aux2 := pret-perf-modal-aux-lxm &
  [ STEM < "skulle" >,
    INFLECTION v1,
    SYNSEM [ LOCAL [ MODAL [ BURDE #burde,
			     KUNNE #kunne,
			     MATTE #matte,
			     SKULLE -,
			     VILLE #ville ],
		     CAT.VBL.LOCAL.MODAL [ BURDE #burde,
					   KUNNE #kunne,
					   MATTE #matte,
					   SKULLE +,
					   VILLE #ville ] ],
	     LKEYS.KEYREL.PRED "_skulle_aux_rel" ] ].

skål-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "skål" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_skål_n_rel" ].

slags-n-masc := noun-word &
  [ STEM < "slags" >,
    SYNSEM.LKEYS.KEYREL.PRED "_slags_n_rel" ].

slettingsbu-pn := sg-comm-pn &
  [ STEM < "slettingsbu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Slettingsbu" ].

slik-a := adj-lxm &
  [ INFLECTION a1,
    STEM < "slik" >,
    SYNSEM.LKEYS.KEYREL.PRED "_slik_a_rel" ].

slik_func := func-word &
  [ STEM < "slik" >,
    SYNSEM.LKEYS.KEYREL.PRED slik_prd ].

slingre_v := main-verb-lxm &
  [ STEM < "slingre" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED slingre_v ].

slutt-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "slutt" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_slutt_n_rel" ].

slå-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "slå" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_slå_n_rel" ].

slå_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "slå" >,
    SYNSEM.LKEYS.KEYREL.PRED slå_v ].

smashe_v := trans-verb-lxm &
  [ INFLECTION v1,
    STEM < "smashe" >,
    SYNSEM.LKEYS.KEYREL.PRED "_smashe_12_rel" ].

smelte_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "smelte" >,
    SYNSEM.LKEYS.KEYREL.PRED smelte_v ].

smil-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "smil" >,
    SYNSEM.LKEYS.KEYREL.PRED "_smil_n_rel" ].

smile_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "smile" >,
    SYNSEM.LKEYS.KEYREL.PRED smile_v ].

småviltjakt-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "småviltjakt" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_småviltjakt_n_rel" ].

snakke_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "snakke" >,
    SYNSEM.LKEYS.KEYREL.PRED snakke_v ].

snart_func := func-word &
  [ STEM < "snart" >,
    SYNSEM.LKEYS.KEYREL.PRED snart_prd ].

snill-a := adj-lxm &
  [ STEM < "snill" >,
    SYNSEM.LKEYS.KEYREL.PRED "_snill_a_rel", 
    INFLECTION a1 ].

snø-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "snø" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_snø_n_rel" ].

snø_v := main-verb-lxm &
  [ INFLECTION v4,
    STEM < "snø" >,
    SYNSEM.LKEYS.KEYREL.PRED snø_v ].

snøball-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "snøball" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_snøball_n_rel" ].

Sogn-og-Fjordane-pn := pn-word &
  [ STEM < "Sogn","og","Fjordane" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sogn-og-Fjordane" ].

sognefjellet-pn := sg-comm-pn &
  [ STEM < "sognefjellet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sognefjellet" ].

sognefjellhytta-pn := sg-comm-pn &
  [ STEM < "sognefjellhytta" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sognefjellhytta" ].

sognefjellsveien-pn := sg-comm-pn &
  [ STEM < "sognefjellsveien" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sognefjellsveien" ].

sol-n-comm := comm-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "sol" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sol_n_rel" ].

solaris-pn := sg-comm-pn &
  [ STEM < "solaris" >,
    SYNSEM.LKEYS.KEYREL.CARG "Solaris" ].

solsiden-pn := sg-comm-pn &
  [ STEM < "solsiden" >,
    SYNSEM.LKEYS.KEYREL.CARG "SOLSIDEN" ].

som_func := func-word &
  [ STEM < "som" >,
    SYNSEM.LKEYS.KEYREL.PRED som_prd ].

som-oftest_func := func-word &
  [ STEM < "som","oftest" >,
    SYNSEM.LKEYS.KEYREL.PRED som*oftest_prd ].

som*om_func := func-word &
  [ STEM < "som", "om" >,
    SYNSEM.LKEYS.KEYREL.PRED som*om_prd ].

som-regel_func := func-word &
  [ STEM < "som","regel" >,
    SYNSEM.LKEYS.KEYREL.PRED som*regel_prd ].

som_restr_relpron := rel-compl-word &
  [ STEM < "som" > ].

som_nonrestr_relpron := nonrestr-rel-compl-word &
  [ STEM < ",", "som" > ].

sommer-n-masc := masc-mod-noun-lxm &
  [ STEM < "sommer" >,
    SYNSEM.LKEYS.KEYREL.PRED _sommer_n_rel,
    INFLECTION m1 ].

sommertrase-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "sommertrase" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_sommertrase_n_rel" ].

sove_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "sove" >,
    SYNSEM.LKEYS.KEYREL.PRED sove_v ].

sparke_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "sparke" >,
    SYNSEM.LKEYS.KEYREL.PRED sparke_v ].

spasere_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "spasere" >,
    SYNSEM.LKEYS.KEYREL.PRED spasere_v ].

speile_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "speile" >,
    SYNSEM.LKEYS.KEYREL.PRED speile_v ].

spiller-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m2,
    STEM < "spiller" >,
    SYNSEM.LKEYS.KEYREL.PRED "_spiller_n_rel" ].

spise_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "spise" >,
    SYNSEM.LKEYS.KEYREL.PRED spise_v ].

spiterstulen-pn := sg-comm-pn &
  [ STEM < "spiterstulen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Spiterstulen" ].

spørre_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "spørre" >,
    SYNSEM.LKEYS.KEYREL.PRED spørre_v ].

start-punct := start-word &
  [ STEM < "^" > ].

start+hyphen-punct := start-word &
  [ STEM < "^", "–" > ].

stat-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "stat" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED message_m_rel ].

statsgrunn-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "statsgrunn" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_statsgrunn_n_rel" ].

statsråd-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "statsråd" >,
    SYNSEM.LKEYS.KEYREL.PRED "_statsråd_n_rel",
    INFLECTION m1 ].

sted-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n2,
    STEM < "sted" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sted_n_rel" ].

steinbu-pn := sg-comm-pn &
  [ STEM < "steinbu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Steinbu" ].

steke_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "steke" >,
    SYNSEM.LKEYS.KEYREL.PRED steke_v ].

sten-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "sten" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_sten_n_rel" ].

sti-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "sti" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_sti_n_rel" ].

stol-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "stol" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_stol_n_rel" ].

stole_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "stole" >,
    SYNSEM.LKEYS.KEYREL.PRED stole_v ].

stor-a := adj-lxm &
  [ STEM < "stor" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_stor_a_rel" ].

stormaskin-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "stormaskin" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_stormaskin_n_rel" ].

storslått-a := adj-lxm &
  [ INFLECTION a2,
    STEM < "storslått" >,
    SYNSEM.LKEYS.KEYREL.PRED "_storslått_a_rel" ].

student-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "student" >,
    SYNSEM.LKEYS.KEYREL.PRED "_student_n_rel" ].

studium-n-neut := neut-mwe-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "studium" >,
    SYNSEM.LKEYS.KEYREL.PRED studium_prd ].

stue-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "stue" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_stue_n_rel" ].

stue_v := main-verb-lxm &
  [ STEM < "stue" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED stue_v ].

stå-n-ord := mod-noun-word &
  [ STEM < "stå" >,
    SYNSEM.LKEYS.KEYREL.PRED "_stå_n_rel" ].

stå-aux := pass-aux-lxm &
  [ STEM < "stå" >,
    INFLECTION v2,
    SYNSEM.LKEYS.KEYREL.PRED "parg_d_stå_rel" ].

stå_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "stå" >,
    SYNSEM.LKEYS.KEYREL.PRED stå_v ].

stølsdalen-pn := sg-comm-pn &
  [ STEM < "stølsdalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Stølsdalen" ].

sum-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "sum" >,
    INFLECTION m3,
    SYNSEM.LKEYS.KEYREL.PRED "_sum_n_rel" ].

sv-pn := sg-comm-pn &
  [ STEM < "SV" >,
    SYNSEM.LKEYS.KEYREL.CARG "SV" ].

svamp-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "svamp" >,
    SYNSEM.LKEYS.KEYREL.PRED "_svamp_n_rel" ].

svart-a := adj-lxm &
  [ STEM < "svart" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_svart_a_rel" ].

svart-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "svart" >,
    SYNSEM.LKEYS.KEYREL.PRED "_svart_n_rel",
    INFLECTION no-infl ].

svært_func := func-word &
  [ STEM < "svært" >,
    SYNSEM.LKEYS.KEYREL.PRED svært_prd ].

syk-a := adj-lxm &
  [ INFLECTION a1,
    STEM < "syk" >,
    SYNSEM.LKEYS.KEYREL.PRED "_syk_a_rel" ].

synes_v := main-verb-lxm &
  [ STEM < "synes" >,
    INFLECTION v1, 
    SYNSEM.LKEYS.KEYREL.PRED synes_v ].

synspunkt-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "synspunkt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_synspunkt_n_rel",
    INFLECTION n1-n2 ].

sytten-card := pl-card-word &
  [ STEM < "sytten" >,
    LEXREL.LIST.FIRST.CARG "17_card_rel" ].

syttende-card := sg-def-card-word &
  [ STEM < "syttende" >,
    LEXREL.LIST.FIRST.CARG "syttende_rel" ].

sytti-card := pl-card-word &
  [ STEM < "sytti" >,
    LEXREL.LIST.FIRST.CARG "70_rel" ].

syttiandre-card := sg-def-card-word &
  [ STEM < "syttiandre" >,
    LEXREL.LIST.FIRST.CARG "72-def_rel" ].

syttien-card := pl-card-word &
  [ STEM < "syttien" >,
    LEXREL.LIST.FIRST.CARG "71_rel" ].

syttiende-card := sg-def-card-word &
  [ STEM < "syttiende" >,
    LEXREL.LIST.FIRST.CARG "70-def_rel" ].

syttifem-card := pl-card-word &
  [ STEM < "syttifem" >,
    LEXREL.LIST.FIRST.CARG "75_rel" ].

syttifemte-card := sg-def-card-word &
  [ STEM < "syttifemte" >,
    LEXREL.LIST.FIRST.CARG "75-def_rel" ].

syttifire-card := pl-card-word &
  [ STEM < "syttifire" >,
    LEXREL.LIST.FIRST.CARG "74_rel" ].

syttifjerde-card := sg-def-card-word &
  [ STEM < "syttifjerde" >,
    LEXREL.LIST.FIRST.CARG "74-def_rel" ].

syttiførste-card := sg-def-card-word &
  [ STEM < "syttiførste" >,
    LEXREL.LIST.FIRST.CARG "71-def_rel" ].

syttini-card := pl-card-word &
  [ STEM < "syttini" >,
    LEXREL.LIST.FIRST.CARG "79_rel" ].

syttiniende-card := sg-def-card-word &
  [ STEM < "syttiniende" >,
    LEXREL.LIST.FIRST.CARG "79-def_rel" ].

syttiseks-card := pl-card-word &
  [ STEM < "syttiseks" >,
    LEXREL.LIST.FIRST.CARG "76_rel" ].

syttisjette-card := sg-def-card-word &
  [ STEM < "syttisjette" >,
    LEXREL.LIST.FIRST.CARG "76-def_rel" ].

syttisju-card := pl-card-word &
  [ STEM < "syttisju" >,
    LEXREL.LIST.FIRST.CARG "77_rel" ].

syttisjuende-card := sg-def-card-word &
  [ STEM < "syttisjuende" >,
    LEXREL.LIST.FIRST.CARG "77-def_rel" ].

syttito-card := pl-card-word &
  [ STEM < "syttito" >,
    LEXREL.LIST.FIRST.CARG "72_rel" ].

syttitre-card := pl-card-word &
  [ STEM < "syttitre" >,
    LEXREL.LIST.FIRST.CARG "73_rel" ].

syttitredje-card := sg-def-card-word &
  [ STEM < "syttitredje" >,
    LEXREL.LIST.FIRST.CARG "73-def_rel" ].

syttiåtte-card := pl-card-word &
  [ STEM < "syttiåtte" >,
    LEXREL.LIST.FIRST.CARG "78_rel" ].

syttiåttende-card := sg-def-card-word &
  [ STEM < "syttiåttende" >,
    LEXREL.LIST.FIRST.CARG "78-def_rel" ].

syv-card := pl-card-word &
  [ STEM < "syv" >,
    LEXREL.LIST.FIRST.CARG "7_card_rel" ].

syvende-card := sg-def-card-word &
  [ STEM < "syvende" >,
    LEXREL.LIST.FIRST.CARG "syvende_rel" ].

så := conj-word &
  [ STEM < "så" >,
    SYNSEM.LKEYS.KEYREL.PRED "_så_c_rel" ].

så-cont := continuative-word &
  [ STEM < "så" >,
    SYNSEM.LKEYS.KEYREL.PRED "_så_disc_rel" ].

;; FIXME
så_deg := så-mod-adj-pos-word &
  [ STEM < "så" >,
    SYNSEM.LKEYS.KEYREL.PRED _så_deg_rel ].

så-langt_func := func-word &
  [ STEM < "så","langt" >,
    SYNSEM.LKEYS.KEYREL.PRED så*langt_prd ].

så_func := func-word &
  [ STEM < "så" >,
    SYNSEM.LKEYS.KEYREL.PRED så_prd ].

så_v := main-verb-lxm &
  [ STEM < "så" >,
    INFLECTION v4,
    SYNSEM.LKEYS.KEYREL.PRED så_v ].

sånn-a := adj-lxm &
  [ INFLECTION a1,
    STEM < "sånn" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sånn_a_rel" ].

sånn_func := func-word &
  [ STEM < "sånn" >,
    SYNSEM.LKEYS.KEYREL.PRED sånn_prd ].

sår-a := adj-lxm &
  [ STEM < "sår" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_sår_a_rel" ].

sår-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "sår" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sår_n_rel" ].

søndag_func := func-word &
  [ STEM < "søndag" >,
    SYNSEM.LKEYS.KEYREL.PRED søndag_prd ].

søndag-n-masc := masc-mod-noun-lxm &
  [ STEM < "søndag" >,
    SYNSEM.LKEYS.KEYREL.PRED _søndag_n_rel,
    INFLECTION m1 ].

søndre-a := adj-lxm &
  [ STEM < "søndre" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_søndre_a_rel" ].

søndre-pn := sg-comm-pn &
  [ STEM < "søndre" >,
    SYNSEM.LKEYS.KEYREL.CARG "SøNDRE" ].

sør-pn := sg-neut-pn &
  [ STEM < "sør" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sør" ].

t-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "t" >,
    SYNSEM.LKEYS.KEYREL.PRED "_t_n_rel" ].

ta_v := main-verb-lxm &
 [ INFLECTION v1,
    STEM < "ta" >,
    SYNSEM.LKEYS.KEYREL.PRED ta_v ].   

tak-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "tak" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tak_n_rel" ].

te-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "te" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_te_n_rel" ].

telefon-card-select-word := card-select-word &
  [ STEM < "telefon" >,
    SYNSEM.LKEYS.KEYREL.PRED "_telefon_rel" ].

telefon-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "telefon" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_telefon_n_rel" ].

temmelig-adv := mod-adj-pos-word &
  [ STEM < "temmelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_temmelig_mod_rel" ].

tenke_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "tenke" >,
    SYNSEM.LKEYS.KEYREL.PRED tenke_v ].

the-pn := sg-comm-pn &
  [ STEM < "the" >,
    SYNSEM.LKEYS.KEYREL.CARG "The" ].

thomas-angells-gate-pn := sg-comm-pn &
  [ STEM < "thomas", "angells", "gate" >,
    SYNSEM.LKEYS.KEYREL.CARG "THOMAS ANGELLS GATE" ].

ti-card := pl-card-word &
  [ STEM < "ti" >,
    LEXREL.LIST.FIRST.CARG "10_card_rel" ].

tidlig-a := adj-lxm &
  [ INFLECTION a2,
    STEM < "tidlig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tidlig_a_rel" ].

tidsskrift-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "tidsskrift" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tidsskrift_n_rel",
    INFLECTION n1-n2 ].

tiende-card := sg-def-card-word &
  [ STEM < "tiende" >,
    LEXREL.LIST.FIRST.CARG "tiende_rel" ].

tiger-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "tiger" >,
    INFLECTION m2,
    SYNSEM.LKEYS.KEYREL.PRED "_tiger_n_rel" ].

tiger-tiger-pn := sg-comm-pn &
  [ STEM < "tiger", "tiger" >,
    SYNSEM.LKEYS.KEYREL.CARG "TIGER TIGER" ].

; til-comp := cond-complementizer-word &
;   [ STEM < "til" >,
;     SYNSEM.LKEYS.KEYREL.PRED til-c,
;                    CONT.RELS <! [ PRED "til_rel" ] !> ] ].


tilbake_func := func-word &
  [ STEM < "tilbake" >,
    SYNSEM.LKEYS.KEYREL.PRED tilbake_prd ].

tilfelle-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "tilfelle" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tilfelle_n_rel",
    INFLECTION n2 ].

tilføre_v := main-verb-lxm &
  [ STEM < "tilføre" >,
    INFLECTION v2, 
    SYNSEM.LKEYS.KEYREL.PRED tilføre_v ].

tilkomme_v := trans-verb-lxm &
  [ INFLECTION v1,
    STEM < "tilkomme" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tilkomme_12_rel" ].

tiltrenge_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "tiltrenge" >,
    SYNSEM.LKEYS.KEYREL.PRED tiltrenge_v ].

tirsdag_func := func-word &
  [ STEM < "tirsdag" >,
    SYNSEM.LKEYS.KEYREL.PRED tirsdag_prd ].

tirsdag-n-masc := masc-mod-noun-lxm &
  [ STEM < "tirsdag" >,
    SYNSEM.LKEYS.KEYREL.PRED _tirsdag_n_rel,
    INFLECTION m1 ].

tjue-card := pl-card-word &
  [ STEM < "tjue" >,
    LEXREL.LIST.FIRST.CARG "20_rel" ].

tjueandre-card := sg-def-card-word &
  [ STEM < "tjueandre" >,
    LEXREL.LIST.FIRST.CARG "22-def_rel" ].

tjueen-card := pl-card-word &
  [ STEM < "tjueen" >,
    LEXREL.LIST.FIRST.CARG "21_rel" ].

tjuefem-card := pl-card-word &
  [ STEM < "tjuefem" >,
    LEXREL.LIST.FIRST.CARG "25_rel" ].

tjuefemte-card := sg-def-card-word &
  [ STEM < "tjuefemte" >,
    LEXREL.LIST.FIRST.CARG "25-def_rel" ].

tjuefire-card := pl-card-word &
  [ STEM < "tjuefire" >,
    LEXREL.LIST.FIRST.CARG "24_rel" ].

tjuefjerde-card := sg-def-card-word &
  [ STEM < "tjuefjerde" >,
    LEXREL.LIST.FIRST.CARG "24-def_rel" ].

tjueførste-card := sg-def-card-word &
  [ STEM < "tjueførste" >,
    LEXREL.LIST.FIRST.CARG "21-def_rel" ].

tjuende-card := sg-def-card-word &
  [ STEM < "tjuende" >,
    LEXREL.LIST.FIRST.CARG "20-def_rel" ].

tjueni-card := pl-card-word &
  [ STEM < "tjueni" >,
    LEXREL.LIST.FIRST.CARG "29_rel" ].

tjueniende-card := sg-def-card-word &
  [ STEM < "tjueniende" >,
    LEXREL.LIST.FIRST.CARG "29-def_rel" ].

tjueseks-card := pl-card-word &
  [ STEM < "tjueseks" >,
    LEXREL.LIST.FIRST.CARG "26_rel" ].

tjuesjette-card := sg-def-card-word &
  [ STEM < "tjuesjette" >,
    LEXREL.LIST.FIRST.CARG "26-def_rel" ].

tjuesju-card := pl-card-word &
  [ STEM < "tjuesju" >,
    LEXREL.LIST.FIRST.CARG "27_rel" ].

tjuesjuende-card := sg-def-card-word &
  [ STEM < "tjuesjuende" >,
    LEXREL.LIST.FIRST.CARG "27-def_rel" ].

tjueto-card := pl-card-word &
  [ STEM < "tjueto" >,
    LEXREL.LIST.FIRST.CARG "22_rel" ].

tjuetre-card := pl-card-word &
  [ STEM < "tjuetre" >,
    LEXREL.LIST.FIRST.CARG "23_rel" ].

tjuetredje-card := sg-def-card-word &
  [ STEM < "tjuetredje" >,
    LEXREL.LIST.FIRST.CARG "23-def_rel" ].

tjueåtte-card := pl-card-word &
  [ STEM < "tjueåtte" >,
    LEXREL.LIST.FIRST.CARG "28_rel" ].

tjueåttende-card := sg-def-card-word &
  [ STEM < "tjueåttende" >,
    LEXREL.LIST.FIRST.CARG "28-def_rel" ].

tjørnholåa-pn := sg-comm-pn &
  [ STEM < "tjørnholåa" >,
    SYNSEM.LKEYS.KEYREL.CARG "Tjørnholåa" ].

tlf-card-select-word := card-select-word &
  [ STEM < "tlf" >,
    SYNSEM.LKEYS.KEYREL.PRED "_telefon_rel" ].

to-card := pl-card-word &
  [ STEM < "to" >,
    LEXREL.LIST.FIRST.CARG "2_card_rel" ].

2-card := pl-card-word &
  [ STEM < "2" >,
    LEXREL.LIST.FIRST.CARG "2_card_rel" ].

; to-card-def := pl-def-card-word &
;   [ STEM < "to" >,
;     LEXREL.LIST.FIRST.CARG "2_card_rel" ].

; toe_v := main-verb-lxm &
;   [ STEM < "toe" >,
;     INFLECTION v1, 
;     SYNSEM.LKEYS.KEYREL.PRED "_toe_12_rel" ].

tolv-card := pl-card-word &
  [ STEM < "tolv" >,
    LEXREL.LIST.FIRST.CARG "12_card_rel" ].

tolvte-card := sg-def-card-word &
  [ STEM < "tolvte" >,
    LEXREL.LIST.FIRST.CARG "tolvte_rel" ].

tom-a := adj-lxm &
  [ STEM < "tom" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tom_a_rel", 
    INFLECTION a1 ].

torfinnsbu-pn := sg-comm-pn &
  [ STEM < "torfinnsbu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Torfinnsbu" ].

torg-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "torg" >,
    SYNSEM.LKEYS.KEYREL.PRED "_torg_n_rel" ].

torsdag_func := func-word &
  [ STEM < "torsdag" >,
    SYNSEM.LKEYS.KEYREL.PRED torsdag_prd ].

torsdag-n-masc := masc-mod-noun-lxm &
  [ STEM < "torsdag" >,
    SYNSEM.LKEYS.KEYREL.PRED _torsdag_n_rel,
    INFLECTION m1 ].

tosk-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "tosk" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_tosk_n_rel" ].

trapp-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "trapp" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_trapp_n_rel" ].

; tre-card := pl-card-word &
;   [ STEM < "tre" >,
;     LEXREL.LIST.FIRST.CARG "3_card_rel" ].

; tre-digit := digit-word &
;   [ STEM < "_GENERIC_CARD_NE_" > ].

tre-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "tre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tre_n_rel" ].

tre_v := main-verb-lxm &
  [ STEM < "tre" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED tre_v ].

tre-card := pl-card-word &
  [ STEM < "tre" >,
    LEXREL.LIST.FIRST.CARG "3_rel" ].


tredje-card := sg-def-card-word &
  [ STEM < "tredje" >,
    LEXREL.LIST.FIRST.CARG "tredje_rel" ].

trekke_v := main-verb-lxm &
  [ STEM <"trekke">,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED trekke_v ].

tretten-card := pl-card-word &
  [ STEM < "tretten" >,
    LEXREL.LIST.FIRST.CARG "13_card_rel" ].

trettende-card := sg-def-card-word &
  [ STEM < "trettende" >,
    LEXREL.LIST.FIRST.CARG "trettende_rel" ].

tretti-card := pl-card-word &
  [ STEM < "tretti" >,
    LEXREL.LIST.FIRST.CARG "30_rel" ].

trettiandre-card := sg-def-card-word &
  [ STEM < "trettiandre" >,
    LEXREL.LIST.FIRST.CARG "32-def_rel" ].

trettien-card := pl-card-word &
  [ STEM < "trettien" >,
    LEXREL.LIST.FIRST.CARG "31_rel" ].

trettiende-card := sg-def-card-word &
  [ STEM < "trettiende" >,
    LEXREL.LIST.FIRST.CARG "30-def_rel" ].

trettifem-card := pl-card-word &
  [ STEM < "trettifem" >,
    LEXREL.LIST.FIRST.CARG "35_rel" ].

trettifemte-card := sg-def-card-word &
  [ STEM < "trettifemte" >,
    LEXREL.LIST.FIRST.CARG "35-def_rel" ].

trettifire-card := pl-card-word &
  [ STEM < "trettifire" >,
    LEXREL.LIST.FIRST.CARG "34_rel" ].

trettifjerde-card := sg-def-card-word &
  [ STEM < "trettifjerde" >,
    LEXREL.LIST.FIRST.CARG "34-def_rel" ].

trettiførste-card := sg-def-card-word &
  [ STEM < "trettiførste" >,
    LEXREL.LIST.FIRST.CARG "31-def_rel" ].

trettini-card := pl-card-word &
  [ STEM < "trettini" >,
    LEXREL.LIST.FIRST.CARG "39_rel" ].

trettiniende-card := sg-def-card-word &
  [ STEM < "trettiniende" >,
    LEXREL.LIST.FIRST.CARG "39-def_rel" ].

trettiseks-card := pl-card-word &
  [ STEM < "trettiseks" >,
    LEXREL.LIST.FIRST.CARG "36_rel" ].

trettisjette-card := sg-def-card-word &
  [ STEM < "trettisjette" >,
    LEXREL.LIST.FIRST.CARG "36-def_rel" ].

trettisju-card := pl-card-word &
  [ STEM < "trettisju" >,
    LEXREL.LIST.FIRST.CARG "37_rel" ].

trettisjuende-card := sg-def-card-word &
  [ STEM < "trettisjuende" >,
    LEXREL.LIST.FIRST.CARG "37-def_rel" ].

trettito-card := pl-card-word &
  [ STEM < "trettito" >,
    LEXREL.LIST.FIRST.CARG "32_rel" ].

trettitre-card := pl-card-word &
  [ STEM < "trettitre" >,
    LEXREL.LIST.FIRST.CARG "33_rel" ].

trettitredje-card := sg-def-card-word &
  [ STEM < "trettitredje" >,
    LEXREL.LIST.FIRST.CARG "33-def_rel" ].

trettiåtte-card := pl-card-word &
  [ STEM < "trettiåtte" >,
    LEXREL.LIST.FIRST.CARG "38_rel" ].

trettiåttende-card := sg-def-card-word &
  [ STEM < "trettiåttende" >,
    LEXREL.LIST.FIRST.CARG "38-def_rel" ].

trille-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "trille" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_trille_n_rel" ].

trille_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "trille" >,
    SYNSEM.LKEYS.KEYREL.PRED trille_v ].

tro-a := adj-lxm &
  [ STEM < "tro" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_tro_a_rel" ].

tro-n-fem := comm-mwe-count-noun-lxm &
  [ STEM < "tro" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED tro_prd ].

tro_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "tro" >,
    SYNSEM.LKEYS.KEYREL.PRED tro_v ].

trollheimen-pn := sg-comm-pn &
  [ STEM < "trollheimen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Trollheimen" ].

trondheim-filmklubb-pn := sg-comm-pn &
  [ STEM < "trondheim", "filmklubb" >,
    SYNSEM.LKEYS.KEYREL.CARG "TRONDHEIM FILMKLUBB" ].

trondheim-pn := sg-comm-pn &
  [ STEM < "trondheim" >,
    SYNSEM.LKEYS.KEYREL.CARG "TRONDHEIM" ].

trondheim-torg-pn := sg-neut-pn &
  [ STEM < "trondheim", "torg" >,
    SYNSEM.LKEYS.KEYREL.CARG "TRONDHEIM TORG" ].

true_v := main-verb-lxm &
  [ STEM < "true" >,
    SYNSEM.LKEYS.KEYREL.PRED true_v ].

tur-n-masc := masc-mwe-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "tur" >,
    SYNSEM.LKEYS.KEYREL.PRED tur_prd ].

turiststasjon-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "turiststasjon" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_turiststasjon_n_rel" ].

turmål-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "turmål" >,
    SYNSEM.LKEYS.KEYREL.PRED "_turmål_n_rel",
    INFLECTION n1 ].

turtagrø-pn := sg-comm-pn &
  [ STEM < "turtagrø" >,
    SYNSEM.LKEYS.KEYREL.CARG "Turtagrø" ].

TV-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "TV" >,
    SYNSEM.LKEYS.KEYREL.PRED "_TV_n_rel" ].

tvile_v := main-verb-lxm &
  [ STEM < "tvile" >,
    SYNSEM.LKEYS.KEYREL.PRED tvile_v ].

twoplusdigitersatz-word := digit-word &
  [ STEM < "twoplusdigitsersatz" >].

twoplusdigitersatzdef := sg-def-card-word &
  [ STEM < "twoplusdigitsersatzdef" > ].

tykkes_v := main-verb-lxm &
  [ STEM < "tykkes" >,
    INFLECTION v1, 
    SYNSEM.LKEYS.KEYREL.PRED tykkes_v ].

tykne_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "tykne" >,
    SYNSEM.LKEYS.KEYREL.PRED tykne_v ].

type-n-masc := masc-mwe-count-noun-lxm &
  [ STEM < "type" >,
    SYNSEM.LKEYS.KEYREL.PRED type_prd,
    INFLECTION m1 ].

tørre_v := main-verb-lxm &
  [ STEM < "tørre" >,
    INFLECTION v1, 
    SYNSEM.LKEYS.KEYREL.PRED tørre_v ].

uansett_func := func-word &
  [ STEM < "uansett" >,
    SYNSEM.LKEYS.KEYREL.PRED uansett_prd ].

uffa-pn := sg-comm-pn &
  [ STEM < "uffa" >,
    SYNSEM.LKEYS.KEYREL.CARG "UFFA" ].

umoden-a := adj-lxm &
  [ INFLECTION a5a,
    STEM < "umoden" >,
    SYNSEM.LKEYS.KEYREL.PRED "_umoden_a_rel" ].

under-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "under" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_under_n_rel" ].

under_func := func-word &
  [ STEM < "under" >,
    SYNSEM.LKEYS.KEYREL.PRED under_prd ].

unna_func := func-word &
  [ STEM < "unna" >,
    SYNSEM.LKEYS.KEYREL.PRED unna_prd ].

ung-a := adj-lxm &
  [ STEM < "ung" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ung_a_rel", 
    INFLECTION a1 ].

unix-pn := sg-comm-pn &
  [ STEM < "unix" >,
    SYNSEM.LKEYS.KEYREL.CARG "Unix" ].

unne_v := main-verb-lxm &
  [ STEM < "unne" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED unne_v ].

unnslippe_v := main-verb-lxm &
  [ STEM < "unnslippe" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED unnslippe_v ].

usagt-a := adj-lxm &
  [ INFLECTION a2,
    STEM < "usagt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_usagt_a_rel" ].

ut_func := func-word &
  [ STEM < "ut" >,
    SYNSEM.LKEYS.KEYREL.PRED ut_prd ].

uten_func := func-word &
  [ STEM < "uten" >,
    SYNSEM.LKEYS.KEYREL.PRED uten_prd ].

utenfor_func := func-word &
  [ STEM < "utenfor" >,
    SYNSEM.LKEYS.KEYREL.PRED utenfor_prd ].

utenlands_func := func-word &
  [ STEM < "utenlands" >,
    SYNSEM.LKEYS.KEYREL.PRED utenlands_prd ].

utenom_func := func-word &
  [ STEM < "utenom" >,
    SYNSEM.LKEYS.KEYREL.PRED utenom_prd ].

utested-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n2,
    STEM < "utested" >,
    SYNSEM.LKEYS.KEYREL.PRED "_utested_n_rel" ].

utladalen-pn := sg-comm-pn &
  [ STEM < "utladalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Utladalen" ].

utover_func := func-word &
  [ STEM < "utover" >,
    SYNSEM.LKEYS.KEYREL.PRED utover_prd ].

utstråle_v := trans-verb-lxm &
  [ INFLECTION v2,
    STEM < "utstråle" >,
    SYNSEM.LKEYS.KEYREL.PRED "_utstråle_12_rel" ].

uttale-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "uttale" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_uttale_n_rel" ].

uttale_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "uttale" >,
    SYNSEM.LKEYS.KEYREL.PRED uttale_v ].

uvanlig-a := adj-lxm &
  [ INFLECTION a2,
    STEM < "uvanlig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_uvanlig_a_rel" ].

uvanlig_func := func-word &
  [ STEM < "uvanlig" >,
    SYNSEM.LKEYS.KEYREL.PRED uvanlig_prd ].

valdresflya-pn := sg-comm-pn &
  [ STEM < "valdresflya" >,
    SYNSEM.LKEYS.KEYREL.CARG "Valdresflya" ].

valg-n-neut := neut-mwe-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "valg" >,
    SYNSEM.LKEYS.KEYREL.PRED valg_prd ].

vanlig-a := adj-lxm &
  [ INFLECTION a2,
    STEM < "vanlig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vanlig_a_rel" ].

vanligvis_func := func-word &
  [ STEM < "vanligvis" >,
    SYNSEM.LKEYS.KEYREL.PRED vanligvis_prd ].

vann-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "vann" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_vann_n_rel" ].

vannflate-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "vannflate" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_vannflate_n_rel" ].

vareutvalg-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1,
    STEM < "vareutvalg" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vareutvalg_n_rel" ].

varm-sjokolade-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "varm", "sjokolade" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_varm-sjokolade_n_rel" ].

varme-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "varme" >,
    SYNSEM.LKEYS.KEYREL.PRED "_varme_n_rel" ].

varme_v := main-verb-lxm &
  [ STEM < "varme" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED varme_v ].

ved-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "ved" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ved_n_rel" ].

vegg-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "vegg" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_vegg_n_rel" ].

vei-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "vei" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_vei_n_rel" ].

veie_v := main-verb-lxm &
  [ INFLECTION v3,
    STEM < "veie" >,
    SYNSEM.LKEYS.KEYREL.PRED veie_v ].

velkommen-word := verb_imp_word &
  [ STEM < "velkommen" >,
    SYNSEM.LKEYS.KEYREL.PRED velkommen_v ].

vellykket-a := adj-lxm &
  [ STEM < "vellykket" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vellykket_a_rel",
    INFLECTION a4a ].

venstre-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "venstre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_venstre_n_rel",
    INFLECTION n1 ].

vente_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "vente" >,
    SYNSEM.LKEYS.KEYREL.PRED vente_v ].

verden-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "verden" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_verden_n_rel" ].

verdsette_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "verdsette" >,
    SYNSEM.LKEYS.KEYREL.PRED verdsette_v ].

verken := func-word &
  [ STEM < "verken" >,
    SYNSEM.LKEYS.KEYREL.PRED verken_prd ].

hverken := func-word &
  [ STEM < "hverken" >,
    SYNSEM.LKEYS.KEYREL.PRED verken_prd ].

verre-mod := grade-mod-word &
  [ STEM < "verre" >,
    SYNSEM.LKEYS.KEYREL.PRED "verre_grade_rel" ].

verst-mod := grade-mod-word &
  [ STEM < "verst" >,
    SYNSEM.LKEYS.KEYREL.PRED "verst_grade_rel" ].

vest-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "vest" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_vest_n_rel" ].

vest-pn := sg-neut-pn &
  [ STEM < "vest" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vest" ].

vetledalen-pn := sg-comm-pn &
  [ STEM < "vetledalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vetledalen" ].

vetti-pn := sg-comm-pn &
  [ STEM < "vetti" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vetti" ].

vi-np := 1pl-pron &
  [ STEM < "vi" >,
    SYNSEM.LOCAL [ CAT [ CASE subj-case ] ] ].

ville-aux1 := inf-pres-modal-aux-lxm &
  [ INFLECTION v1,
    STEM < "ville" >,
    SYNSEM [ LOCAL [ MODAL [ BURDE #burde,
			     KUNNE #kunne,
			     MATTE #matte,
			     SKULLE #skulle,
			     VILLE - ],
		     CAT.VBL.LOCAL.MODAL [ BURDE #burde,
					   KUNNE #kunne,
					   MATTE #matte,
					   SKULLE #skulle,
					   VILLE + ] ],
	     LKEYS.KEYREL.PRED "_ville_aux_rel" ] ].

ville-aux2 := pret-perf-modal-aux-lxm &
  [ INFLECTION v1,
    STEM < "ville" >,
    SYNSEM [ LOCAL [ MODAL [ BURDE #burde,
			     KUNNE #kunne,
			     MATTE #matte,
			     SKULLE #skulle,
			     VILLE - ],
		     CAT.VBL.LOCAL.MODAL [ BURDE #burde,
					   KUNNE #kunne,
					   MATTE #matte,
					   SKULLE #skulle,
					   VILLE + ] ],
	     LKEYS.KEYREL.PRED "_ville_aux_rel" ] ].

ville_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "ville" >,
    SYNSEM.LKEYS.KEYREL.PRED ville_v ].

vindstyrke-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m1,
    STEM < "vindstyrke" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vindstyrke_n_rel" ].

vindu-n-neut := neut-cmp-count-noun-lxm &
  [ INFLECTION n1-n2,
    STEM < "vindu" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vindu_n_rel" ].

vinne_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "vinne" >,
    SYNSEM.LKEYS.KEYREL.PRED vinne_v ].

vinter-n-masc := masc-mod-noun-lxm &
  [ STEM < "vinter" >,
    SYNSEM.LKEYS.KEYREL.PRED _vinter_n_rel,
    INFLECTION m1 ].

virke_v := main-verb-lxm &
  [ STEM < "virke" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED virke_v ].

vise-n-fem := comm-cmp-count-noun-lxm &
  [ STEM < "vise" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_vise_n_rel" ].

vise_v := main-verb-lxm &
  [ STEM < "vise" >,
    INFLECTION v2, 
    SYNSEM.LKEYS.KEYREL.PRED vise_v ].

vite_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "vite" >,
    SYNSEM.LKEYS.KEYREL.PRED vite_v ].

vivaldi-pn := sg-comm-pn &
  [ STEM < "vivaldi" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vivaldi" ].

vole-pn := sg-comm-pn &
  [ STEM < "vole" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vole" ].

vår := comm-1pl-poss &		;
  [ STEM < "vår" > ].

vår-n-masc := masc-cmp-noun-lxm &
  [ STEM < "vår" >,
    SYNSEM.LKEYS.KEYREL.PRED _vår_n_rel,
    INFLECTION m1 ].

våre := pl-1pl-poss &
  [ STEM < "våre" > ].

vårt := neut-1pl-poss &
  [ STEM < "vårt" > ].

være-aux := pass-aux-lxm &
  [ STEM < "være" >,
    INFLECTION v2,
    SYNSEM.LKEYS.KEYREL.PRED "parg_d_være_rel" ].

være-non-modal-aux := non-modal-aux-lxm &
  [ STEM < "være" >,
    INFLECTION v2,
    SYNSEM.LKEYS.KEYREL.PRED "_være_aux_rel" ].

være_v := main-verb-lxm &
  [ STEM < "være" >,
    INFLECTION v2,
    SYNSEM.LKEYS.KEYREL.PRED være_v ].

; constraint.
; være-v2 := arg12-2_cp-ip1-np_le &
;   [ STEM < "være" >,
;     INFLECTION v2,
; 			     CMP2.LOCAL.CAT.HEAD atfull-infcompl-noun ],
;              LKEYS.KEYREL.PRED være_v ] ].

web-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "web" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_web_n_rel" ].

webersatz := mod-noun-word &
  [ STEM < "webersatz" > ].

windows-pn := sg-comm-pn &
  [ STEM < "windows" >,
    SYNSEM.LKEYS.KEYREL.CARG "Windows" ].

; x := unknown-word &
;   [ STEM < "x" >,
;     SYNSEM.LOCAL [ CAT.HEAD verb,
;                    CONT.RELS <! [ PRED "x-rel" ] !> ] ].

yearersatz := pl-card-word &
  [ STEM < "yearersatz" > ].

yksendalsbu-pn := sg-comm-pn &
  [ STEM < "yksendalsbu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Yksendalsbu" ].

ytre-a := adj-lxm &
  [ INFLECTION a2,
    STEM < "ytre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ytre_a_rel" ].

ytre-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "ytre" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_ytre_n_rel" ].

ytre_v := main-verb-lxm &
  [ STEM < "ytre" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED ytre_v ].

åker-n-masc := masc-cmp-count-noun-lxm &
  [ INFLECTION m2,
    STEM < "åker" >,
    SYNSEM.LKEYS.KEYREL.PRED "_åker_n_rel" ].

åpenbare_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "åpenbare" >,
    SYNSEM.LKEYS.KEYREL.PRED åpenbare_v ].

åpne_v := main-verb-lxm &
  [ INFLECTION v1,
    STEM < "åpne" >,
    SYNSEM.LKEYS.KEYREL.PRED åpne_v ].

år-n-neut := neut-mwe-count-noun-lxm &
  [ STEM <"år">,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED år_prd ].

åtte-card := pl-card-word &
  [ STEM < "åtte" >,
    LEXREL.LIST.FIRST.CARG "8_card_rel" ].

åttende-card := sg-def-card-word &
  [ STEM < "åttende" >,
    LEXREL.LIST.FIRST.CARG "åttende_rel" ].

åtti-card := pl-card-word &
  [ STEM < "åtti" >,
    LEXREL.LIST.FIRST.CARG "80_rel" ].

åttiandre-card := sg-def-card-word &
  [ STEM < "åttiandre" >,
    LEXREL.LIST.FIRST.CARG "82-def_rel" ].

åttien-card := pl-card-word &
  [ STEM < "åttien" >,
    LEXREL.LIST.FIRST.CARG "81_rel" ].

åttiende-card := sg-def-card-word &
  [ STEM < "åttiende" >,
    LEXREL.LIST.FIRST.CARG "80-def_rel" ].

åttifem-card := pl-card-word &
  [ STEM < "åttifem" >,
    LEXREL.LIST.FIRST.CARG "85_rel" ].

åttifemte-card := sg-def-card-word &
  [ STEM < "åttifemte" >,
    LEXREL.LIST.FIRST.CARG "85-def_rel" ].

åttifire-card := pl-card-word &
  [ STEM < "åttifire" >,
    LEXREL.LIST.FIRST.CARG "84_rel" ].

åttifjerde-card := sg-def-card-word &
  [ STEM < "åttifjerde" >,
    LEXREL.LIST.FIRST.CARG "84-def_rel" ].

åttiførste-card := sg-def-card-word &
  [ STEM < "åttiførste" >,
    LEXREL.LIST.FIRST.CARG "81-def_rel" ].

åttini-card := pl-card-word &
  [ STEM < "åttini" >,
    LEXREL.LIST.FIRST.CARG "89_rel" ].

åttiniende-card := sg-def-card-word &
  [ STEM < "åttiniende" >,
    LEXREL.LIST.FIRST.CARG "89-def_rel" ].

åttiseks-card := pl-card-word &
  [ STEM < "åttiseks" >,
    LEXREL.LIST.FIRST.CARG "86_rel" ].

åttisjette-card := sg-def-card-word &
  [ STEM < "åttisjette" >,
    LEXREL.LIST.FIRST.CARG "86-def_rel" ].

åttisju-card := pl-card-word &
  [ STEM < "åttisju" >,
    LEXREL.LIST.FIRST.CARG "87_rel" ].

åttisjuende-card := sg-def-card-word &
  [ STEM < "åttisjuende" >,
    LEXREL.LIST.FIRST.CARG "87-def_rel" ].

åttito-card := pl-card-word &
  [ STEM < "åttito" >,
    LEXREL.LIST.FIRST.CARG "82_rel" ].

åttitre-card := pl-card-word &
  [ STEM < "åttitre" >,
    LEXREL.LIST.FIRST.CARG "83_rel" ].

åttitredje-card := sg-def-card-word &
  [ STEM < "åttitredje" >,
    LEXREL.LIST.FIRST.CARG "83-def_rel" ].

åttiåtte-card := pl-card-word &
  [ STEM < "åttiåtte" >,
    LEXREL.LIST.FIRST.CARG "88_rel" ].

åttiåttende-card := sg-def-card-word &
  [ STEM < "åttiåttende" >,
    LEXREL.LIST.FIRST.CARG "88-def_rel" ].

òg-s-adv := up-univ-sadv-word &
  [ STEM < "òg" >,
    SYNSEM.LKEYS.KEYREL.PRED også_prd ].

øke_v := main-verb-lxm &
  [ INFLECTION v2,
    STEM < "øke" >,
    SYNSEM.LKEYS.KEYREL.PRED øke_v ].

øl-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "øl" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_øl_n_rel" ].

øl-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "øl" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_øl_n_rel" ].

ømhjertet-a := adj-lxm &
  [ INFLECTION a4a,
    STEM < "ømhjertet" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ømhjertet_a_rel" ].

ønske-n-neut := neut-mwe-count-noun-lxm &
  [ STEM < "ønske" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED ønske_prd ].

ønske_v := main-verb-lxm &
  [ STEM < "ønske" >,
    INFLECTION v1, 
    SYNSEM.LKEYS.KEYREL.PRED ønske_v ].

øst-pn := sg-neut-pn &
  [ STEM < "øst" >,
    SYNSEM.LKEYS.KEYREL.CARG "Øst" ].

østlig-a := adj-lxm &
  [ INFLECTION a2,
    STEM < "østlig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_østlig_a_rel" ].

øvre-a := adj-lxm &
  [ INFLECTION a2,
    STEM < "øvre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_øvre_a_rel" ].

;;; Missing proper nouns from the Jotunheimen corpus

Aajei-pn := pn-word &
  [ STEM < "Aajei" >,
    SYNSEM.LKEYS.KEYREL.CARG "Aajei" ].

Aand-pn := pn-word &
  [ STEM < "Aand" >,
    SYNSEM.LKEYS.KEYREL.CARG "Aand" ].

Aasmund-pn := pn-word &
  [ STEM < "Aasmund" >,
    SYNSEM.LKEYS.KEYREL.CARG "Aasmund" ].

Andrevatnet-pn := pn-word &
  [ STEM < "Andrevatnet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Andrevatnet" ].

Arbo-pn := pn-word &
  [ STEM < "Arbo" >,
    SYNSEM.LKEYS.KEYREL.CARG "Arbo" ].

Arentzbu-pn := pn-word &
  [ STEM < "Arentzbu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Arentzbu" ].

Axel-pn := pn-word &
  [ STEM < "Axel" >,
    SYNSEM.LKEYS.KEYREL.CARG "Axel" ].

Bakkeberg-pn := pn-word &
  [ STEM < "Bakkeberg" >,
    SYNSEM.LKEYS.KEYREL.CARG "Bakkeberg" ].

Bergaåntjern-pn := pn-word &
  [ STEM < "Bergaåntjern" >,
    SYNSEM.LKEYS.KEYREL.CARG "Bergaåntjern" ].

Berteau-pn := pn-word &
  [ STEM < "Berteau" >,
    SYNSEM.LKEYS.KEYREL.CARG "Berteau" ].

Besseter-pn := pn-word &
  [ STEM < "Besseter" >,
    SYNSEM.LKEYS.KEYREL.CARG "Besseter" ].

Bitihorn-pn := pn-word &
  [ STEM < "Bitihorn" >,
    SYNSEM.LKEYS.KEYREL.CARG "Bitihorn" ].

Bjørnstigen-pn := pn-word &
  [ STEM < "Bjørnstigen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Bjørnstigen" ].

Boeck-pn := pn-word &
  [ STEM < "Boeck" >,
    SYNSEM.LKEYS.KEYREL.CARG "Boeck" ].

Borgny-pn := pn-word &
  [ STEM < "Borgny" >,
    SYNSEM.LKEYS.KEYREL.CARG "Borgny" ].

Breheimen-pn := pn-word &
  [ STEM < "Breheimen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Breheimen" ].

Bruaas-pn := pn-word &
  [ STEM < "Bruaas" >,
    SYNSEM.LKEYS.KEYREL.CARG "Bruaas" ].

Bygdisheim-pn := pn-word &
  [ STEM < "Bygdisheim" >,
    SYNSEM.LKEYS.KEYREL.CARG "Bygdisheim" ].

Bøverbreen-pn := pn-word &
  [ STEM < "Bøverbreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Bøverbreen" ].

Bøverdalen-pn := pn-word &
  [ STEM < "Bøverdalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Bøverdalen" ].

Bøyesen-pn := pn-word &
  [ STEM < "Bøyesen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Bøyesen" ].

Charlotte-pn := pn-word &
  [ STEM < "Charlotte" >,
    SYNSEM.LKEYS.KEYREL.CARG "Charlotte" ].

Dryllin-pn := pn-word &
  [ STEM < "Dryllin" >,
    SYNSEM.LKEYS.KEYREL.CARG "Dryllin" ].

Drægni-pn := pn-word &
  [ STEM < "Drægni" >,
    SYNSEM.LKEYS.KEYREL.CARG "Drægni" ].

Dummdalen-pn := pn-word &
  [ STEM < "Dummdalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Dummdalen" ].

Dyrehaugsryggen-pn := pn-word &
  [ STEM < "Dyrehaugsryggen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Dyrehaugsryggen" ].

Dyrnesodden-pn := pn-word &
  [ STEM < "Dyrnesodden" >,
    SYNSEM.LKEYS.KEYREL.CARG "Dyrnesodden" ].

Eiliv-pn := pn-word &
  [ STEM < "Eiliv" >,
    SYNSEM.LKEYS.KEYREL.CARG "Eiliv" ].

Ekrehytta-pn := pn-word &
  [ STEM < "Ekrehytta" >,
    SYNSEM.LKEYS.KEYREL.CARG "Ekrehytta" ].

Elveseter-pn := pn-word &
  [ STEM < "Elveseter" >,
    SYNSEM.LKEYS.KEYREL.CARG "Elveseter" ].

Emanuel-pn := pn-word &
  [ STEM < "Emanuel" >,
    SYNSEM.LKEYS.KEYREL.CARG "Emanuel" ].

Falketind-pn := pn-word &
  [ STEM < "Falketind" >,
    SYNSEM.LKEYS.KEYREL.CARG "Falketind" ].

Fannaråkbreen-pn := pn-word &
  [ STEM < "Fannaråkbreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fannaråkbreen" ].

Fannaråknosa-pn := pn-word &
  [ STEM < "Fannaråknosa" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fannaråknosa" ].

Fannaråknosi-pn := pn-word &
  [ STEM < "Fannaråknosi" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fannaråknosi" ].

Ferdinand-pn := pn-word &
  [ STEM < "Ferdinand" >,
    SYNSEM.LKEYS.KEYREL.CARG "Ferdinand" ].

Fivlemyrane-pn := pn-word &
  [ STEM < "Fivlemyrane" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fivlemyrane" ].

Fjellhotell-pn := pn-word &
  [ STEM < "Fjellhotell" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fjellhotell" ].

Fjelli-pn := pn-word &
  [ STEM < "Fjelli" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fjelli" ].

Fjellradirne-pn := pn-word &
  [ STEM < "Fjellradirne" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fjellradirne" ].

Fleskedalen-pn := pn-word &
  [ STEM < "Fleskedalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fleskedalen" ].

Fleskedalsfossen-pn := pn-word &
  [ STEM < "Fleskedalsfossen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fleskedalsfossen" ].

Fondsfinans-pn := pn-word &
  [ STEM < "Fondsfinans" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fondsfinans" ].

Fortundalselva-pn := pn-word &
  [ STEM < "Fortundalselva" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fortundalselva" ].

Galdeberget-pn := pn-word &
  [ STEM < "Galdeberget" >,
    SYNSEM.LKEYS.KEYREL.CARG "Galdeberget" ].

Galdebergstjern-pn := pn-word &
  [ STEM < "Galdebergstjern" >,
    SYNSEM.LKEYS.KEYREL.CARG "Galdebergstjern" ].

Galdhøpiggmassivet-pn := pn-word &
  [ STEM < "Galdhøpiggmassivet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Galdhøpiggmassivet" ].

Geithø-pn := pn-word &
  [ STEM < "Geithø" >,
    SYNSEM.LKEYS.KEYREL.CARG "Geithø" ].

Gjendebuløypa-pn := pn-word &
  [ STEM < "Gjendebuløypa" >,
    SYNSEM.LKEYS.KEYREL.CARG "Gjendebuløypa" ].

Gjendestunga-pn := pn-word &
  [ STEM < "Gjendestunga" >,
    SYNSEM.LKEYS.KEYREL.CARG "Gjendestunga" ].

Gjertvassbøen-pn := pn-word &
  [ STEM < "Gjertvassbøen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Gjertvassbøen" ].

Gjertvassdalen-pn := pn-word &
  [ STEM < "Gjertvassdalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Gjertvassdalen" ].

Gjertvasstind-pn := pn-word &
  [ STEM < "Gjertvasstind" >,
    SYNSEM.LKEYS.KEYREL.CARG "Gjertvasstind" ].

Gjesingedalen-pn := pn-word &
  [ STEM < "Gjesingedalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Gjesingedalen" ].

Granfasta-pn := pn-word &
  [ STEM < "Granfasta" >,
    SYNSEM.LKEYS.KEYREL.CARG "Granfasta" ].

Gravafjellet-pn := pn-word &
  [ STEM < "Gravafjellet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Gravafjellet" ].

Grisletjørnene-pn := pn-word &
  [ STEM < "Grisletjørnene" >,
    SYNSEM.LKEYS.KEYREL.CARG "Grisletjørnene" ].

Gruvefjellet-pn := pn-word &
  [ STEM < "Gruvefjellet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Gruvefjellet" ].

Grønebergtjernet-pn := pn-word &
  [ STEM < "Grønebergtjernet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Grønebergtjernet" ].

Grønevatn-pn := pn-word &
  [ STEM < "Grønevatn" >,
    SYNSEM.LKEYS.KEYREL.CARG "Grønevatn" ].

Grønevatnet-pn := pn-word &
  [ STEM < "Grønevatnet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Grønevatnet" ].

Gudmundahl-pn := pn-word &
  [ STEM < "Gudmundahl" >,
    SYNSEM.LKEYS.KEYREL.CARG "Gudmundahl" ].

Guridalen-pn := pn-word &
  [ STEM < "Guridalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Guridalen" ].

Gynt-pn := pn-word &
  [ STEM < "Gynt" >,
    SYNSEM.LKEYS.KEYREL.CARG "Gynt" ].

Haavi-pn := pn-word &
  [ STEM < "Haavi" >,
    SYNSEM.LKEYS.KEYREL.CARG "Haavi" ].

Hagaberg-pn := pn-word &
  [ STEM < "Hagaberg" >,
    SYNSEM.LKEYS.KEYREL.CARG "Hagaberg" ].

Halli-pn := pn-word &
  [ STEM < "Halli" >,
    SYNSEM.LKEYS.KEYREL.CARG "Halli" ].

Hallvardson-pn := pn-word &
  [ STEM < "Hallvardson" >,
    SYNSEM.LKEYS.KEYREL.CARG "Hallvardson" ].

Harbardsbreen-pn := pn-word &
  [ STEM < "Harbardsbreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Harbardsbreen" ].

Haugseter-pn := pn-word &
  [ STEM < "Haugseter" >,
    SYNSEM.LKEYS.KEYREL.CARG "Haugseter" ].

Heftye-pn := pn-word &
  [ STEM < "Heftye" >,
    SYNSEM.LKEYS.KEYREL.CARG "Heftye" ].

Heggdal-pn := pn-word &
  [ STEM < "Heggdal" >,
    SYNSEM.LKEYS.KEYREL.CARG "Heggdal" ].

Helgedalen-pn := pn-word &
  [ STEM < "Helgedalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Helgedalen" ].

Hellstuguåa-pn := pn-word &
  [ STEM < "Hellstuguåa" >,
    SYNSEM.LKEYS.KEYREL.CARG "Hellstuguåa" ].

Herva-pn := pn-word &
  [ STEM < "Herva" >,
    SYNSEM.LKEYS.KEYREL.CARG "Herva" ].

Hestbrepiggane-pn := pn-word &
  [ STEM < "Hestbrepiggane" >,
    SYNSEM.LKEYS.KEYREL.CARG "Hestbrepiggane" ].

Hestbrepigger-pn := pn-word &
  [ STEM < "Hestbrepigger" >,
    SYNSEM.LKEYS.KEYREL.CARG "Hestbrepigger" ].

Hestdalshøgdi-pn := pn-word &
  [ STEM < "Hestdalshøgdi" >,
    SYNSEM.LKEYS.KEYREL.CARG "Hestdalshøgdi" ].

Hestevollen-pn := pn-word &
  [ STEM < "Hestevollen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Hestevollen" ].

Holåtindane-pn := pn-word &
  [ STEM < "Holåtindane" >,
    SYNSEM.LKEYS.KEYREL.CARG "Holåtindane" ].

Holåtinder-pn := pn-word &
  [ STEM < "Holåtinder" >,
    SYNSEM.LKEYS.KEYREL.CARG "Holåtinder" ].

Hotel-pn := pn-word &
  [ STEM < "Hotel" >,
    SYNSEM.LKEYS.KEYREL.CARG "Hotel" ].

Hurrungane-pn := pn-word &
  [ STEM < "Hurrungane" >,
    SYNSEM.LKEYS.KEYREL.CARG "Hurrungane" ].

Høgbrothøgda-pn := pn-word &
  [ STEM < "Høgbrothøgda" >,
    SYNSEM.LKEYS.KEYREL.CARG "Høgbrothøgda" ].

Høgebrotet-pn := pn-word &
  [ STEM < "Høgebrotet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Høgebrotet" ].

Høgevagltindar-pn := pn-word &
  [ STEM < "Høgevagltindar" >,
    SYNSEM.LKEYS.KEYREL.CARG "Høgevagltindar" ].

Høgvaglen-pn := pn-word &
  [ STEM < "Høgvaglen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Høgvaglen" ].

Høgvagltjønn-pn := pn-word &
  [ STEM < "Høgvagltjønn" >,
    SYNSEM.LKEYS.KEYREL.CARG "Høgvagltjønn" ].

Høgvagltjørnene-pn := pn-word &
  [ STEM < "Høgvagltjørnene" >,
    SYNSEM.LKEYS.KEYREL.CARG "Høgvagltjørnene" ].

Høystakktjernet-pn := pn-word &
  [ STEM < "Høystakktjernet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Høystakktjernet" ].

IV-pn := pn-word &
  [ STEM < "IV" >,
    SYNSEM.LKEYS.KEYREL.CARG "IV" ].

Jakhelln-pn := pn-word &
  [ STEM < "Jakhelln" >,
    SYNSEM.LKEYS.KEYREL.CARG "Jakhelln" ].

Jessie-pn := pn-word &
  [ STEM < "Jessie" >,
    SYNSEM.LKEYS.KEYREL.CARG "Jessie" ].

Jotunheimveien-pn := pn-word &
  [ STEM < "Jotunheimveien" >,
    SYNSEM.LKEYS.KEYREL.CARG "Jotunheimveien" ].

Juvflya-pn := pn-word &
  [ STEM < "Juvflya" >,
    SYNSEM.LKEYS.KEYREL.CARG "Juvflya" ].

Juvvatnet-pn := pn-word &
  [ STEM < "Juvvatnet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Juvvatnet" ].

Kaldedalsbræerne-pn := pn-word &
  [ STEM < "Kaldedalsbræerne" >,
    SYNSEM.LKEYS.KEYREL.CARG "Kaldedalsbræerne" ].

Kalvåhøgda-pn := pn-word &
  [ STEM < "Kalvåhøgda" >,
    SYNSEM.LKEYS.KEYREL.CARG "Kalvåhøgda" ].

Keilhau-pn := pn-word &
  [ STEM < "Keilhau" >,
    SYNSEM.LKEYS.KEYREL.CARG "Keilhau" ].

Keilhaus-pn := pn-word &
  [ STEM < "Keilhaus" >,
    SYNSEM.LKEYS.KEYREL.CARG "Keilhaus" ].

Keisaren-pn := pn-word &
  [ STEM < "Keisaren" >,
    SYNSEM.LKEYS.KEYREL.CARG "Keisaren" ].

Keisarpasset-pn := pn-word &
  [ STEM < "Keisarpasset" >,
    SYNSEM.LKEYS.KEYREL.CARG "Keisarpasset" ].

Kierulf-pn := pn-word &
  [ STEM < "Kierulf" >,
    SYNSEM.LKEYS.KEYREL.CARG "Kierulf" ].

Kjellargluggen-pn := pn-word &
  [ STEM < "Kjellargluggen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Kjellargluggen" ].

Kjellfrid-pn := pn-word &
  [ STEM < "Kjellfrid" >,
    SYNSEM.LKEYS.KEYREL.CARG "Kjellfrid" ].

Kjerringhetta-pn := pn-word &
  [ STEM < "Kjerringhetta" >,
    SYNSEM.LKEYS.KEYREL.CARG "Kjerringhetta" ].

Kleppeskaret-pn := pn-word &
  [ STEM < "Kleppeskaret" >,
    SYNSEM.LKEYS.KEYREL.CARG "Kleppeskaret" ].

Knutseggi-pn := pn-word &
  [ STEM < "Knutseggi" >,
    SYNSEM.LKEYS.KEYREL.CARG "Knutseggi" ].

Knutsholstind-pn := pn-word &
  [ STEM < "Knutsholstind" >,
    SYNSEM.LKEYS.KEYREL.CARG "Knutsholstind" ].

Koldedalen-pn := pn-word &
  [ STEM < "Koldedalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Koldedalen" ].

Kongsdøla-pn := pn-word &
  [ STEM < "Kongsdøla" >,
    SYNSEM.LKEYS.KEYREL.CARG "Kongsdøla" ].

Krossboden-pn := pn-word &
  [ STEM < "Krossboden" >,
    SYNSEM.LKEYS.KEYREL.CARG "Krossboden" ].

Krosshø-pn := pn-word &
  [ STEM < "Krosshø" >,
    SYNSEM.LKEYS.KEYREL.CARG "Krosshø" ].

Kvitevatnet-pn := pn-word &
  [ STEM < "Kvitevatnet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Kvitevatnet" ].

Kyrkja-pn := pn-word &
  [ STEM < "Kyrkja" >,
    SYNSEM.LKEYS.KEYREL.CARG "Kyrkja" ].

Kyrkjeglupen-pn := pn-word &
  [ STEM < "Kyrkjeglupen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Kyrkjeglupen" ].

Kyrkjetjørna-pn := pn-word &
  [ STEM < "Kyrkjetjørna" >,
    SYNSEM.LKEYS.KEYREL.CARG "Kyrkjetjørna" ].

Langedalen-pn := pn-word &
  [ STEM < "Langedalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Langedalen" ].

Langeskavlen-pn := pn-word &
  [ STEM < "Langeskavlen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Langeskavlen" ].

Langeskavltind-pn := pn-word &
  [ STEM < "Langeskavltind" >,
    SYNSEM.LKEYS.KEYREL.CARG "Langeskavltind" ].

Leirbreen-pn := pn-word &
  [ STEM < "Leirbreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Leirbreen" ].

Leirdalen-pn := pn-word &
  [ STEM < "Leirdalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Leirdalen" ].

Leirungene-pn := pn-word &
  [ STEM < "Leirungene" >,
    SYNSEM.LKEYS.KEYREL.CARG "Leirungene" ].

Leirungsdalen-pn := pn-word &
  [ STEM < "Leirungsdalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Leirungsdalen" ].

Leirungsåa-pn := pn-word &
  [ STEM < "Leirungsåa" >,
    SYNSEM.LKEYS.KEYREL.CARG "Leirungsåa" ].

Leirvann-pn := pn-word &
  [ STEM < "Leirvann" >,
    SYNSEM.LKEYS.KEYREL.CARG "Leirvann" ].

Leirvannet-pn := pn-word &
  [ STEM < "Leirvannet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Leirvannet" ].

Leirvatnet-pn := pn-word &
  [ STEM < "Leirvatnet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Leirvatnet" ].

Liabreen-pn := pn-word &
  [ STEM < "Liabreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Liabreen" ].

Liabrekulen-pn := pn-word &
  [ STEM < "Liabrekulen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Liabrekulen" ].

Liabrevatnet-pn := pn-word &
  [ STEM < "Liabrevatnet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Liabrevatnet" ].

Liaflua-pn := pn-word &
  [ STEM < "Liaflua" >,
    SYNSEM.LKEYS.KEYREL.CARG "Liaflua" ].

Lomseggen-pn := pn-word &
  [ STEM < "Lomseggen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Lomseggen" ].

Lundadalen-pn := pn-word &
  [ STEM < "Lundadalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Lundadalen" ].

Lundadalsbandet-pn := pn-word &
  [ STEM < "Lundadalsbandet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Lundadalsbandet" ].

Lusahaugane-pn := pn-word &
  [ STEM < "Lusahaugane" >,
    SYNSEM.LKEYS.KEYREL.CARG "Lusahaugane" ].

Magny-pn := pn-word &
  [ STEM < "Magny" >,
    SYNSEM.LKEYS.KEYREL.CARG "Magny" ].

Marabotthornet-pn := pn-word &
  [ STEM < "Marabotthornet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Marabotthornet" ].

Mardalsfossen-pn := pn-word &
  [ STEM < "Mardalsfossen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Mardalsfossen" ].

Medalsbu-pn := pn-word &
  [ STEM < "Medalsbu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Medalsbu" ].

Melheim-pn := pn-word &
  [ STEM < "Melheim" >,
    SYNSEM.LKEYS.KEYREL.CARG "Melheim" ].

Middalen-pn := pn-word &
  [ STEM < "Middalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Middalen" ].

Midthun-pn := pn-word &
  [ STEM < "Midthun" >,
    SYNSEM.LKEYS.KEYREL.CARG "Midthun" ].

Midtmaradalen-pn := pn-word &
  [ STEM < "Midtmaradalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Midtmaradalen" ].

Mjølkedalsbreen-pn := pn-word &
  [ STEM < "Mjølkedalsbreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Mjølkedalsbreen" ].

Mjølkedalsvatn-pn := pn-word &
  [ STEM < "Mjølkedalsvatn" >,
    SYNSEM.LKEYS.KEYREL.CARG "Mjølkedalsvatn" ].

Mjølkedalsvatnet-pn := pn-word &
  [ STEM < "Mjølkedalsvatnet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Mjølkedalsvatnet" ].

Mjølkedøla-pn := pn-word &
  [ STEM < "Mjølkedøla" >,
    SYNSEM.LKEYS.KEYREL.CARG "Mjølkedøla" ].

Mohn-pn := pn-word &
  [ STEM < "Mohn" >,
    SYNSEM.LKEYS.KEYREL.CARG "Mohn" ].

Moria-pn := pn-word &
  [ STEM < "Moria" >,
    SYNSEM.LKEYS.KEYREL.CARG "Moria" ].

Mundhjeld-pn := pn-word &
  [ STEM < "Mundhjeld" >,
    SYNSEM.LKEYS.KEYREL.CARG "Mundhjeld" ].

Murane-pn := pn-word &
  [ STEM < "Murane" >,
    SYNSEM.LKEYS.KEYREL.CARG "Murane" ].

Mørkrisdalen-pn := pn-word &
  [ STEM < "Mørkrisdalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Mørkrisdalen" ].

Mørstadstølen-pn := pn-word &
  [ STEM < "Mørstadstølen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Mørstadstølen" ].

Naturhus-pn := pn-word &
  [ STEM < "Naturhus" >,
    SYNSEM.LKEYS.KEYREL.CARG "Naturhus" ].

Nedstestølen-pn := pn-word &
  [ STEM < "Nedstestølen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Nedstestølen" ].

Nilsestugu-pn := pn-word &
  [ STEM < "Nilsestugu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Nilsestugu" ].

Nordtorp-pn := pn-word &
  [ STEM < "Nordtorp" >,
    SYNSEM.LKEYS.KEYREL.CARG "Nordtorp" ].

Norig-pn := pn-word &
  [ STEM < "Norig" >,
    SYNSEM.LKEYS.KEYREL.CARG "Norig" ].

Nybod-pn := pn-word &
  [ STEM < "Nybod" >,
    SYNSEM.LKEYS.KEYREL.CARG "Nybod" ].

Nybua-pn := pn-word &
  [ STEM < "Nybua" >,
    SYNSEM.LKEYS.KEYREL.CARG "Nybua" ].

Nærheden-pn := pn-word &
  [ STEM < "Nærheden" >,
    SYNSEM.LKEYS.KEYREL.CARG "Nærheden" ].

OA-pn := pn-word &
  [ STEM < "OA" >,
    SYNSEM.LKEYS.KEYREL.CARG "OA" ].

Oksedalen-pn := pn-word &
  [ STEM < "Oksedalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Oksedalen" ].

Oleberga-pn := pn-word &
  [ STEM < "Oleberga" >,
    SYNSEM.LKEYS.KEYREL.CARG "Oleberga" ].

Olefjorden-pn := pn-word &
  [ STEM < "Olefjorden" >,
    SYNSEM.LKEYS.KEYREL.CARG "Olefjorden" ].

Ormelid-pn := pn-word &
  [ STEM < "Ormelid" >,
    SYNSEM.LKEYS.KEYREL.CARG "Ormelid" ].

Oskampen-pn := pn-word &
  [ STEM < "Oskampen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Oskampen" ].

Otterness-pn := pn-word &
  [ STEM < "Otterness" >,
    SYNSEM.LKEYS.KEYREL.CARG "Otterness" ].

Piggrovi-pn := pn-word &
  [ STEM < "Piggrovi" >,
    SYNSEM.LKEYS.KEYREL.CARG "Piggrovi" ].

Prestesteinsvatnet-pn := pn-word &
  [ STEM < "Prestesteinsvatnet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Prestesteinsvatnet" ].

Raubergstulen-pn := pn-word &
  [ STEM < "Raubergstulen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Raubergstulen" ].

Raudalen-pn := pn-word &
  [ STEM < "Raudalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Raudalen" ].

Raudalsbandet-pn := pn-word &
  [ STEM < "Raudalsbandet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Raudalsbandet" ].

Raudalsegga-pn := pn-word &
  [ STEM < "Raudalsegga" >,
    SYNSEM.LKEYS.KEYREL.CARG "Raudalsegga" ].

Raudalseggi-pn := pn-word &
  [ STEM < "Raudalseggi" >,
    SYNSEM.LKEYS.KEYREL.CARG "Raudalseggi" ].

Raudalstind-pn := pn-word &
  [ STEM < "Raudalstind" >,
    SYNSEM.LKEYS.KEYREL.CARG "Raudalstind" ].

Raudalstindan-pn := pn-word &
  [ STEM < "Raudalstindan" >,
    SYNSEM.LKEYS.KEYREL.CARG "Raudalstindan" ].

Raudalstindane-pn := pn-word &
  [ STEM < "Raudalstindane" >,
    SYNSEM.LKEYS.KEYREL.CARG "Raudalstindane" ].

Raudalstindar-pn := pn-word &
  [ STEM < "Raudalstindar" >,
    SYNSEM.LKEYS.KEYREL.CARG "Raudalstindar" ].

Raudfjorden-pn := pn-word &
  [ STEM < "Raudfjorden" >,
    SYNSEM.LKEYS.KEYREL.CARG "Raudfjorden" ].

Rauhamrane-pn := pn-word &
  [ STEM < "Rauhamrane" >,
    SYNSEM.LKEYS.KEYREL.CARG "Rauhamrane" ].

Reiremo-pn := pn-word &
  [ STEM < "Reiremo" >,
    SYNSEM.LKEYS.KEYREL.CARG "Reiremo" ].

Resort-pn := pn-word &
  [ STEM < "Resort" >,
    SYNSEM.LKEYS.KEYREL.CARG "Resort" ].

Rundtom-pn := pn-word &
  [ STEM < "Rundtom" >,
    SYNSEM.LKEYS.KEYREL.CARG "Rundtom" ].

Råmund-pn := pn-word &
  [ STEM < "Råmund" >,
    SYNSEM.LKEYS.KEYREL.CARG "Råmund" ].

Rønjus-pn := pn-word &
  [ STEM < "Rønjus" >,
    SYNSEM.LKEYS.KEYREL.CARG "Rønjus" ].

Rønnaug-pn := pn-word &
  [ STEM < "Rønnaug" >,
    SYNSEM.LKEYS.KEYREL.CARG "Rønnaug" ].

Sagstuen-pn := pn-word &
  [ STEM < "Sagstuen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sagstuen" ].

Sandelvbrean-pn := pn-word &
  [ STEM < "Sandelvbrean" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sandelvbrean" ].

Sandelvbreen-pn := pn-word &
  [ STEM < "Sandelvbreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sandelvbreen" ].

Schelderup-pn := pn-word &
  [ STEM < "Schelderup" >,
    SYNSEM.LKEYS.KEYREL.CARG "Schelderup" ].

Schreiber-pn := pn-word &
  [ STEM < "Schreiber" >,
    SYNSEM.LKEYS.KEYREL.CARG "Schreiber" ].

Seksin-pn := pn-word &
  [ STEM < "Seksin" >,
    SYNSEM.LKEYS.KEYREL.CARG "Seksin" ].

Semmeldalsmunnen-pn := pn-word &
  [ STEM < "Semmeldalsmunnen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Semmeldalsmunnen" ].

Serine-pn := pn-word &
  [ STEM < "Serine" >,
    SYNSEM.LKEYS.KEYREL.CARG "Serine" ].

Simledalsbandet-pn := pn-word &
  [ STEM < "Simledalsbandet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Simledalsbandet" ].

Sjodalen-pn := pn-word &
  [ STEM < "Sjodalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sjodalen" ].

Sjogholstind-pn := pn-word &
  [ STEM < "Sjogholstind" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sjogholstind" ].

Sjogholsvatnet-pn := pn-word &
  [ STEM < "Sjogholsvatnet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sjogholsvatnet" ].

Skagastølsdalen-pn := pn-word &
  [ STEM < "Skagastølsdalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skagastølsdalen" ].

Skagastølsryggen-pn := pn-word &
  [ STEM < "Skagastølsryggen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skagastølsryggen" ].

Skagastølstind-pn := pn-word &
  [ STEM < "Skagastølstind" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skagastølstind" ].

Skagastølstindarne-pn := pn-word &
  [ STEM < "Skagastølstindarne" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skagastølstindarne" ].

Skagastølstinder-pn := pn-word &
  [ STEM < "Skagastølstinder" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skagastølstinder" ].

Skamdalen-pn := pn-word &
  [ STEM < "Skamdalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skamdalen" ].

Skarvheimen-pn := pn-word &
  [ STEM < "Skarvheimen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skarvheimen" ].

Skautevatnet-pn := pn-word &
  [ STEM < "Skautevatnet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skautevatnet" ].

Skineggen-pn := pn-word &
  [ STEM < "Skineggen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skineggen" ].

Skinneggin-pn := pn-word &
  [ STEM < "Skinneggin" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skinneggin" ].

Skjeldrehornet-pn := pn-word &
  [ STEM < "Skjeldrehornet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skjeldrehornet" ].

Skogadalsbreen-pn := pn-word &
  [ STEM < "Skogadalsbreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skogadalsbreen" ].

Skredbergene-pn := pn-word &
  [ STEM < "Skredbergene" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skredbergene" ].

Skåbu-pn := pn-word &
  [ STEM < "Skåbu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skåbu" ].

Skålabotn-pn := pn-word &
  [ STEM < "Skålabotn" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skålabotn" ].

Skålabotnskaret-pn := pn-word &
  [ STEM < "Skålabotnskaret" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skålabotnskaret" ].

Skålavatnet-pn := pn-word &
  [ STEM < "Skålavatnet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skålavatnet" ].

Skålevatn-pn := pn-word &
  [ STEM < "Skålevatn" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skålevatn" ].

Skåri-pn := pn-word &
  [ STEM < "Skåri" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skåri" ].

Slethamn-pn := pn-word &
  [ STEM < "Slethamn" >,
    SYNSEM.LKEYS.KEYREL.CARG "Slethamn" ].

Slettningsbu-pn := pn-word &
  [ STEM < "Slettningsbu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Slettningsbu" ].

Slingsby-pn := pn-word &
  [ STEM < "Slingsby" >,
    SYNSEM.LKEYS.KEYREL.CARG "Slingsby" ].

Sløtafjellet-pn := pn-word &
  [ STEM < "Sløtafjellet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sløtafjellet" ].

Smiugjelet-pn := pn-word &
  [ STEM < "Smiugjelet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Smiugjelet" ].

Smørstabbreen-pn := pn-word &
  [ STEM < "Smørstabbreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Smørstabbreen" ].

Smørstabbtinder-pn := pn-word &
  [ STEM < "Smørstabbtinder" >,
    SYNSEM.LKEYS.KEYREL.CARG "Smørstabbtinder" ].

Sognefjeldet-pn := pn-word &
  [ STEM < "Sognefjeldet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sognefjeldet" ].

Sognefjellveien-pn := pn-word &
  [ STEM < "Sognefjellveien" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sognefjellveien" ].

Solglansen-pn := pn-word &
  [ STEM < "Solglansen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Solglansen" ].

Spiterhø-pn := pn-word &
  [ STEM < "Spiterhø" >,
    SYNSEM.LKEYS.KEYREL.CARG "Spiterhø" ].

Steinar-pn := pn-word &
  [ STEM < "Steinar" >,
    SYNSEM.LKEYS.KEYREL.CARG "Steinar" ].

Steinarstugu-pn := pn-word &
  [ STEM < "Steinarstugu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Steinarstugu" ].

Steinbusjøen-pn := pn-word &
  [ STEM < "Steinbusjøen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Steinbusjøen" ].

Steindalen-pn := pn-word &
  [ STEM < "Steindalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Steindalen" ].

Steindøla-pn := pn-word &
  [ STEM < "Steindøla" >,
    SYNSEM.LKEYS.KEYREL.CARG "Steindøla" ].

Stetind-pn := pn-word &
  [ STEM < "Stetind" >,
    SYNSEM.LKEYS.KEYREL.CARG "Stetind" ].

Storebjørn-pn := pn-word &
  [ STEM < "Storebjørn" >,
    SYNSEM.LKEYS.KEYREL.CARG "Storebjørn" ].

Storebrua-pn := pn-word &
  [ STEM < "Storebrua" >,
    SYNSEM.LKEYS.KEYREL.CARG "Storebrua" ].

Storegut-pn := pn-word &
  [ STEM < "Storegut" >,
    SYNSEM.LKEYS.KEYREL.CARG "Storegut" ].

Storeskag-pn := pn-word &
  [ STEM < "Storeskag" >,
    SYNSEM.LKEYS.KEYREL.CARG "Storeskag" ].

Storevatn-pn := pn-word &
  [ STEM < "Storevatn" >,
    SYNSEM.LKEYS.KEYREL.CARG "Storevatn" ].

Storevatnet-pn := pn-word &
  [ STEM < "Storevatnet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Storevatnet" ].

Storura-pn := pn-word &
  [ STEM < "Storura" >,
    SYNSEM.LKEYS.KEYREL.CARG "Storura" ].

Storutladalen-pn := pn-word &
  [ STEM < "Storutladalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Storutladalen" ].

Storåa-pn := pn-word &
  [ STEM < "Storåa" >,
    SYNSEM.LKEYS.KEYREL.CARG "Storåa" ].

Storådalen-pn := pn-word &
  [ STEM < "Storådalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Storådalen" ].

Stuup-pn := pn-word &
  [ STEM < "Stuup" >,
    SYNSEM.LKEYS.KEYREL.CARG "Stuup" ].

Styggebreen-pn := pn-word &
  [ STEM < "Styggebreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Styggebreen" ].

Styggedalstinder-pn := pn-word &
  [ STEM < "Styggedalstinder" >,
    SYNSEM.LKEYS.KEYREL.CARG "Styggedalstinder" ].

Styggehø-pn := pn-word &
  [ STEM < "Styggehø" >,
    SYNSEM.LKEYS.KEYREL.CARG "Styggehø" ].

Stølsmaradalen-pn := pn-word &
  [ STEM < "Stølsmaradalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Stølsmaradalen" ].

Stølsmaradalsfossen-pn := pn-word &
  [ STEM < "Stølsmaradalsfossen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Stølsmaradalsfossen" ].

Stølsnostind-pn := pn-word &
  [ STEM < "Stølsnostind" >,
    SYNSEM.LKEYS.KEYREL.CARG "Stølsnostind" ].

Stølsnostindane-pn := pn-word &
  [ STEM < "Stølsnostindane" >,
    SYNSEM.LKEYS.KEYREL.CARG "Stølsnostindane" ].

Sulheim-pn := pn-word &
  [ STEM < "Sulheim" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sulheim" ].

Sumar-pn := pn-word &
  [ STEM < "Sumar" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sumar" ].

Surtningsbreen-pn := pn-word &
  [ STEM < "Surtningsbreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Surtningsbreen" ].

Surtningstind-pn := pn-word &
  [ STEM < "Surtningstind" >,
    SYNSEM.LKEYS.KEYREL.CARG "Surtningstind" ].

Svartdalen-pn := pn-word &
  [ STEM < "Svartdalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Svartdalen" ].

Svartdalspiggen-pn := pn-word &
  [ STEM < "Svartdalspiggen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Svartdalspiggen" ].

Svartedauen-pn := pn-word &
  [ STEM < "Svartedauen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Svartedauen" ].

Svarthammarbua-pn := pn-word &
  [ STEM < "Svarthammarbua" >,
    SYNSEM.LKEYS.KEYREL.CARG "Svarthammarbua" ].

Svarttjørna-pn := pn-word &
  [ STEM < "Svarttjørna" >,
    SYNSEM.LKEYS.KEYREL.CARG "Svarttjørna" ].

Sveidalsbreen-pn := pn-word &
  [ STEM < "Sveidalsbreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sveidalsbreen" ].

Svellnosbreen-pn := pn-word &
  [ STEM < "Svellnosbreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Svellnosbreen" ].

Svellnoså-pn := pn-word &
  [ STEM < "Svellnoså" >,
    SYNSEM.LKEYS.KEYREL.CARG "Svellnoså" ].

Svensøy-pn := pn-word &
  [ STEM < "Svensøy" >,
    SYNSEM.LKEYS.KEYREL.CARG "Svensøy" ].

Systerbottjernet-pn := pn-word &
  [ STEM < "Systerbottjernet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Systerbottjernet" ].

Therese-pn := pn-word &
  [ STEM < "Therese" >,
    SYNSEM.LKEYS.KEYREL.CARG "Therese" ].

Tora-pn := pn-word &
  [ STEM < "Tora" >,
    SYNSEM.LKEYS.KEYREL.CARG "Tora" ].

Torfinnsdøla-pn := pn-word &
  [ STEM < "Torfinnsdøla" >,
    SYNSEM.LKEYS.KEYREL.CARG "Torfinnsdøla" ].

Torfinnstind-pn := pn-word &
  [ STEM < "Torfinnstind" >,
    SYNSEM.LKEYS.KEYREL.CARG "Torfinnstind" ].

Torfinnstindane-pn := pn-word &
  [ STEM < "Torfinnstindane" >,
    SYNSEM.LKEYS.KEYREL.CARG "Torfinnstindane" ].

Trulsbu-pn := pn-word &
  [ STEM < "Trulsbu" >,
    SYNSEM.LKEYS.KEYREL.CARG "Trulsbu" ].

Turistsenter-pn := pn-word &
  [ STEM < "Turistsenter" >,
    SYNSEM.LKEYS.KEYREL.CARG "Turistsenter" ].

Tussetind-pn := pn-word &
  [ STEM < "Tussetind" >,
    SYNSEM.LKEYS.KEYREL.CARG "Tussetind" ].

Tverrbyttfjellet-pn := pn-word &
  [ STEM < "Tverrbyttfjellet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Tverrbyttfjellet" ].

Tverrdalsnosi-pn := pn-word &
  [ STEM < "Tverrdalsnosi" >,
    SYNSEM.LKEYS.KEYREL.CARG "Tverrdalsnosi" ].

Tvindehaugen-pn := pn-word &
  [ STEM < "Tvindehaugen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Tvindehaugen" ].

Tyinholmen-pn := pn-word &
  [ STEM < "Tyinholmen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Tyinholmen" ].

Uradalen-pn := pn-word &
  [ STEM < "Uradalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Uradalen" ].

Uradalsvatnet-pn := pn-word &
  [ STEM < "Uradalsvatnet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Uradalsvatnet" ].

Uraknatten-pn := pn-word &
  [ STEM < "Uraknatten" >,
    SYNSEM.LKEYS.KEYREL.CARG "Uraknatten" ].

Uranosbreen-pn := pn-word &
  [ STEM < "Uranosbreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Uranosbreen" ].

Uranostind-pn := pn-word &
  [ STEM < "Uranostind" >,
    SYNSEM.LKEYS.KEYREL.CARG "Uranostind" ].

Urdadalstindar-pn := pn-word &
  [ STEM < "Urdadalstindar" >,
    SYNSEM.LKEYS.KEYREL.CARG "Urdadalstindar" ].

Urden-pn := pn-word &
  [ STEM < "Urden" >,
    SYNSEM.LKEYS.KEYREL.CARG "Urden" ].

Utladalsjuvet-pn := pn-word &
  [ STEM < "Utladalsjuvet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Utladalsjuvet" ].

VH-pn := pn-word &
  [ STEM < "VH" >,
    SYNSEM.LKEYS.KEYREL.CARG "VH" ].

Vareggene-pn := pn-word &
  [ STEM < "Vareggene" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vareggene" ].

Vennestølsdalen-pn := pn-word &
  [ STEM < "Vennestølsdalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vennestølsdalen" ].

Vennistøldalen-pn := pn-word &
  [ STEM < "Vennistøldalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vennistøldalen" ].

Vennistølsdalen-pn := pn-word &
  [ STEM < "Vennistølsdalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vennistølsdalen" ].

Veobreen-pn := pn-word &
  [ STEM < "Veobreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Veobreen" ].

Veodalen-pn := pn-word &
  [ STEM < "Veodalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Veodalen" ].

Vesledalen-pn := pn-word &
  [ STEM < "Vesledalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vesledalen" ].

Vesledalstinden-pn := pn-word &
  [ STEM < "Vesledalstinden" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vesledalstinden" ].

Veslegjuvbreen-pn := pn-word &
  [ STEM < "Veslegjuvbreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Veslegjuvbreen" ].

Vesleåa-pn := pn-word &
  [ STEM < "Vesleåa" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vesleåa" ].

Vesleådalen-pn := pn-word &
  [ STEM < "Vesleådalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vesleådalen" ].

Veslådalen-pn := pn-word &
  [ STEM < "Veslådalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Veslådalen" ].

Vestfjell-pn := pn-word &
  [ STEM < "Vestfjell" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vestfjell" ].

Vestland-pn := pn-word &
  [ STEM < "Vestland" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vestland" ].

Vestoppland-pn := pn-word &
  [ STEM < "Vestoppland" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vestoppland" ].

Vetledøla-pn := pn-word &
  [ STEM < "Vetledøla" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vetledøla" ].

Vetlestova-pn := pn-word &
  [ STEM < "Vetlestova" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vetlestova" ].

Vetleutladalen-pn := pn-word &
  [ STEM < "Vetleutladalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vetleutladalen" ].

Vettisfossen-pn := pn-word &
  [ STEM < "Vettisfossen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vettisfossen" ].

Vettismorki-pn := pn-word &
  [ STEM < "Vettismorki" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vettismorki" ].

Vigdal-pn := pn-word &
  [ STEM < "Vigdal" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vigdal" ].

Vinjebua-pn := pn-word &
  [ STEM < "Vinjebua" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vinjebua" ].

Vinstri-pn := pn-word &
  [ STEM < "Vinstri" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vinstri" ].

Visbretindar-pn := pn-word &
  [ STEM < "Visbretindar" >,
    SYNSEM.LKEYS.KEYREL.CARG "Visbretindar" ].

Visdalen-pn := pn-word &
  [ STEM < "Visdalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Visdalen" ].

Volehytta-pn := pn-word &
  [ STEM < "Volehytta" >,
    SYNSEM.LKEYS.KEYREL.CARG "Volehytta" ].

Vormeli-pn := pn-word &
  [ STEM < "Vormeli" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vormeli" ].

Vøloa-pn := pn-word &
  [ STEM < "Vøloa" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vøloa" ].

Vølodalen-pn := pn-word &
  [ STEM < "Vølodalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vølodalen" ].

Vølohornet-pn := pn-word &
  [ STEM < "Vølohornet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vølohornet" ].

Yksendalen-pn := pn-word &
  [ STEM < "Yksendalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Yksendalen" ].

Ytterdalssetrene-pn := pn-word &
  [ STEM < "Ytterdalssetrene" >,
    SYNSEM.LKEYS.KEYREL.CARG "Ytterdalssetrene" ].

Ådal-pn := pn-word &
  [ STEM < "Ådal" >,
    SYNSEM.LKEYS.KEYREL.CARG "Ådal" ].

Åmund-pn := pn-word &
  [ STEM < "Åmund" >,
    SYNSEM.LKEYS.KEYREL.CARG "Åmund" ].

Øvstestølen-pn := pn-word &
  [ STEM < "Øvstestølen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Øvstestølen" ].

;;;;; Missing nouns from the Jotunheimen corpus

sirkulasjonssvikt-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "sirkulasjonssvikt" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_sirkulasjonssvikt_n_rel" ].

rutevalg-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "rutevalg" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_rutevalg_n_rel" ].

menyvalg-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "menyvalg" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_menyvalg_n_rel" ].

pengegave-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "pengegave" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_pengegave_n_rel" ].

stortopp-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "stortopp" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_stortopp_n_rel" ].

sikringsmiddel-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "sikringsmiddel" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_sikringsmiddel_n_rel" ].

turbukse-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "turbukse" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_turbukse_n_rel" ].

furukjempe-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "furukjempe" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_furukjempe_n_rel" ].

hjertekompresjon-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "hjertekompresjon" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_hjertekompresjon_n_rel" ].

skilandslag-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "skilandslag" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_skilandslag_n_rel" ].

turjakke-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "turjakke" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_turjakke_n_rel" ].

bretur-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "bretur" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_bretur_n_rel" ].

setersti-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "setersti" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_setersti_n_rel" ].

fraktjobb-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "fraktjobb" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fraktjobb_n_rel" ].

blokkmark-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "blokkmark" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_blokkmark_n_rel" ].

postvei-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "postvei" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_postvei_n_rel" ].

nattelosji-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "nattelosji" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_nattelosji_n_rel" ].

bresport-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "bresport" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_bresport_n_rel" ].

sommersamling-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "sommersamling" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_sommersamling_n_rel" ].

jordbruksvei-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "jordbruksvei" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_jordbruksvei_n_rel" ].

utkikksplattform-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "utkikksplattform" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_utkikksplattform_n_rel" ].

tinderekke-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "tinderekke" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_tinderekke_n_rel" ].

ferdselsforbud-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "ferdselsforbud" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_ferdselsforbud_n_rel" ].

ringmur-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "ringmur" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_ringmur_n_rel" ].

fegjeter-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "fegjeter" >,
    INFLECTION m2,
    SYNSEM.LKEYS.KEYREL.PRED "_fegjeter_n_rel" ].

lavlandsflora-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "lavlandsflora" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_lavlandsflora_n_rel" ].

skumgummibit-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "skumgummibit" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_skumgummibit_n_rel" ].

turistvert-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "turistvert" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_turistvert_n_rel" ].

fosselandskap-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "fosselandskap" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_fosselandskap_n_rel" ].

avsmeltning-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "avsmeltning" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_avsmeltning_n_rel" ].

turmeny-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "turmeny" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_turmeny_n_rel" ].

hyttevakt-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "hyttevakt" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_hyttevakt_n_rel" ].

bresenter-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "bresenter" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_bresenter_n_rel" ].

vannstreng-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "vannstreng" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_vannstreng_n_rel" ].

fjellpioner-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "fjellpioner" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fjellpioner_n_rel" ].

bretarm-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "bretarm" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_bretarm_n_rel" ].

brefall-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "brefall" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_brefall_n_rel" ].

villreinflokk-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "villreinflokk" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_villreinflokk_n_rel" ].

ettermiddagstur-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "ettermiddagstur" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_ettermiddagstur_n_rel" ].

topptur-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "topptur" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_topptur_n_rel" ].

stortur-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "stortur" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_stortur_n_rel" ].

festtur-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "festtur" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_festtur_n_rel" ].

hytteomtale-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "hytteomtale" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_hytteomtale_n_rel" ].

fangstanlegg-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "fangstanlegg" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_fangstanlegg_n_rel" ].

hytteanlegg-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "hytteanlegg" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_hytteanlegg_n_rel" ].

nabotopp-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "nabotopp" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_nabotopp_n_rel" ].

nordbredd-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "nordbredd" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_nordbredd_n_rel" ].

fjellbruk-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "fjellbruk" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_fjellbruk_n_rel" ].

vierkratt-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "vierkratt" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_vierkratt_n_rel" ].

fotturisme-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "fotturisme" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fotturisme_n_rel" ].

innesko-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "innesko" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_innesko_n_rel" ].

toppvarde-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "toppvarde" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_toppvarde_n_rel" ].

overnattingsforhold-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "overnattingsforhold" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_overnattingsforhold_n_rel" ].

transportforhold-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "transportforhold" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_transportforhold_n_rel" ].

avslutningstur-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "avslutningstur" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_avslutningstur_n_rel" ].

proviantlager-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "proviantlager" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_proviantlager_n_rel" ].

siktevarde-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "siktevarde" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_siktevarde_n_rel" ].

steinvarde-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "steinvarde" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_steinvarde_n_rel" ].

stiskille-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "stiskille" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_stiskille_n_rel" ].

eiendomskonge-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "eiendomskonge" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_eiendomskonge_n_rel" ].

veidemannsliv-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "veidemannsliv" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_veidemannsliv_n_rel" ].

sommerfjell-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "sommerfjell" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_sommerfjell_n_rel" ].

vinterfjell-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "vinterfjell" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_vinterfjell_n_rel" ].

losjerad-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "losjerad" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_losjerad_n_rel" ].

fjellpass-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "fjellpass" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_fjellpass_n_rel" ].

fjellopplevelse-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "fjellopplevelse" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fjellopplevelse_n_rel" ].

gjennomsnittsvandrer-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "gjennomsnittsvandrer" >,
    INFLECTION m2,
    SYNSEM.LKEYS.KEYREL.PRED "_gjennomsnittsvandrer_n_rel" ].

overnattingsrekord-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "overnattingsrekord" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_overnattingsrekord_n_rel" ].

vandrerute-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "vandrerute" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_vandrerute_n_rel" ].

fangstgrav-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "fangstgrav" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fangstgrav_n_rel" ].

brekunnskap-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "brekunnskap" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_brekunnskap_n_rel" ].

beitepress-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "beitepress" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_beitepress_n_rel" ].

seterstil-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "seterstil" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_seterstil_n_rel" ].

turmulighet-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "turmulighet" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_turmulighet_n_rel" ].

adkomstmulighet-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "adkomstmulighet" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_adkomstmulighet_n_rel" ].

fargedryss-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "fargedryss" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_fargedryss_n_rel" ].

totusenmeter-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "totusenmeter" >,
    INFLECTION m2,
    SYNSEM.LKEYS.KEYREL.PRED "_totusenmeter_n_rel" ].

hjelpelinje-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "hjelpelinje" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_hjelpelinje_n_rel" ].

seterfolk-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "seterfolk" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_seterfolk_n_rel" ].

hyttesmak-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "hyttesmak" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_hyttesmak_n_rel" ].

brekurs-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "brekurs" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_brekurs_n_rel" ].

alpinkurs-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "alpinkurs" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_alpinkurs_n_rel" ].

isklatrer-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "isklatrer" >,
    INFLECTION m2,
    SYNSEM.LKEYS.KEYREL.PRED "_isklatrer_n_rel" ].

fotturpioner-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "fotturpioner" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fotturpioner_n_rel" ].

losjihus-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "losjihus" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_losjihus_n_rel" ].

sportstape-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "sportstape" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_sportstape_n_rel" ].

breerfaring-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "breerfaring" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_breerfaring_n_rel" ].

klatreerfaring-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "klatreerfaring" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_klatreerfaring_n_rel" ].

turregister-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "turregister" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_turregister_n_rel" ].

storfuru-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "storfuru" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_storfuru_n_rel" ].

turguide-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "turguide" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_turguide_n_rel" ].

beitekvalitet-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "beitekvalitet" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_beitekvalitet_n_rel" ].

naturentusiast-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "naturentusiast" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_naturentusiast_n_rel" ].

karakterdyr-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "karakterdyr" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_karakterdyr_n_rel" ].

skinnklede-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "skinnklede" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_skinnklede_n_rel" ].

ledegjerde-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "ledegjerde" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_ledegjerde_n_rel" ].

stikryss-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "stikryss" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_stikryss_n_rel" ].

kafeteriadrift-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "kafeteriadrift" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_kafeteriadrift_n_rel" ].

dagsturmulighet-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "dagsturmulighet" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_dagsturmulighet_n_rel" ].

varderute-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "varderute" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_varderute_n_rel" ].

isfonn-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "isfonn" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_isfonn_n_rel" ].

høyfjellseter-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "høyfjellseter" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_høyfjellseter_n_rel" ].

grasgang-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "grasgang" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_grasgang_n_rel" ].

passasjerbåttrafikk-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "passasjerbåttrafikk" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_passasjerbåttrafikk_n_rel" ].

marsjretningspil-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "marsjretningspil" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_marsjretningspil_n_rel" ].

nasjonalparksenterstatus-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "nasjonalparksenterstatus" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_nasjonalparksenterstatus_n_rel" ].

gnagsårplaster-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "gnagsårplaster" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_gnagsårplaster_n_rel" ].

uveir-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "uveir" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_uveir_n_rel" ].

fjellklatrepioner-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "fjellklatrepioner" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fjellklatrepioner_n_rel" ].

førstebestigning-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "førstebestigning" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_førstebestigning_n_rel" ].

blomsterplante-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "blomsterplante" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_blomsterplante_n_rel" ].

høyfjellsplante-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "høyfjellsplante" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_høyfjellsplante_n_rel" ].

førstebestiger-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "førstebestiger" >,
    INFLECTION m2,
    SYNSEM.LKEYS.KEYREL.PRED "_førstebestiger_n_rel" ].

gråsisik-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "gråsisik" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_gråsisik_n_rel" ].

høyfjellstue-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "høyfjellstue" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_høyfjellstue_n_rel" ].

høyderekord-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "høyderekord" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_høyderekord_n_rel" ].

snøfelt-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "snøfelt" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_snøfelt_n_rel" ].

stølssti-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "stølssti" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_stølssti_n_rel" ].

rødsildre-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "rødsildre" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_rødsildre_n_rel" ].

hovedhytte-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "hovedhytte" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_hovedhytte_n_rel" ].

enkelte_q := pl-indef-art-det-word &
  [ STEM < "enkelte" >,
    SYNSEM.LKEYS.Q.QREL.PRED _enkelte_q_rel ].

enkeltmannspakke-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "enkeltmannspakke" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_enkeltmannspakke_n_rel" ].

snøbro-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "snøbro" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_snøbro_n_rel" ].

tømmerhytte-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "tømmerhytte" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_tømmerhytte_n_rel" ].

hovedrute-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "hovedrute" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_hovedrute_n_rel" ].

motorbåtrute-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "motorbåtrute" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_motorbåtrute_n_rel" ].

stølsgrend-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "stølsgrend" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_stølsgrend_n_rel" ].

;;; Jotunheimen Proper Nouns missing in NKL

Luster-pn := pn-word &
  [ STEM < "Luster" >,
    SYNSEM.LKEYS.KEYREL.CARG "Luster" ].

Årdal-pn := pn-word &
  [ STEM < "Årdal" >,
    SYNSEM.LKEYS.KEYREL.CARG "Årdal" ].

Hjelle-pn := pn-word &
  [ STEM < "Hjelle" >,
    SYNSEM.LKEYS.KEYREL.CARG "Hjelle" ].

Skjåk-pn := pn-word &
  [ STEM < "Skjåk" >,
    SYNSEM.LKEYS.KEYREL.CARG "Skjåk" ].

Vinje-pn := pn-word &
  [ STEM < "Vinje" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vinje" ].

Olav-pn := pn-word &
  [ STEM < "Olav" >,
    SYNSEM.LKEYS.KEYREL.CARG "Olav" ].

Tyin-pn := pn-word &
  [ STEM < "Tyin" >,
    SYNSEM.LKEYS.KEYREL.CARG "Tyin" ].

Gravdalen-pn := pn-word &
  [ STEM < "Gravdalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Gravdalen" ].

Wiker-pn := pn-word &
  [ STEM < "Wiker" >,
    SYNSEM.LKEYS.KEYREL.CARG "Wiker" ].

Ragnhild-pn := pn-word &
  [ STEM < "Ragnhild" >,
    SYNSEM.LKEYS.KEYREL.CARG "Ragnhild" ].

Anne-pn := pn-word &
  [ STEM < "Anne" >,
    SYNSEM.LKEYS.KEYREL.CARG "Anne" ].

Torill-pn := pn-word &
  [ STEM < "Torill" >,
    SYNSEM.LKEYS.KEYREL.CARG "Torill" ].

Valdres-pn := pn-word &
  [ STEM < "Valdres" >,
    SYNSEM.LKEYS.KEYREL.CARG "Valdres" ].

Beito-pn := pn-word &
  [ STEM < "Beito" >,
    SYNSEM.LKEYS.KEYREL.CARG "Beito" ].

Øystre-pn := pn-word &
  [ STEM < "Øystre" >,
    SYNSEM.LKEYS.KEYREL.CARG "Øystre" ].

Kvame-pn := pn-word &
  [ STEM < "Kvame" >,
    SYNSEM.LKEYS.KEYREL.CARG "Kvame" ].

Fjellmuseum-pn := pn-word &
  [ STEM < "Fjellmuseum" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fjellmuseum" ].

Vest-Jotunheimen-pn := pn-word &
  [ STEM < "Vest-Jotunheimen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vest-Jotunheimen" ].

T-merkede-pn := pn-word &
  [ STEM < "T-merkede" >,
    SYNSEM.LKEYS.KEYREL.CARG "T-merkede" ].

Olavsson-pn := pn-word &
  [ STEM < "Olavsson" >,
    SYNSEM.LKEYS.KEYREL.CARG "Olavsson" ].

Olsen-pn := pn-word &
  [ STEM < "Olsen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Olsen" ].

Slidre-pn := pn-word &
  [ STEM < "Slidre" >,
    SYNSEM.LKEYS.KEYREL.CARG "Slidre" ].

Martin-pn := pn-word &
  [ STEM < "Martin" >,
    SYNSEM.LKEYS.KEYREL.CARG "Martin" ].

Leif-pn := pn-word &
  [ STEM < "Leif" >,
    SYNSEM.LKEYS.KEYREL.CARG "Leif" ].

Lindstad-pn := pn-word &
  [ STEM < "Lindstad" >,
    SYNSEM.LKEYS.KEYREL.CARG "Lindstad" ].

Ingrid-pn := pn-word &
  [ STEM < "Ingrid" >,
    SYNSEM.LKEYS.KEYREL.CARG "Ingrid" ].

Erling-pn := pn-word &
  [ STEM < "Erling" >,
    SYNSEM.LKEYS.KEYREL.CARG "Erling" ].

Sognefjorden-pn := pn-word &
  [ STEM < "Sognefjorden" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sognefjorden" ].

Bjørgen-pn := pn-word &
  [ STEM < "Bjørgen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Bjørgen" ].

Lars-pn := pn-word &
  [ STEM < "Lars" >,
    SYNSEM.LKEYS.KEYREL.CARG "Lars" ].

Arvid-pn := pn-word &
  [ STEM < "Arvid" >,
    SYNSEM.LKEYS.KEYREL.CARG "Arvid" ].

Kristoffer-pn := pn-word &
  [ STEM < "Kristoffer" >,
    SYNSEM.LKEYS.KEYREL.CARG "Kristoffer" ].

Austre-pn := pn-word &
  [ STEM < "Austre" >,
    SYNSEM.LKEYS.KEYREL.CARG "Austre" ].

Else-pn := pn-word &
  [ STEM < "Else" >,
    SYNSEM.LKEYS.KEYREL.CARG "Else" ].

Gøril-pn := pn-word &
  [ STEM < "Gøril" >,
    SYNSEM.LKEYS.KEYREL.CARG "Gøril" ].

DNT-lås-pn := pn-word &
  [ STEM < "DNT-lås" >,
    SYNSEM.LKEYS.KEYREL.CARG "DNT-lås" ].

Magnus-pn := pn-word &
  [ STEM < "Magnus" >,
    SYNSEM.LKEYS.KEYREL.CARG "Magnus" ].

Andersen-pn := pn-word &
  [ STEM < "Andersen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Andersen" ].

Einar-pn := pn-word &
  [ STEM < "Einar" >,
    SYNSEM.LKEYS.KEYREL.CARG "Einar" ].

Morka-pn := pn-word &
  [ STEM < "Morka" >,
    SYNSEM.LKEYS.KEYREL.CARG "Morka" ].

Nils-pn := pn-word &
  [ STEM < "Nils" >,
    SYNSEM.LKEYS.KEYREL.CARG "Nils" ].

Thon-pn := pn-word &
  [ STEM < "Thon" >,
    SYNSEM.LKEYS.KEYREL.CARG "Thon" ].

Ulrik-pn := pn-word &
  [ STEM < "Ulrik" >,
    SYNSEM.LKEYS.KEYREL.CARG "Ulrik" ].

Sør-Norges-pn := pn-word &
  [ STEM < "Sør-Norges" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sør-Norges" ].

Oslo-borgeren-pn := pn-word &
  [ STEM < "Oslo-borgeren" >,
    SYNSEM.LKEYS.KEYREL.CARG "Oslo-borgeren" ].

Jostedalsbreen-pn := pn-word &
  [ STEM < "Jostedalsbreen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Jostedalsbreen" ].

Torbjørn-pn := pn-word &
  [ STEM < "Torbjørn" >,
    SYNSEM.LKEYS.KEYREL.CARG "Torbjørn" ].

Håkon-pn := pn-word &
  [ STEM < "Håkon" >,
    SYNSEM.LKEYS.KEYREL.CARG "Håkon" ].

Fortun-pn := pn-word &
  [ STEM < "Fortun" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fortun" ].

Aase-pn := pn-word &
  [ STEM < "Aase" >,
    SYNSEM.LKEYS.KEYREL.CARG "Aase" ].

Arnfinn-pn := pn-word &
  [ STEM < "Arnfinn" >,
    SYNSEM.LKEYS.KEYREL.CARG "Arnfinn" ].

Vinjes-pn := pn-word &
  [ STEM < "Vinjes" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vinjes" ].

Frognerparken-pn := pn-word &
  [ STEM < "Frognerparken" >,
    SYNSEM.LKEYS.KEYREL.CARG "Frognerparken" ].

Åge-pn := pn-word &
  [ STEM < "Åge" >,
    SYNSEM.LKEYS.KEYREL.CARG "Åge" ].

Vågå-pn := pn-word &
  [ STEM < "Vågå" >,
    SYNSEM.LKEYS.KEYREL.CARG "Vågå" ].

Johannes-pn := pn-word &
  [ STEM < "Johannes" >,
    SYNSEM.LKEYS.KEYREL.CARG "Johannes" ].

Glittertind-pn := pn-word &
  [ STEM < "Glittertind" >,
    SYNSEM.LKEYS.KEYREL.CARG "Glittertind" ].

Rudi-pn := pn-word &
  [ STEM < "Rudi" >,
    SYNSEM.LKEYS.KEYREL.CARG "Rudi" ].

Fredrik-pn := pn-word &
  [ STEM < "Fredrik" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fredrik" ].

Magnar-pn := pn-word &
  [ STEM < "Magnar" >,
    SYNSEM.LKEYS.KEYREL.CARG "Magnar" ].

Rikshospitalet-pn := pn-word &
  [ STEM < "Rikshospitalet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Rikshospitalet" ].

Semelhol-tjønnet-pn := pn-word &
  [ STEM < "Semelhol-tjønnet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Semelhol-tjønnet" ].

Nina-pn := pn-word &
  [ STEM < "Nina" >,
    SYNSEM.LKEYS.KEYREL.CARG "Nina" ].

Turlag-pn := pn-word &
  [ STEM < "Turlag" >,
    SYNSEM.LKEYS.KEYREL.CARG "Turlag" ].

Torkjell-pn := pn-word &
  [ STEM < "Torkjell" >,
    SYNSEM.LKEYS.KEYREL.CARG "Torkjell" ].

Arnesen-pn := pn-word &
  [ STEM < "Arnesen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Arnesen" ].

Haavard-pn := pn-word &
  [ STEM < "Haavard" >,
    SYNSEM.LKEYS.KEYREL.CARG "Haavard" ].

Lombværingers-pn := pn-word &
  [ STEM < "Lombværingers" >,
    SYNSEM.LKEYS.KEYREL.CARG "Lombværingers" ].

Johan-pn := pn-word &
  [ STEM < "Johan" >,
    SYNSEM.LKEYS.KEYREL.CARG "Johan" ].

Wergeland-pn := pn-word &
  [ STEM < "Wergeland" >,
    SYNSEM.LKEYS.KEYREL.CARG "Wergeland" ].

Sars-pn := pn-word &
  [ STEM < "Sars" >,
    SYNSEM.LKEYS.KEYREL.CARG "Sars" ].

Roger-pn := pn-word &
  [ STEM < "Roger" >,
    SYNSEM.LKEYS.KEYREL.CARG "Roger" ].

Soria-pn := pn-word &
  [ STEM < "Soria" >,
    SYNSEM.LKEYS.KEYREL.CARG "Soria" ].

Øystein-pn := pn-word &
  [ STEM < "Øystein" >,
    SYNSEM.LKEYS.KEYREL.CARG "Øystein" ].

Østland-pn := pn-word &
  [ STEM < "Østland" >,
    SYNSEM.LKEYS.KEYREL.CARG "Østland" ].

Truls-pn := pn-word &
  [ STEM < "Truls" >,
    SYNSEM.LKEYS.KEYREL.CARG "Truls" ].

Ringdal-pn := pn-word &
  [ STEM < "Ringdal" >,
    SYNSEM.LKEYS.KEYREL.CARG "Ringdal" ].

Fjeldstad-pn := pn-word &
  [ STEM < "Fjeldstad" >,
    SYNSEM.LKEYS.KEYREL.CARG "Fjeldstad" ].

Reiseliv-pn := pn-word &
  [ STEM < "Reiseliv" >,
    SYNSEM.LKEYS.KEYREL.CARG "Reiseliv" ].

Gudbrandsdalen-pn := pn-word &
  [ STEM < "Gudbrandsdalen" >,
    SYNSEM.LKEYS.KEYREL.CARG "Gudbrandsdalen" ].

;;; Jotunheimen nouns missing in NKL

; nord + ende
nordende-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "nordende" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_nordende_n_rel" ].

; vest + ende
vestende-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "vestende" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_vestende_n_rel" ].

; vann + blemme
vannblemme-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "vannblemme" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_vannblemme_n_rel" ].

; natur + oppsyn
naturoppsyn-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "naturoppsyn" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_naturoppsyn_n_rel" ].

; gjeter + bu
gjeterbu-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "gjeterbu" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_gjeterbu_n_rel" ].

; dags + etappe
dagsetappe-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "dagsetappe" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_dagsetappe_n_rel" ].

; sommer + tur
sommertur-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "sommertur" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_sommertur_n_rel" ].

; klatre + tur
klatretur-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "klatretur" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_klatretur_n_rel" ].

; ekstra + tur
ekstratur-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "ekstratur" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_ekstratur_n_rel" ].

; vei + prosjekt
veiprosjekt-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "veiprosjekt" >,
    INFLECTION n1-n2,
    SYNSEM.LKEYS.KEYREL.PRED "_veiprosjekt_n_rel" ].

; anleggs + vei
anleggsvei-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "anleggsvei" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_anleggsvei_n_rel" ].

; folke + sport
folkesport-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "folkesport" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_folkesport_n_rel" ].

; byggesaks + behandling
byggesaksbehandling-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "byggesaksbehandling" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_byggesaksbehandling_n_rel" ].

; fjell + utstyr
fjellutstyr-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "fjellutstyr" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_fjellutstyr_n_rel" ].

; spesial + utstyr
spesialutstyr-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "spesialutstyr" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_spesialutstyr_n_rel" ].

; fjell + side
fjellside-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "fjellside" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fjellside_n_rel" ].

; nordvest + side
nordvestside-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "nordvestside" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_nordvestside_n_rel" ].

; rype + jeger
rypejeger-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "rypejeger" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_rypejeger_n_rel" ].

; sommer + sesong
sommersesong-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "sommersesong" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_sommersesong_n_rel" ].

; turist + sted
turiststed-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "turiststed" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_turiststed_n_rel" ].

; vann + kant
vannkant-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "vannkant" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_vannkant_n_rel" ].

; informasjons + senter
informasjonssenter-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "informasjonssenter" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_informasjonssenter_n_rel" ].

; turist + informasjon
turistinformasjon-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "turistinformasjon" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_turistinformasjon_n_rel" ].

; uthus + bygning
uthusbygning-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "uthusbygning" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_uthusbygning_n_rel" ].

; vinter + sesong
vintersesong-n-masc := masc-mod-cmp-noun-lxm &
  [ STEM < "vintersesong" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_vintersesong_n_rel" ].

; perle + rad
perlerad-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "perlerad" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_perlerad_n_rel" ].

; fjell + vandrer
fjellvandrer-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "fjellvandrer" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fjellvandrer_n_rel" ].

; utleie + hytte
utleiehytte-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "utleiehytte" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_utleiehytte_n_rel" ].

; selvbetjenings + hytte
selvbetjeningshytte-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "selvbetjeningshytte" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_selvbetjeningshytte_n_rel" ].

; fjell + tur
fjelltur-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "fjelltur" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fjelltur_n_rel" ].

; tur + folk
turfolk-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "turfolk" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_turfolk_n_rel" ].

; fjell + folk
fjellfolk-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "fjellfolk" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_fjellfolk_n_rel" ].

; retnings + sans
retningssans-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "retningssans" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_retningssans_n_rel" ].

; vest + bredd
vestbredd-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "vestbredd" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_vestbredd_n_rel" ].

; villrein + jakt
villreinjakt-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "villreinjakt" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_villreinjakt_n_rel" ].

; fjell + rygg
fjellrygg-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "fjellrygg" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fjellrygg_n_rel" ].

; avls + okse
avlsokse-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "avlsokse" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_avlsokse_n_rel" ].

; side + lei
sidelei-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "sidelei" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_sidelei_n_rel" ].

; side + leie
sideleie-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "sideleie" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_sideleie_n_rel" ].

; oppdagelses + ferd
oppdagelsesferd-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "oppdagelsesferd" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_oppdagelsesferd_n_rel" ].

; natur + forhold
naturforhold-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "naturforhold" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_naturforhold_n_rel" ].

; fremmed + bok
fremmedbok-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "fremmedbok" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fremmedbok_n_rel" ].

; kobber + verk
kobberverk-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "kobberverk" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_kobberverk_n_rel" ].

; fjell + gard
fjellgard-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "fjellgard" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fjellgard_n_rel" ].

; vann + stand
vannstand-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "vannstand" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_vannstand_n_rel" ].

; plante + liv
planteliv-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "planteliv" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_planteliv_n_rel" ].

; fjell + dal
fjelldal-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "fjelldal" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fjelldal_n_rel" ].

; bygnings + materiale
bygningsmateriale-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "bygningsmateriale" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_bygningsmateriale_n_rel" ].

; gras + bakke
grasbakke-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "grasbakke" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_grasbakke_n_rel" ].



; etter + vinter
ettervinter-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "ettervinter" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_ettervinter_n_rel" ].

; tur + forslag
turforslag-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "turforslag" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_turforslag_n_rel" ].

; overnattings + mulighet
overnattingsmulighet-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "overnattingsmulighet" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_overnattingsmulighet_n_rel" ].

; overnattings + plass
overnattingsplass-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "overnattingsplass" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_overnattingsplass_n_rel" ].

; telt + plass
teltplass-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "teltplass" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_teltplass_n_rel" ].

; u + tyv
utyv-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "utyv" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_utyv_n_rel" ].

; bre + kant
brekant-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "brekant" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_brekant_n_rel" ].

; grep + lyng
greplyng-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "greplyng" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_greplyng_n_rel" ].


; bredde + grad
breddegrad-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "breddegrad" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_breddegrad_n_rel" ].

; rein + eier
reineier-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "reineier" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_reineier_n_rel" ].

; natur + grunnlag
naturgrunnlag-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "naturgrunnlag" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_naturgrunnlag_n_rel" ].

; stein + hytte
steinhytte-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "steinhytte" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_steinhytte_n_rel" ].

; fjell + natur
fjellnatur-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "fjellnatur" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fjellnatur_n_rel" ].

; kraft + selskap
kraftselskap-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "kraftselskap" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_kraftselskap_n_rel" ].

; fjell + mann
fjellmann-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "fjellmann" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_fjellmann_n_rel" ].

; stein + vegg
steinvegg-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "steinvegg" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_steinvegg_n_rel" ].

; villrein + stamme
villreinstamme-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "villreinstamme" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_villreinstamme_n_rel" ].

; trykk + bandasje
trykkbandasje-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "trykkbandasje" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_trykkbandasje_n_rel" ].

; konge + familie
kongefamilie-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "kongefamilie" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_kongefamilie_n_rel" ].

; post + rute
postrute-n-comm := comm-cmp-count-noun-lxm &
  [ STEM < "postrute" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_postrute_n_rel" ].

; vass + hull
vasshull-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "vasshull" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_vasshull_n_rel" ].

;;; lexical entries for the vpidiom paper (2014-04-15; ph)

bringe_v := main-verb-lxm &
  [ STEM < "bringe" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED bringe_v ].

løfte_v := main-verb-lxm &
  [ STEM < "løfte" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED løfte_v ].

; på_func := func-word &
;   [ STEM < "på" >,
;     SYNSEM.LKEYS.KEYREL.PRED på_prd ].

på_func := func-word &
  [ STEM < "på" >,
    SYNSEM.LKEYS.KEYREL.PRED på_prd ].

på*lenge_func := adv-word &
  [ STEM < "på", "lenge" >,
    SYNSEM.LKEYS.KEYREL.PRED på*lenge_prd ].

til_func := func-word &
  [ STEM < "til" >,
    SYNSEM.LKEYS.KEYREL.PRED til_prd ].

i_func := func-word &
  [ STEM < "i" >,
    SYNSEM.LKEYS.KEYREL.PRED i_prd ].

ved_func := func-word &
  [ STEM < "ved" >,
    SYNSEM.LKEYS.KEYREL.PRED ved_prd ].

bane-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "bane" >,
    SYNSEM.LKEYS.KEYREL.PRED bane_prd ].

flokk-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "flokk" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED flokk_prd ].

konkurs-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "konkurs" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED konkurs_prd ].

; konkurs-idiom := empty-noun-word &
;   [ STEM < "konkurs" >,
;     SYNSEM.LKEYS.KEYREL.PRED konkurs_prd ].

meg-refl := empty-refl-word &
  [ STEM < "meg" >,
    SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PN 1sg,
	     LINK refl ] ].

deg-refl := empty-refl-word &
  [ STEM < "deg" >,
    SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PN 2sg,
	     LINK refl ] ].

oss-refl := empty-refl-word &
  [ STEM < "oss" >,
    SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PN 1pl,
	     LINK refl ] ].

dere-refl := empty-refl-word &
  [ STEM < "dere" >,
    SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PN 2pl,
	     LINK refl ] ].

seg-refl := empty-refl-word &
  [ STEM < "seg" >,
    SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PN 3p,
	     LINK refl ] ].

skjul-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "skjul" >,
    INFLECTION n1,
    SYNSEM.LKEYS.KEYREL.PRED "_skjul_n_rel" ].

tema-n-neut := neut-cmp-count-noun-lxm &
  [ STEM < "tema" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED "_tema_n_rel" ].

bjeffe_v := main-verb-lxm &
  [ STEM < "bjeffe" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED bjeffe_v ].

jage_v := main-verb-lxm &
  [ STEM < "jage" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED jage_v ].

katt-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "katt" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_katt_n_rel" ].

sigarett-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "sigarett" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_sigarett_n_rel" ].

tørke_v := main-verb-lxm &
  [ STEM < "tørke" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED tørke_v ].

svak_a := adj-lxm &
  [ STEM < "svak" >,
    INFLECTION a1,
    SYNSEM.LKEYS.KEYREL.PRED "_svak_a_rel" ].

vedde_v := main-verb-lxm &
  [ STEM < "vedde" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED vedde_v ].

hundre-card := pl-card-word &
  [ STEM < "hundre" >,
    LEXREL.LIST.FIRST.CARG "100_card_rel" ].

presse_v := main-verb-lxm &
  [ STEM < "presse" >,
    INFLECTION v1,
    SYNSEM.LKEYS.KEYREL.PRED presse_v ].

bilde-n-neut := neut-mwe-count-noun-lxm &
  [ STEM < "bilde" >,
    INFLECTION n2,
    SYNSEM.LKEYS.KEYREL.PRED bilde_prd ].

idé-n-masc := masc-cmp-count-noun-lxm &
  [ STEM < "idé" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED "_idé_n_rel" ].

ide-n-masc := masc-mwe-count-noun-lxm &
  [ STEM < "ide" >,
    INFLECTION m1,
    SYNSEM.LKEYS.KEYREL.PRED ide_prd ].
